"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletConnectWallet = exports.WalletConnectRPCMethods = exports.WalletConnectChainID = void 0;
const sign_client_1 = __importDefault(require("@walletconnect/sign-client"));
const qrcode_modal_1 = __importDefault(require("@walletconnect/qrcode-modal"));
const web3_js_1 = require("@solana/web3.js");
const errors_1 = require("./errors");
const utils_1 = require("@walletconnect/utils");
const bs58_1 = __importDefault(require("bs58"));
var WalletConnectChainID;
(function (WalletConnectChainID) {
    WalletConnectChainID["Mainnet"] = "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ";
    WalletConnectChainID["Devnet"] = "solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K";
})(WalletConnectChainID = exports.WalletConnectChainID || (exports.WalletConnectChainID = {}));
var WalletConnectRPCMethods;
(function (WalletConnectRPCMethods) {
    WalletConnectRPCMethods["signTransaction"] = "solana_signTransaction";
    WalletConnectRPCMethods["signMessage"] = "solana_signMessage";
})(WalletConnectRPCMethods = exports.WalletConnectRPCMethods || (exports.WalletConnectRPCMethods = {}));
const getConnectParams = (chainId, pairingTopic) => ({
    requiredNamespaces: {
        solana: {
            chains: [chainId],
            methods: [WalletConnectRPCMethods.signTransaction, WalletConnectRPCMethods.signMessage],
            events: [],
        },
    },
    pairingTopic,
});
class WalletConnectWallet {
    constructor(config) {
        this._options = config.options;
        this._network = config.network;
    }
    connect() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = (_a = this._client) !== null && _a !== void 0 ? _a : (yield sign_client_1.default.init(this._options));
            const sessions = client.find(getConnectParams(this._network)).filter((s) => s.acknowledged);
            if (sessions.length) {
                // select last matching session
                this._session = sessions[sessions.length - 1];
                // We assign this variable only after we're sure we've received approval
                this._client = client;
            }
            else {
                const { uri, approval } = yield client.connect(getConnectParams(this._network));
                if (uri) {
                    qrcode_modal_1.default.open(uri, () => {
                        throw new errors_1.QRCodeModalError();
                    });
                }
                this._session = yield approval();
                // We assign this variable only after we're sure we've received approval
                this._client = client;
                qrcode_modal_1.default.close();
            }
            return {
                publicKey: this.publicKey,
            };
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._client && this._session) {
                yield this._client.disconnect({
                    topic: this._session.topic,
                    reason: (0, utils_1.getSdkError)('USER_DISCONNECTED'),
                });
                this._session = undefined;
            }
            else {
                throw new errors_1.ClientNotInitializedError();
            }
        });
    }
    get client() {
        if (this._client) {
            // TODO: using client.off throws an error
            return Object.assign({}, this._client, { off: this._client.removeListener });
            // return this._client;
        }
        else {
            throw new errors_1.ClientNotInitializedError();
        }
    }
    get publicKey() {
        if (this._client && this._session) {
            const { address } = (0, utils_1.parseAccountId)(this._session.namespaces.solana.accounts[0]);
            return new web3_js_1.PublicKey(address);
        }
        else {
            throw new errors_1.ClientNotInitializedError();
        }
    }
    signTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._client && this._session) {
                const { signature } = yield this._client.request({
                    chainId: this._network,
                    topic: this._session.topic,
                    request: { method: WalletConnectRPCMethods.signTransaction, params: Object.assign({}, transaction) },
                });
                transaction.addSignature(this.publicKey, Buffer.from(bs58_1.default.decode(signature)));
                return transaction;
            }
            else {
                throw new errors_1.ClientNotInitializedError();
            }
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._client && this._session) {
                const { signature } = yield this._client.request({
                    // The network does not change the output of message signing, but this is a required parameter for SignClient
                    chainId: this._network,
                    topic: this._session.topic,
                    request: {
                        method: WalletConnectRPCMethods.signMessage,
                        params: { pubkey: this.publicKey.toString(), message: bs58_1.default.encode(message) },
                    },
                });
                return bs58_1.default.decode(signature);
            }
            else {
                throw new errors_1.ClientNotInitializedError();
            }
        });
    }
}
exports.WalletConnectWallet = WalletConnectWallet;
//# sourceMappingURL=adapter.js.map