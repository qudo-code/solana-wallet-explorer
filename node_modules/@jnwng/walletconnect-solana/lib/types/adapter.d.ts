import WalletConnectClient from '@walletconnect/sign-client';
import { PublicKey } from '@solana/web3.js';
import type { SignClientTypes } from '@walletconnect/types';
import type { Transaction } from '@solana/web3.js';
export interface WalletConnectWalletAdapterConfig {
    network: WalletConnectChainID;
    options: SignClientTypes.Options;
}
export declare enum WalletConnectChainID {
    Mainnet = "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ",
    Devnet = "solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K"
}
export declare enum WalletConnectRPCMethods {
    signTransaction = "solana_signTransaction",
    signMessage = "solana_signMessage"
}
interface WalletConnectWalletInit {
    publicKey: PublicKey;
}
export declare class WalletConnectWallet {
    private _client;
    private _session;
    private readonly _network;
    private readonly _options;
    constructor(config: WalletConnectWalletAdapterConfig);
    connect(): Promise<WalletConnectWalletInit>;
    disconnect(): Promise<void>;
    get client(): WalletConnectClient;
    get publicKey(): PublicKey;
    signTransaction(transaction: Transaction): Promise<Transaction>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=adapter.d.ts.map