/// <reference types="node" />
import { CryptoKeypath, DataItem, RegistryItem } from "@keystonehq/bc-ur-registry";
export declare enum SignType {
    Transaction = 1,
    Message = 2
}
declare type signRequestProps = {
    requestId?: Buffer;
    signData: Buffer;
    derivationPath: CryptoKeypath;
    address?: Buffer;
    origin?: string;
    signType: SignType;
};
export declare class SolSignRequest extends RegistryItem {
    private requestId?;
    private signData;
    private derivationPath;
    private address?;
    private origin?;
    private signType;
    getRegistryType: () => import("@keystonehq/bc-ur-registry").RegistryType;
    constructor(args: signRequestProps);
    getRequestId: () => Buffer | undefined;
    getSignData: () => Buffer;
    getDerivationPath: () => string | undefined;
    getSignRequestAddress: () => Buffer | undefined;
    getOrigin: () => string | undefined;
    getSignType: () => SignType;
    toDataItem: () => DataItem;
    static fromDataItem: (dataItem: DataItem) => SolSignRequest;
    static fromCBOR: (_cborPayload: Buffer) => SolSignRequest;
    static constructSOLRequest(signData: Buffer, hdPath: string, xfp: string, signType: SignType, uuidString?: string, address?: string, origin?: string): SolSignRequest;
}
export {};
