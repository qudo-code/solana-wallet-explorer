{"version":3,"file":"bc-ur-registry-sol.cjs.development.js","sources":["../src/RegistryType.ts","../src/SolSignRequest.ts","../src/SolSignature.ts","../src/SOLNFTItem.ts","../src/index.ts"],"sourcesContent":["import { RegistryType } from \"@keystonehq/bc-ur-registry\";\n\nexport const ExtendedRegistryTypes = {\n  SOL_SIGN_REQUEST: new RegistryType(\"sol-sign-request\", 1101),\n  SOL_SIGNATURE: new RegistryType(\"sol-signature\", 1102),\n  SOL_NFT_ITEM: new RegistryType(\"sol-nft-item\", 1104),\n};\n","import {\n  CryptoKeypath,\n  extend,\n  DataItem,\n  PathComponent,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nimport * as uuid from \"uuid\";\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nexport enum SignType {\n  Transaction = 1,\n  Message = 2,\n}\n\nenum Keys {\n  requestId = 1,\n  signData,\n  derivationPath,\n  address,\n  origin,\n  signType ,\n}\n\ntype signRequestProps = {\n  requestId?: Buffer;\n  signData: Buffer;\n  derivationPath: CryptoKeypath;\n  address?: Buffer;\n  origin?: string;\n  signType: SignType;\n};\n\nexport class SolSignRequest extends RegistryItem {\n  private requestId?: Buffer;\n  private signData: Buffer;\n  private derivationPath: CryptoKeypath;\n  private address?: Buffer;\n  private origin?: string;\n  private signType: SignType;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGN_REQUEST;\n\n  constructor(args: signRequestProps) {\n    super();\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n    this.signType = args.signType;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignData = () => this.signData;\n  public getDerivationPath = () => this.derivationPath.getPath();\n  public getSignRequestAddress = () => this.address;\n  public getOrigin = () => this.origin;\n  public getSignType = () => this.signType;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    if (this.address) {\n      map[Keys.address] = this.address;\n    }\n\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n\n    map[Keys.signData] = this.signData;\n    map[Keys.signType] = this.signType;\n\n    const keyPath = this.derivationPath.toDataItem();\n    keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n    map[Keys.derivationPath] = keyPath;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signData = map[Keys.signData];\n    const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n    const address = map[Keys.address] ? map[Keys.address] : undefined;\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n    const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n    const signType = map[Keys.signType];\n\n    return new SolSignRequest({\n      requestId,\n      signData,\n      derivationPath,\n      address,\n      origin,\n      signType\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignRequest.fromDataItem(dataItem);\n  };\n\n  public static constructSOLRequest(\n    signData: Buffer,\n    hdPath: string,\n    xfp: string,\n    signType: SignType,\n    uuidString?: string,\n    address?: string,\n    origin?: string\n  ) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new CryptoKeypath(\n      paths.map((path) => {\n        const index = parseInt(path.replace(\"'\", \"\"));\n        let isHardened = false;\n        if (path.endsWith(\"'\")) {\n          isHardened = true;\n        }\n        return new PathComponent({ index, hardened: isHardened });\n      }),\n      Buffer.from(xfp, \"hex\")\n    );\n\n    return new SolSignRequest({\n      requestId: uuidString\n        ? Buffer.from(uuid.parse(uuidString) as Uint8Array)\n        : undefined,\n      signData,\n      derivationPath: hdpathObject,\n      address: address\n        ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\")\n        : undefined,\n      origin: origin || undefined,\n      signType,\n    });\n  }\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n  requestId = 1,\n  signature,\n}\n\nexport class SolSignature extends RegistryItem {\n  private requestId?: Buffer;\n  private signature: Buffer;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGNATURE;\n\n  constructor(signature: Buffer, requestId?: Buffer) {\n    super();\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignature = () => this.signature;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    map[Keys.signature] = this.signature;\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signature = map[Keys.signature];\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n\n    return new SolSignature(signature, requestId);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignature.fromDataItem(dataItem);\n  };\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { decodeToDataItem } = extend;\n\nenum Keys {\n  mintAddress = 1,\n  collectionName,\n  name,\n  mediaData,\n}\n\ntype NFTProps = {\n  mintAddress: string;\n  collectionName: string;\n  name: string;\n  mediaData: string;\n};\n\nexport class SOLNFTItem extends RegistryItem {\n  private name: string;\n  private mintAddress: string;\n  private collectionName: string;\n  private mediaData: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_NFT_ITEM;\n\n  constructor(args: NFTProps) {\n    super();\n    this.name = args.name;\n    this.mintAddress = args.mintAddress;\n    this.collectionName = args.collectionName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  public getName = () => this.name;\n  public getMediaData = () => this.mediaData;\n  public getMintAddress = () => this.mintAddress;\n  public getCollectionName = () => this.collectionName;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.name] = this.name;\n    map[Keys.mintAddress] = this.mintAddress;\n    map[Keys.collectionName] = this.collectionName;\n    map[Keys.mediaData] = this.mediaData;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const name = map[Keys.name];\n    const mediaData = map[Keys.mediaData];\n    const mintAddress = map[Keys.mintAddress];\n    const collectionName = map[Keys.collectionName];\n\n    return new SOLNFTItem({\n      name,\n      mintAddress,\n      collectionName,\n      mediaData,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SOLNFTItem.fromDataItem(dataItem);\n  };\n\n  public static constructETHNFTItem(\n    mintAddress: string,\n    collectionName: string,\n    name: string,\n    mediaData: string\n  ) {\n    return new SOLNFTItem({\n      mintAddress,\n      collectionName,\n      mediaData,\n      name,\n    });\n  }\n}\n","import { patchTags } from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nexport * from \"@keystonehq/bc-ur-registry\";\n\npatchTags(\n  Object.values(ExtendedRegistryTypes)\n    .filter((rt) => !!rt.getTag())\n    .map((rt) => rt.getTag()) as number[]\n);\n\nexport { SolSignRequest, SignType } from \"./SolSignRequest\";\nexport { SolSignature } from \"./SolSignature\";\nexport { SOLNFTItem } from \"./SOLNFTItem\";\n"],"names":["ExtendedRegistryTypes","SOL_SIGN_REQUEST","RegistryType","SOL_SIGNATURE","SOL_NFT_ITEM","decodeToDataItem","RegistryTypes","extend","SignType","Keys","SolSignRequest","RegistryItem","constructor","args","requestId","signData","derivationPath","getPath","address","origin","signType","map","DataItem","UUID","getTag","keyPath","toDataItem","setTag","getRegistryType","constructSOLRequest","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","undefined","dataItem","getData","fromDataItem","_cborPayload","SolSignature","signature","SOLNFTItem","name","mediaData","mintAddress","collectionName","constructETHNFTItem","patchTags","Object","values","filter","rt"],"mappings":";;;;;;;AAEO,MAAMA,qBAAqB,GAAG;AACnCC,EAAAA,gBAAgB,eAAE,IAAIC,yBAAJ,CAAiB,kBAAjB,EAAqC,IAArC,CADiB;AAEnCC,EAAAA,aAAa,eAAE,IAAID,yBAAJ,CAAiB,eAAjB,EAAkC,IAAlC,CAFoB;AAGnCE,EAAAA,YAAY,eAAE,IAAIF,yBAAJ,CAAiB,cAAjB,EAAiC,IAAjC;AAHqB,CAA9B;;ACSP,MAAM;AAAEG,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAAsCC,mBAA5C;AAEA;AAAA,WAAYC;AACVA,EAAAA,qCAAA,gBAAA;AACAA,EAAAA,iCAAA,YAAA;AACD,CAHD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAKA,IAAKC,IAAL;;AAAA,WAAKA;AACHA,EAAAA,2BAAA,cAAA;AACAA,EAAAA,0BAAA,aAAA;AACAA,EAAAA,gCAAA,mBAAA;AACAA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,0BAAA,aAAA;AACD,CAPD,EAAKA,IAAI,KAAJA,IAAI,KAAA,CAAT;;AAkBA,MAAaC,uBAAuBC;AAUlCC,EAAAA,YAAYC;AACV;;AAHF,wBAAA,GAAkB,MAAMb,qBAAqB,CAACC,gBAA9C;;AAYO,qBAAA,GAAe,MAAM,KAAKa,SAA1B;;AACA,oBAAA,GAAc,MAAM,KAAKC,QAAzB;;AACA,0BAAA,GAAoB,MAAM,KAAKC,cAAL,CAAoBC,OAApB,EAA1B;;AACA,8BAAA,GAAwB,MAAM,KAAKC,OAAnC;;AACA,kBAAA,GAAY,MAAM,KAAKC,MAAvB;;AACA,oBAAA,GAAc,MAAM,KAAKC,QAAzB;;AAEA,mBAAA,GAAa;AAClB,YAAMC,GAAG,GAAgB,EAAzB;;AACA,UAAI,KAAKP,SAAT,EAAoB;AAClBO,QAAAA,GAAG,CAACZ,IAAI,CAACK,SAAN,CAAH,GAAsB,IAAIQ,qBAAJ,CACpB,KAAKR,SADe,EAEpBR,aAAa,CAACiB,IAAd,CAAmBC,MAAnB,EAFoB,CAAtB;AAID;;AACD,UAAI,KAAKN,OAAT,EAAkB;AAChBG,QAAAA,GAAG,CAACZ,IAAI,CAACS,OAAN,CAAH,GAAoB,KAAKA,OAAzB;AACD;;AAED,UAAI,KAAKC,MAAT,EAAiB;AACfE,QAAAA,GAAG,CAACZ,IAAI,CAACU,MAAN,CAAH,GAAmB,KAAKA,MAAxB;AACD;;AAEDE,MAAAA,GAAG,CAACZ,IAAI,CAACM,QAAN,CAAH,GAAqB,KAAKA,QAA1B;AACAM,MAAAA,GAAG,CAACZ,IAAI,CAACW,QAAN,CAAH,GAAqB,KAAKA,QAA1B;AAEA,YAAMK,OAAO,GAAG,KAAKT,cAAL,CAAoBU,UAApB,EAAhB;AACAD,MAAAA,OAAO,CAACE,MAAR,CAAe,KAAKX,cAAL,CAAoBY,eAApB,GAAsCJ,MAAtC,EAAf;AACAH,MAAAA,GAAG,CAACZ,IAAI,CAACO,cAAN,CAAH,GAA2BS,OAA3B;AAEA,aAAO,IAAIH,qBAAJ,CAAaD,GAAb,CAAP;AACD,KAxBM;;AAfL,SAAKP,SAAL,GAAiBD,IAAI,CAACC,SAAtB;AACA,SAAKC,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACA,SAAKC,cAAL,GAAsBH,IAAI,CAACG,cAA3B;AACA,SAAKE,OAAL,GAAeL,IAAI,CAACK,OAApB;AACA,SAAKC,MAAL,GAAcN,IAAI,CAACM,MAAnB;AACA,SAAKC,QAAL,GAAgBP,IAAI,CAACO,QAArB;AACD;;AA6DgC,SAAnBS,mBAAmB,CAC/Bd,QAD+B,EAE/Be,MAF+B,EAG/BC,GAH+B,EAI/BX,QAJ+B,EAK/BY,UAL+B,EAM/Bd,OAN+B,EAO/BC,MAP+B;AAS/B,UAAMc,KAAK,GAAGH,MAAM,CAACI,OAAP,CAAe,SAAf,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,GAApC,CAAd;AACA,UAAMC,YAAY,GAAG,IAAIC,0BAAJ,CACnBJ,KAAK,CAACZ,GAAN,CAAWiB,IAAD;AACR,YAAMC,KAAK,GAAGC,QAAQ,CAACF,IAAI,CAACJ,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAD,CAAtB;AACA,UAAIO,UAAU,GAAG,KAAjB;;AACA,UAAIH,IAAI,CAACI,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtBD,QAAAA,UAAU,GAAG,IAAb;AACD;;AACD,aAAO,IAAIE,0BAAJ,CAAkB;AAAEJ,QAAAA,KAAF;AAASK,QAAAA,QAAQ,EAAEH;AAAnB,OAAlB,CAAP;AACD,KAPD,CADmB,EASnBI,MAAM,CAACC,IAAP,CAAYf,GAAZ,EAAiB,KAAjB,CATmB,CAArB;AAYA,WAAO,IAAIrB,cAAJ,CAAmB;AACxBI,MAAAA,SAAS,EAAEkB,UAAU,GACjBa,MAAM,CAACC,IAAP,CAAYC,UAAA,CAAWf,UAAX,CAAZ,CADiB,GAEjBgB,SAHoB;AAIxBjC,MAAAA,QAJwB;AAKxBC,MAAAA,cAAc,EAAEoB,YALQ;AAMxBlB,MAAAA,OAAO,EAAEA,OAAO,GACZ2B,MAAM,CAACC,IAAP,CAAY5B,OAAO,CAACgB,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAZ,EAAuC,KAAvC,CADY,GAEZc,SARoB;AASxB7B,MAAAA,MAAM,EAAEA,MAAM,IAAI6B,SATM;AAUxB5B,MAAAA;AAVwB,KAAnB,CAAP;AAYD;;;;AA5DaV,2BAAA,GAAgBuC,QAAD;AAC3B,QAAM5B,GAAG,GAAG4B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMnC,QAAQ,GAAGM,GAAG,CAACZ,IAAI,CAACM,QAAN,CAApB;AACA,QAAMC,cAAc,GAAGqB,0BAAa,CAACc,YAAd,CAA2B9B,GAAG,CAACZ,IAAI,CAACO,cAAN,CAA9B,CAAvB;AACA,QAAME,OAAO,GAAGG,GAAG,CAACZ,IAAI,CAACS,OAAN,CAAH,GAAoBG,GAAG,CAACZ,IAAI,CAACS,OAAN,CAAvB,GAAwC8B,SAAxD;AACA,QAAMlC,SAAS,GAAGO,GAAG,CAACZ,IAAI,CAACK,SAAN,CAAH,GACdO,GAAG,CAACZ,IAAI,CAACK,SAAN,CAAH,CAAoBoC,OAApB,EADc,GAEdF,SAFJ;AAGA,QAAM7B,MAAM,GAAGE,GAAG,CAACZ,IAAI,CAACU,MAAN,CAAH,GAAmBE,GAAG,CAACZ,IAAI,CAACU,MAAN,CAAtB,GAAsC6B,SAArD;AACA,QAAM5B,QAAQ,GAAGC,GAAG,CAACZ,IAAI,CAACW,QAAN,CAApB;AAEA,SAAO,IAAIV,cAAJ,CAAmB;AACxBI,IAAAA,SADwB;AAExBC,IAAAA,QAFwB;AAGxBC,IAAAA,cAHwB;AAIxBE,IAAAA,OAJwB;AAKxBC,IAAAA,MALwB;AAMxBC,IAAAA;AANwB,GAAnB,CAAP;AAQD,CAnBa;;AAqBAV,uBAAA,GAAY0C,YAAD;AACvB,QAAMH,QAAQ,GAAG5C,gBAAgB,CAAC+C,YAAD,CAAjC;AACA,SAAO1C,cAAc,CAACyC,YAAf,CAA4BF,QAA5B,CAAP;AACD,CAHa;;ACtGhB,MAAM;AAAE3C,iBAAAA,eAAF;AAAiBD,oBAAAA;AAAjB,IAAsCE,mBAA5C;AAEA,IAAKE,MAAL;;AAAA,WAAKA;AACHA,EAAAA,2BAAA,cAAA;AACAA,EAAAA,2BAAA,cAAA;AACD,CAHD,EAAKA,MAAI,KAAJA,MAAI,KAAA,CAAT;;AAKA,MAAa4C,qBAAqB1C;AAMhCC,EAAAA,YAAY0C,WAAmBxC;AAC7B;;AAHF,wBAAA,GAAkB,MAAMd,qBAAqB,CAACG,aAA9C;;AAQO,qBAAA,GAAe,MAAM,KAAKW,SAA1B;;AACA,qBAAA,GAAe,MAAM,KAAKwC,SAA1B;;AAEA,mBAAA,GAAa;AAClB,YAAMjC,GAAG,GAAgB,EAAzB;;AACA,UAAI,KAAKP,SAAT,EAAoB;AAClBO,QAAAA,GAAG,CAACZ,MAAI,CAACK,SAAN,CAAH,GAAsB,IAAIQ,qBAAJ,CACpB,KAAKR,SADe,EAEpBR,eAAa,CAACiB,IAAd,CAAmBC,MAAnB,EAFoB,CAAtB;AAID;;AACDH,MAAAA,GAAG,CAACZ,MAAI,CAAC6C,SAAN,CAAH,GAAsB,KAAKA,SAA3B;AACA,aAAO,IAAIhC,qBAAJ,CAAaD,GAAb,CAAP;AACD,KAVM;;AAPL,SAAKiC,SAAL,GAAiBA,SAAjB;AACA,SAAKxC,SAAL,GAAiBA,SAAjB;AACD;;;;AAiBauC,yBAAA,GAAgBJ,QAAD;AAC3B,QAAM5B,GAAG,GAAG4B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMI,SAAS,GAAGjC,GAAG,CAACZ,MAAI,CAAC6C,SAAN,CAArB;AACA,QAAMxC,SAAS,GAAGO,GAAG,CAACZ,MAAI,CAACK,SAAN,CAAH,GACdO,GAAG,CAACZ,MAAI,CAACK,SAAN,CAAH,CAAoBoC,OAApB,EADc,GAEdF,SAFJ;AAIA,SAAO,IAAIK,YAAJ,CAAiBC,SAAjB,EAA4BxC,SAA5B,CAAP;AACD,CARa;;AAUAuC,qBAAA,GAAYD,YAAD;AACvB,QAAMH,QAAQ,GAAG5C,kBAAgB,CAAC+C,YAAD,CAAjC;AACA,SAAOC,YAAY,CAACF,YAAb,CAA0BF,QAA1B,CAAP;AACD,CAHa;;AC5ChB,MAAM;AAAE5C,oBAAAA;AAAF,IAAuBE,mBAA7B;AAEA,IAAKE,MAAL;;AAAA,WAAKA;AACHA,EAAAA,6BAAA,gBAAA;AACAA,EAAAA,gCAAA,mBAAA;AACAA,EAAAA,sBAAA,SAAA;AACAA,EAAAA,2BAAA,cAAA;AACD,CALD,EAAKA,MAAI,KAAJA,MAAI,KAAA,CAAT;;AAcA,MAAa8C,mBAAmB5C;AAQ9BC,EAAAA,YAAYC;AACV;;AAHF,wBAAA,GAAkB,MAAMb,qBAAqB,CAACI,YAA9C;;AAUO,gBAAA,GAAU,MAAM,KAAKoD,IAArB;;AACA,qBAAA,GAAe,MAAM,KAAKC,SAA1B;;AACA,uBAAA,GAAiB,MAAM,KAAKC,WAA5B;;AACA,0BAAA,GAAoB,MAAM,KAAKC,cAA/B;;AAEA,mBAAA,GAAa;AAClB,YAAMtC,GAAG,GAAgB,EAAzB;AACAA,MAAAA,GAAG,CAACZ,MAAI,CAAC+C,IAAN,CAAH,GAAiB,KAAKA,IAAtB;AACAnC,MAAAA,GAAG,CAACZ,MAAI,CAACiD,WAAN,CAAH,GAAwB,KAAKA,WAA7B;AACArC,MAAAA,GAAG,CAACZ,MAAI,CAACkD,cAAN,CAAH,GAA2B,KAAKA,cAAhC;AACAtC,MAAAA,GAAG,CAACZ,MAAI,CAACgD,SAAN,CAAH,GAAsB,KAAKA,SAA3B;AAEA,aAAO,IAAInC,qBAAJ,CAAaD,GAAb,CAAP;AACD,KARM;;AAXL,SAAKmC,IAAL,GAAY3C,IAAI,CAAC2C,IAAjB;AACA,SAAKE,WAAL,GAAmB7C,IAAI,CAAC6C,WAAxB;AACA,SAAKC,cAAL,GAAsB9C,IAAI,CAAC8C,cAA3B;AACA,SAAKF,SAAL,GAAiB5C,IAAI,CAAC4C,SAAtB;AACD;;AAqCgC,SAAnBG,mBAAmB,CAC/BF,WAD+B,EAE/BC,cAF+B,EAG/BH,IAH+B,EAI/BC,SAJ+B;AAM/B,WAAO,IAAIF,UAAJ,CAAe;AACpBG,MAAAA,WADoB;AAEpBC,MAAAA,cAFoB;AAGpBF,MAAAA,SAHoB;AAIpBD,MAAAA;AAJoB,KAAf,CAAP;AAMD;;;;AAhCaD,uBAAA,GAAgBN,QAAD;AAC3B,QAAM5B,GAAG,GAAG4B,QAAQ,CAACC,OAAT,EAAZ;AACA,QAAMM,IAAI,GAAGnC,GAAG,CAACZ,MAAI,CAAC+C,IAAN,CAAhB;AACA,QAAMC,SAAS,GAAGpC,GAAG,CAACZ,MAAI,CAACgD,SAAN,CAArB;AACA,QAAMC,WAAW,GAAGrC,GAAG,CAACZ,MAAI,CAACiD,WAAN,CAAvB;AACA,QAAMC,cAAc,GAAGtC,GAAG,CAACZ,MAAI,CAACkD,cAAN,CAA1B;AAEA,SAAO,IAAIJ,UAAJ,CAAe;AACpBC,IAAAA,IADoB;AAEpBE,IAAAA,WAFoB;AAGpBC,IAAAA,cAHoB;AAIpBF,IAAAA;AAJoB,GAAf,CAAP;AAMD,CAba;;AAeAF,mBAAA,GAAYH,YAAD;AACvB,QAAMH,QAAQ,GAAG5C,kBAAgB,CAAC+C,YAAD,CAAjC;AACA,SAAOG,UAAU,CAACJ,YAAX,CAAwBF,QAAxB,CAAP;AACD,CAHa;;AClEhBY,sBAAS,CACPC,MAAM,CAACC,MAAP,CAAc/D,qBAAd,EACGgE,MADH,CACWC,EAAD,IAAQ,CAAC,CAACA,EAAE,CAACzC,MAAH,EADpB,EAEGH,GAFH,CAEQ4C,EAAD,IAAQA,EAAE,CAACzC,MAAH,EAFf,CADO,CAAT;;;;;;;;;;;;;;"}