{"version":3,"file":"bc-ur-registry-sol.cjs.production.min.js","sources":["../src/RegistryType.ts","../src/SolSignRequest.ts","../src/SolSignature.ts","../src/SOLNFTItem.ts","../src/index.ts"],"sourcesContent":["import { RegistryType } from \"@keystonehq/bc-ur-registry\";\n\nexport const ExtendedRegistryTypes = {\n  SOL_SIGN_REQUEST: new RegistryType(\"sol-sign-request\", 1101),\n  SOL_SIGNATURE: new RegistryType(\"sol-signature\", 1102),\n  SOL_NFT_ITEM: new RegistryType(\"sol-nft-item\", 1104),\n};\n","import {\n  CryptoKeypath,\n  extend,\n  DataItem,\n  PathComponent,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nimport * as uuid from \"uuid\";\n\nconst { decodeToDataItem, RegistryTypes } = extend;\n\nexport enum SignType {\n  Transaction = 1,\n  Message = 2,\n}\n\nenum Keys {\n  requestId = 1,\n  signData,\n  derivationPath,\n  address,\n  origin,\n  signType ,\n}\n\ntype signRequestProps = {\n  requestId?: Buffer;\n  signData: Buffer;\n  derivationPath: CryptoKeypath;\n  address?: Buffer;\n  origin?: string;\n  signType: SignType;\n};\n\nexport class SolSignRequest extends RegistryItem {\n  private requestId?: Buffer;\n  private signData: Buffer;\n  private derivationPath: CryptoKeypath;\n  private address?: Buffer;\n  private origin?: string;\n  private signType: SignType;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGN_REQUEST;\n\n  constructor(args: signRequestProps) {\n    super();\n    this.requestId = args.requestId;\n    this.signData = args.signData;\n    this.derivationPath = args.derivationPath;\n    this.address = args.address;\n    this.origin = args.origin;\n    this.signType = args.signType;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignData = () => this.signData;\n  public getDerivationPath = () => this.derivationPath.getPath();\n  public getSignRequestAddress = () => this.address;\n  public getOrigin = () => this.origin;\n  public getSignType = () => this.signType;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    if (this.address) {\n      map[Keys.address] = this.address;\n    }\n\n    if (this.origin) {\n      map[Keys.origin] = this.origin;\n    }\n\n    map[Keys.signData] = this.signData;\n    map[Keys.signType] = this.signType;\n\n    const keyPath = this.derivationPath.toDataItem();\n    keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n    map[Keys.derivationPath] = keyPath;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signData = map[Keys.signData];\n    const derivationPath = CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n    const address = map[Keys.address] ? map[Keys.address] : undefined;\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n    const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n    const signType = map[Keys.signType];\n\n    return new SolSignRequest({\n      requestId,\n      signData,\n      derivationPath,\n      address,\n      origin,\n      signType\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignRequest.fromDataItem(dataItem);\n  };\n\n  public static constructSOLRequest(\n    signData: Buffer,\n    hdPath: string,\n    xfp: string,\n    signType: SignType,\n    uuidString?: string,\n    address?: string,\n    origin?: string\n  ) {\n    const paths = hdPath.replace(/[m|M]\\//, \"\").split(\"/\");\n    const hdpathObject = new CryptoKeypath(\n      paths.map((path) => {\n        const index = parseInt(path.replace(\"'\", \"\"));\n        let isHardened = false;\n        if (path.endsWith(\"'\")) {\n          isHardened = true;\n        }\n        return new PathComponent({ index, hardened: isHardened });\n      }),\n      Buffer.from(xfp, \"hex\")\n    );\n\n    return new SolSignRequest({\n      requestId: uuidString\n        ? Buffer.from(uuid.parse(uuidString) as Uint8Array)\n        : undefined,\n      signData,\n      derivationPath: hdpathObject,\n      address: address\n        ? Buffer.from(address.replace(\"0x\", \"\"), \"hex\")\n        : undefined,\n      origin: origin || undefined,\n      signType,\n    });\n  }\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { RegistryTypes, decodeToDataItem } = extend;\n\nenum Keys {\n  requestId = 1,\n  signature,\n}\n\nexport class SolSignature extends RegistryItem {\n  private requestId?: Buffer;\n  private signature: Buffer;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_SIGNATURE;\n\n  constructor(signature: Buffer, requestId?: Buffer) {\n    super();\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n  public getRequestId = () => this.requestId;\n  public getSignature = () => this.signature;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    if (this.requestId) {\n      map[Keys.requestId] = new DataItem(\n        this.requestId,\n        RegistryTypes.UUID.getTag()\n      );\n    }\n    map[Keys.signature] = this.signature;\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const signature = map[Keys.signature];\n    const requestId = map[Keys.requestId]\n      ? map[Keys.requestId].getData()\n      : undefined;\n\n    return new SolSignature(signature, requestId);\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SolSignature.fromDataItem(dataItem);\n  };\n}\n","import {\n  extend,\n  DataItem,\n  RegistryItem,\n  DataItemMap,\n} from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\n\nconst { decodeToDataItem } = extend;\n\nenum Keys {\n  mintAddress = 1,\n  collectionName,\n  name,\n  mediaData,\n}\n\ntype NFTProps = {\n  mintAddress: string;\n  collectionName: string;\n  name: string;\n  mediaData: string;\n};\n\nexport class SOLNFTItem extends RegistryItem {\n  private name: string;\n  private mintAddress: string;\n  private collectionName: string;\n  private mediaData: string;\n\n  getRegistryType = () => ExtendedRegistryTypes.SOL_NFT_ITEM;\n\n  constructor(args: NFTProps) {\n    super();\n    this.name = args.name;\n    this.mintAddress = args.mintAddress;\n    this.collectionName = args.collectionName;\n    this.mediaData = args.mediaData; // remove the data perfix for android usage\n  }\n\n  public getName = () => this.name;\n  public getMediaData = () => this.mediaData;\n  public getMintAddress = () => this.mintAddress;\n  public getCollectionName = () => this.collectionName;\n\n  public toDataItem = () => {\n    const map: DataItemMap = {};\n    map[Keys.name] = this.name;\n    map[Keys.mintAddress] = this.mintAddress;\n    map[Keys.collectionName] = this.collectionName;\n    map[Keys.mediaData] = this.mediaData;\n\n    return new DataItem(map);\n  };\n\n  public static fromDataItem = (dataItem: DataItem) => {\n    const map = dataItem.getData();\n    const name = map[Keys.name];\n    const mediaData = map[Keys.mediaData];\n    const mintAddress = map[Keys.mintAddress];\n    const collectionName = map[Keys.collectionName];\n\n    return new SOLNFTItem({\n      name,\n      mintAddress,\n      collectionName,\n      mediaData,\n    });\n  };\n\n  public static fromCBOR = (_cborPayload: Buffer) => {\n    const dataItem = decodeToDataItem(_cborPayload);\n    return SOLNFTItem.fromDataItem(dataItem);\n  };\n\n  public static constructETHNFTItem(\n    mintAddress: string,\n    collectionName: string,\n    name: string,\n    mediaData: string\n  ) {\n    return new SOLNFTItem({\n      mintAddress,\n      collectionName,\n      mediaData,\n      name,\n    });\n  }\n}\n","import { patchTags } from \"@keystonehq/bc-ur-registry\";\nimport { ExtendedRegistryTypes } from \"./RegistryType\";\nexport * from \"@keystonehq/bc-ur-registry\";\n\npatchTags(\n  Object.values(ExtendedRegistryTypes)\n    .filter((rt) => !!rt.getTag())\n    .map((rt) => rt.getTag()) as number[]\n);\n\nexport { SolSignRequest, SignType } from \"./SolSignRequest\";\nexport { SolSignature } from \"./SolSignature\";\nexport { SOLNFTItem } from \"./SOLNFTItem\";\n"],"names":["ExtendedRegistryTypes","SOL_SIGN_REQUEST","RegistryType","SOL_SIGNATURE","SOL_NFT_ITEM","decodeToDataItem","RegistryTypes","extend","SignType","Keys","SolSignRequest","RegistryItem","constructor","args","this","requestId","signData","derivationPath","getPath","address","origin","signType","map","DataItem","UUID","getTag","keyPath","toDataItem","setTag","getRegistryType","hdPath","xfp","uuidString","paths","replace","split","hdpathObject","CryptoKeypath","path","index","parseInt","isHardened","endsWith","PathComponent","hardened","Buffer","from","uuid","undefined","dataItem","getData","fromDataItem","_cborPayload","SolSignature","signature","SOLNFTItem","name","mediaData","mintAddress","collectionName","patchTags","Object","values","filter","rt"],"mappings":"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"}