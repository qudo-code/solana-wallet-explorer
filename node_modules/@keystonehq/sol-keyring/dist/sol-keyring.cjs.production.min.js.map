{"version":3,"file":"sol-keyring.cjs.production.min.js","sources":["../src/DefaultInteractionProvider.ts","../src/BaseKeyring.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import { SolSignature, SolSignRequest } from \"@keystonehq/bc-ur-registry-sol\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport sdk, { PlayStatus, ReadStatus, SupportedResult } from \"@keystonehq/sdk\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n  private static instance;\n  private keystoneSDK = undefined;\n\n  constructor() {\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk.bootstrap();\n    this.keystoneSDK = sdk.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n  public readCryptoMultiAccounts = async () => {\n    const decodedResult = await this.keystoneSDK.read(\n      [SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],\n      {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Solflare\",\n          link: \"https://keyst.one/defi\",\n        },\n        URTypeErrorMessage:\n          \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\",\n      }\n    );\n    if (decodedResult.status === ReadStatus.success) {\n      const { result } = decodedResult;\n      return CryptoMultiAccounts.fromCBOR(result.cbor);\n    } else {\n      throw new Error(\"Reading canceled\");\n    }\n  };\n\n  public requestSignature = async (\n    solSignRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const status = await this.keystoneSDK.play(solSignRequest.toUR(), {\n      hasNext: true,\n      title: requestTitle,\n      description: requestDescription,\n      maxFragmentLength: 400\n    });\n    if (status === PlayStatus.canceled)\n      throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n    const result = await this.keystoneSDK.read(\n      [SupportedResult.UR_SOL_SIGNATURE],\n      {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n      }\n    );\n    if (result.status === ReadStatus.canceled) {\n      throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n    } else {\n      return SolSignature.fromCBOR(result.result.cbor);\n    }\n  };\n}\n","import bs58 from \"bs58\";\nimport * as uuid from \"uuid\";\nimport { Message, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\nimport { SolSignRequest, SignType } from \"@keystonehq/bc-ur-registry-sol\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\n\nexport interface HDKey {\n  hdPath: string;\n  pubKey: string;\n  index: number;\n}\n\ninterface KeyringInitData {\n  xfp: string;\n  keys: HDKey[];\n  name?: string;\n  device?: string;\n}\n\nexport class BaseKeyring {\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected initialized: boolean;\n  protected keys: HDKey[];\n  protected name: string;\n  protected device: string;\n  constructor() {\n    //common props\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ): Promise<Buffer> => {\n    const solSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = solSignature.getRequestId();\n    const signature = solSignature.getSignature();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    return signature;\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoMultiAccounts): void {\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = data\n      .getKeys()[0]\n      .getOrigin()\n      .getSourceFingerprint()\n      ?.toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: bs58.encode(each.getKey()),\n      index,\n    }));\n    this.initialized = true;\n  }\n\n  public syncKeyringData({xfp, keys, name = \"QR Hardware\", device}: KeyringInitData): void {\n    this.xfp = xfp\n    this.name = name\n    this.keys = keys\n    this.device = device\n    this.initialized = true;\n  }\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  getAccounts() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n\n  async signTransaction(pubKey: string, tx: Transaction): Promise<Transaction> {\n    const signature = await this._getSignature(pubKey, Buffer.from(tx.serializeMessage() as unknown as ArrayBuffer), SignType.Transaction)\n    tx.addSignature(new PublicKey(pubKey), signature);\n    return tx;\n  }\n\n  async signMessage(\n    pubKey: string,\n    messageHex: Uint8Array\n  ): Promise<Uint8Array> {\n    return await this._getSignature(pubKey, Buffer.from(messageHex), SignType.Message)\n  }\n\n  async createSignature(pubKey: string, messageHex: Uint8Array): Promise<Uint8Array>{\n    try{\n      const messageInstance = Message.from(messageHex);\n      const transaction = Transaction.populate(messageInstance, []);\n      if (transaction) {\n        return this._getSignature(pubKey, Buffer.from(messageHex),SignType.Transaction)\n      }\n    }catch(e){\n    }\n    return this.signMessage(pubKey, messageHex)\n  }\n\n  async _getSignature(pubKey: string, messageHex: Buffer, signType): Promise<Buffer>{\n    const requestId = uuid.v4();\n    const account = this.getAccounts().find(\n        (account) => account.pubKey == pubKey\n    );\n    const solSignRequest = SolSignRequest.constructSOLRequest(\n        messageHex,\n        account.hdPath,\n        this.xfp,\n        signType,\n        requestId,\n    );\n    return this.requestSignature(\n        requestId,\n        solSignRequest,\n        \"Scan with your Keystone\",\n        'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n  }\n}\n","import { DefaultInteractionProvider } from \"./DefaultInteractionProvider\";\nimport { BaseKeyring } from \"./BaseKeyring\";\n\nexport class DefaultKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n\n  static getEmptyKeyring(): DefaultKeyring {\n    return new DefaultKeyring();\n  }\n\n  constructor() {\n    super();\n  }\n\n  getInteraction = () => {\n    return new DefaultInteractionProvider();\n  };\n}\n"],"names":["DefaultInteractionProvider","constructor","undefined","async","decodedResult","this","keystoneSDK","read","SupportedResult","UR_CRYPTO_MULTI_ACCOUNTS","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","CryptoMultiAccounts","fromCBOR","cbor","Error","solSignRequest","requestTitle","requestDescription","play","toUR","hasNext","maxFragmentLength","PlayStatus","canceled","UR_SOL_SIGNATURE","SolSignature","instance","sdk","bootstrap","getSdk","BaseKeyring","_requestId","signRequest","solSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","uuid","name","keys","initialized","device","xfp","readCryptoMultiAccounts","syncKeyring","data","getKeys","getDevice","getOrigin","getSourceFingerprint","_data$getKeys$0$getOr","toString","getName","map","each","index","hdPath","getPath","pubKey","bs58","encode","getKey","syncKeyringData","getAccounts","tx","_getSignature","Buffer","from","serializeMessage","SignType","Transaction","addSignature","PublicKey","messageHex","Message","messageInstance","populate","e","signMessage","signType","requestId","account","find","SolSignRequest","constructSOLRequest","DefaultKeyring","type"],"mappings":"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"}