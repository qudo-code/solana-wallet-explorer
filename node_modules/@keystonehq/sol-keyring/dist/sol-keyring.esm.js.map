{"version":3,"file":"sol-keyring.esm.js","sources":["../src/DefaultInteractionProvider.ts","../src/BaseKeyring.ts","../src/DefaultKeyring.ts"],"sourcesContent":["import { SolSignature, SolSignRequest } from \"@keystonehq/bc-ur-registry-sol\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport sdk, { PlayStatus, ReadStatus, SupportedResult } from \"@keystonehq/sdk\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\n\nexport class DefaultInteractionProvider implements InteractionProvider {\n  private static instance;\n  private keystoneSDK = undefined;\n\n  constructor() {\n    if (DefaultInteractionProvider.instance) {\n      return DefaultInteractionProvider.instance;\n    }\n    sdk.bootstrap();\n    this.keystoneSDK = sdk.getSdk();\n    DefaultInteractionProvider.instance = this;\n  }\n\n  public readCryptoMultiAccounts = async () => {\n    const decodedResult = await this.keystoneSDK.read(\n      [SupportedResult.UR_CRYPTO_MULTI_ACCOUNTS],\n      {\n        title: \"Sync Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n        renderInitial: {\n          walletMode: \"Solflare\",\n          link: \"https://keyst.one/defi\",\n        },\n        URTypeErrorMessage:\n          \"The scanned QR code is not the sync code from the Keystone hardware wallet. Please verify the code and try again\",\n      }\n    );\n    if (decodedResult.status === ReadStatus.success) {\n      const { result } = decodedResult;\n      return CryptoMultiAccounts.fromCBOR(result.cbor);\n    } else {\n      throw new Error(\"Reading canceled\");\n    }\n  };\n\n  public requestSignature = async (\n    solSignRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ) => {\n    const status = await this.keystoneSDK.play(solSignRequest.toUR(), {\n      hasNext: true,\n      title: requestTitle,\n      description: requestDescription,\n      maxFragmentLength: 400\n    });\n    if (status === PlayStatus.canceled)\n      throw new Error(\"#ktek_error[play-cancel]: play canceled\");\n    const result = await this.keystoneSDK.read(\n      [SupportedResult.UR_SOL_SIGNATURE],\n      {\n        title: \"Scan Keystone\",\n        description: \"Please scan the QR code displayed on your Keystone\",\n      }\n    );\n    if (result.status === ReadStatus.canceled) {\n      throw new Error(\"#ktek_error[read-cancel]: read signature canceled\");\n    } else {\n      return SolSignature.fromCBOR(result.result.cbor);\n    }\n  };\n}\n","import bs58 from \"bs58\";\nimport * as uuid from \"uuid\";\nimport { Message, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { InteractionProvider } from \"./InteractionProvider\";\nimport { CryptoMultiAccounts } from \"@keystonehq/bc-ur-registry\";\nimport { SolSignRequest, SignType } from \"@keystonehq/bc-ur-registry-sol\";\n\nconst keyringType = \"QR Hardware Wallet Device\";\n\nexport interface HDKey {\n  hdPath: string;\n  pubKey: string;\n  index: number;\n}\n\ninterface KeyringInitData {\n  xfp: string;\n  keys: HDKey[];\n  name?: string;\n  device?: string;\n}\n\nexport class BaseKeyring {\n  getInteraction = (): InteractionProvider => {\n    throw new Error(\n      \"KeystoneError#invalid_extends: method getInteraction not implemented, please extend BaseKeyring by overwriting this method.\"\n    );\n  };\n  static type = keyringType;\n  protected xfp: string;\n  protected type = keyringType;\n  protected initialized: boolean;\n  protected keys: HDKey[];\n  protected name: string;\n  protected device: string;\n  constructor() {\n    //common props\n    this.keys = [];\n    this.name = \"QR Hardware\";\n    this.initialized = false;\n    this.device = \"\";\n    this.xfp = \"\";\n  }\n\n  protected requestSignature = async (\n    _requestId: string,\n    signRequest: SolSignRequest,\n    requestTitle?: string,\n    requestDescription?: string\n  ): Promise<Buffer> => {\n    const solSignature = await this.getInteraction().requestSignature(\n      signRequest,\n      requestTitle,\n      requestDescription\n    );\n    const requestIdBuffer = solSignature.getRequestId();\n    const signature = solSignature.getSignature();\n    if (requestIdBuffer) {\n      const requestId = uuid.stringify(requestIdBuffer);\n      if (requestId !== _requestId) {\n        throw new Error(\n          \"KeystoneError#invalid_data: read signature error: mismatched requestId\"\n        );\n      }\n    }\n    return signature;\n  };\n\n  //initial read\n  async readKeyring(): Promise<void> {\n    const result = await this.getInteraction().readCryptoMultiAccounts();\n    this.syncKeyring(result);\n  }\n\n  public syncKeyring(data: CryptoMultiAccounts): void {\n    const keys = data.getKeys();\n    this.device = data.getDevice();\n    this.xfp = data\n      .getKeys()[0]\n      .getOrigin()\n      .getSourceFingerprint()\n      ?.toString(\"hex\");\n    this.name = data.getKeys()[0].getName();\n    this.keys = keys.map((each, index) => ({\n      hdPath: each.getOrigin().getPath(),\n      pubKey: bs58.encode(each.getKey()),\n      index,\n    }));\n    this.initialized = true;\n  }\n\n  public syncKeyringData({xfp, keys, name = \"QR Hardware\", device}: KeyringInitData): void {\n    this.xfp = xfp\n    this.name = name\n    this.keys = keys\n    this.device = device\n    this.initialized = true;\n  }\n\n  public getName = (): string => {\n    return this.name;\n  };\n\n  getAccounts() {\n    if (!this.initialized) {\n      return [];\n    }\n    return this.keys;\n  }\n\n  async signTransaction(pubKey: string, tx: Transaction): Promise<Transaction> {\n    const signature = await this._getSignature(pubKey, Buffer.from(tx.serializeMessage() as unknown as ArrayBuffer), SignType.Transaction)\n    tx.addSignature(new PublicKey(pubKey), signature);\n    return tx;\n  }\n\n  async signMessage(\n    pubKey: string,\n    messageHex: Uint8Array\n  ): Promise<Uint8Array> {\n    return await this._getSignature(pubKey, Buffer.from(messageHex), SignType.Message)\n  }\n\n  async createSignature(pubKey: string, messageHex: Uint8Array): Promise<Uint8Array>{\n    try{\n      const messageInstance = Message.from(messageHex);\n      const transaction = Transaction.populate(messageInstance, []);\n      if (transaction) {\n        return this._getSignature(pubKey, Buffer.from(messageHex),SignType.Transaction)\n      }\n    }catch(e){\n    }\n    return this.signMessage(pubKey, messageHex)\n  }\n\n  async _getSignature(pubKey: string, messageHex: Buffer, signType): Promise<Buffer>{\n    const requestId = uuid.v4();\n    const account = this.getAccounts().find(\n        (account) => account.pubKey == pubKey\n    );\n    const solSignRequest = SolSignRequest.constructSOLRequest(\n        messageHex,\n        account.hdPath,\n        this.xfp,\n        signType,\n        requestId,\n    );\n    return this.requestSignature(\n        requestId,\n        solSignRequest,\n        \"Scan with your Keystone\",\n        'After your Keystone has signed this message, click on \"Scan Keystone\" to receive the signature'\n    );\n  }\n}\n","import { DefaultInteractionProvider } from \"./DefaultInteractionProvider\";\nimport { BaseKeyring } from \"./BaseKeyring\";\n\nexport class DefaultKeyring extends BaseKeyring {\n  static type = BaseKeyring.type;\n\n  static getEmptyKeyring(): DefaultKeyring {\n    return new DefaultKeyring();\n  }\n\n  constructor() {\n    super();\n  }\n\n  getInteraction = () => {\n    return new DefaultInteractionProvider();\n  };\n}\n"],"names":["DefaultInteractionProvider","constructor","undefined","decodedResult","keystoneSDK","read","SupportedResult","UR_CRYPTO_MULTI_ACCOUNTS","title","description","renderInitial","walletMode","link","URTypeErrorMessage","status","ReadStatus","success","result","CryptoMultiAccounts","fromCBOR","cbor","Error","solSignRequest","requestTitle","requestDescription","play","toUR","hasNext","maxFragmentLength","PlayStatus","canceled","UR_SOL_SIGNATURE","SolSignature","instance","sdk","bootstrap","getSdk","keyringType","BaseKeyring","_requestId","signRequest","solSignature","getInteraction","requestSignature","requestIdBuffer","getRequestId","signature","getSignature","requestId","uuid","name","keys","initialized","device","xfp","readKeyring","readCryptoMultiAccounts","syncKeyring","data","getKeys","getDevice","getOrigin","getSourceFingerprint","toString","getName","map","each","index","hdPath","getPath","pubKey","bs58","encode","getKey","syncKeyringData","getAccounts","signTransaction","tx","_getSignature","Buffer","from","serializeMessage","SignType","Transaction","addSignature","PublicKey","signMessage","messageHex","Message","createSignature","messageInstance","transaction","populate","e","signType","account","find","SolSignRequest","constructSOLRequest","DefaultKeyring","getEmptyKeyring","type"],"mappings":"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"}