{"version":3,"file":"AuctionHouse.cjs","sources":["../../../../src/plugins/auctionHouseModule/AuctionHouse.ts"],"sourcesContent":["import { AuthorityScope } from '@metaplex-foundation/mpl-auction-house';\nimport type { PublicKey } from '@solana/web3.js';\nimport { Pda } from '@/types';\nimport { AuctioneerAccount, AuctionHouseAccount } from './accounts';\nimport { assert } from '@/utils';\nimport { Mint } from '../tokenModule';\n\nexport type AuctionHouse = Readonly<\n  {\n    model: 'auctionHouse';\n    address: Pda;\n    creatorAddress: PublicKey;\n    authorityAddress: PublicKey;\n    treasuryMint: Mint;\n    feeAccountAddress: Pda;\n    treasuryAccountAddress: Pda;\n    feeWithdrawalDestinationAddress: PublicKey;\n    treasuryWithdrawalDestinationAddress: PublicKey;\n    sellerFeeBasisPoints: number;\n    requiresSignOff: boolean;\n    canChangeSalePrice: boolean;\n    isNative: boolean;\n  } & (\n    | { hasAuctioneer: false }\n    | {\n        hasAuctioneer: true;\n        auctioneer: {\n          address: PublicKey;\n          authority: PublicKey;\n          scopes: AuthorityScope[];\n        };\n      }\n  )\n>;\n\nexport const isAuctionHouse = (value: any): value is AuctionHouse =>\n  typeof value === 'object' && value.model === 'auctionHouse';\n\nexport function assertAuctionHouse(value: any): asserts value is AuctionHouse {\n  assert(isAuctionHouse(value), `Expected AuctionHouse type`);\n}\n\nexport type AuctioneerAuctionHouse = AuctionHouse & {\n  hasAuctioneer: true;\n};\n\nexport const isAuctioneerAuctionHouse = (\n  value: any\n): value is AuctioneerAuctionHouse =>\n  isAuctionHouse(value) && value.hasAuctioneer;\n\nexport function assertAuctioneerAuctionHouse(\n  value: any\n): asserts value is AuctioneerAuctionHouse {\n  assert(\n    isAuctioneerAuctionHouse(value),\n    `Expected AuctioneerAuctionHouse type`\n  );\n}\n\nexport const toAuctionHouse = (\n  auctionHouseAccount: AuctionHouseAccount,\n  treasuryMint: Mint,\n  auctioneerAccount?: AuctioneerAccount | null\n): AuctionHouse => {\n  if (auctionHouseAccount.data.hasAuctioneer) {\n    assert(\n      !!auctioneerAccount,\n      'Auctioneer account is required when hasAuctioneer is true'\n    );\n    assert(\n      !!auctioneerAccount &&\n        auctioneerAccount.data.auctionHouse.equals(\n          auctionHouseAccount.publicKey\n        ),\n      'Auctioneer account does not match the AuctionHouse account'\n    );\n  }\n\n  return {\n    model: 'auctionHouse',\n    address: new Pda(\n      auctionHouseAccount.publicKey,\n      auctionHouseAccount.data.bump\n    ),\n    creatorAddress: auctionHouseAccount.data.creator,\n    authorityAddress: auctionHouseAccount.data.authority,\n    treasuryMint,\n    feeAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseFeeAccount,\n      auctionHouseAccount.data.feePayerBump\n    ),\n    treasuryAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseTreasury,\n      auctionHouseAccount.data.treasuryBump\n    ),\n    feeWithdrawalDestinationAddress:\n      auctionHouseAccount.data.feeWithdrawalDestination,\n    treasuryWithdrawalDestinationAddress:\n      auctionHouseAccount.data.treasuryWithdrawalDestination,\n    sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouseAccount.data.requiresSignOff,\n    canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,\n    isNative: treasuryMint.isWrappedSol,\n\n    // Auctioneer.\n    ...(auctionHouseAccount.data.hasAuctioneer && auctioneerAccount\n      ? {\n          hasAuctioneer: true,\n          auctioneer: {\n            address: auctioneerAccount.publicKey,\n            authority: auctioneerAccount.data.auctioneerAuthority,\n            scopes: auctioneerAccount.data.scopes.reduce<number[]>(\n              (acc, isAllowed, index) => (isAllowed ? [...acc, index] : acc),\n              [] as number[]\n            ),\n          },\n        }\n      : { hasAuctioneer: false }),\n  };\n};\n"],"names":["isAuctionHouse","value","model","assertAuctionHouse","assert","isAuctioneerAuctionHouse","hasAuctioneer","assertAuctioneerAuctionHouse","toAuctionHouse","auctionHouseAccount","treasuryMint","auctioneerAccount","data","auctionHouse","equals","publicKey","address","Pda","bump","creatorAddress","creator","authorityAddress","authority","feeAccountAddress","auctionHouseFeeAccount","feePayerBump","treasuryAccountAddress","auctionHouseTreasury","treasuryBump","feeWithdrawalDestinationAddress","feeWithdrawalDestination","treasuryWithdrawalDestinationAddress","treasuryWithdrawalDestination","sellerFeeBasisPoints","requiresSignOff","canChangeSalePrice","isNative","isWrappedSol","auctioneer","auctioneerAuthority","scopes","reduce","acc","isAllowed","index"],"mappings":";;;;;;;AAmCaA,MAAAA,cAAc,GAAIC,KAAD,IAC5B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,eADxC;AAGA,SAASC,kBAAT,CAA4BF,KAA5B,EAAuE;AAC5EG,EAAAA,iBAAM,CAACJ,cAAc,CAACC,KAAD,CAAf,EAAyB,4BAAzB,CAAN,CAAA;AACD,CAAA;AAMYI,MAAAA,wBAAwB,GACnCJ,KADsC,IAGtCD,cAAc,CAACC,KAAD,CAAd,IAAyBA,KAAK,CAACK,cAH1B;AAKA,SAASC,4BAAT,CACLN,KADK,EAEoC;AACzCG,EAAAA,iBAAM,CACJC,wBAAwB,CAACJ,KAAD,CADpB,EAEH,sCAFG,CAAN,CAAA;AAID,CAAA;AAEM,MAAMO,cAAc,GAAG,CAC5BC,mBAD4B,EAE5BC,YAF4B,EAG5BC,iBAH4B,KAIX;AACjB,EAAA,IAAIF,mBAAmB,CAACG,IAApB,CAAyBN,aAA7B,EAA4C;AAC1CF,IAAAA,iBAAM,CACJ,CAAC,CAACO,iBADE,EAEJ,2DAFI,CAAN,CAAA;AAIAP,IAAAA,iBAAM,CACJ,CAAC,CAACO,iBAAF,IACEA,iBAAiB,CAACC,IAAlB,CAAuBC,YAAvB,CAAoCC,MAApC,CACEL,mBAAmB,CAACM,SADtB,CAFE,EAKJ,4DALI,CAAN,CAAA;AAOD,GAAA;;EAED,OAAO;AACLb,IAAAA,KAAK,EAAE,cADF;AAELc,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CACPR,mBAAmB,CAACM,SADb,EAEPN,mBAAmB,CAACG,IAApB,CAAyBM,IAFlB,CAFJ;AAMLC,IAAAA,cAAc,EAAEV,mBAAmB,CAACG,IAApB,CAAyBQ,OANpC;AAOLC,IAAAA,gBAAgB,EAAEZ,mBAAmB,CAACG,IAApB,CAAyBU,SAPtC;IAQLZ,YARK;AASLa,IAAAA,iBAAiB,EAAE,IAAIN,OAAJ,CACjBR,mBAAmB,CAACG,IAApB,CAAyBY,sBADR,EAEjBf,mBAAmB,CAACG,IAApB,CAAyBa,YAFR,CATd;AAaLC,IAAAA,sBAAsB,EAAE,IAAIT,OAAJ,CACtBR,mBAAmB,CAACG,IAApB,CAAyBe,oBADH,EAEtBlB,mBAAmB,CAACG,IAApB,CAAyBgB,YAFH,CAbnB;AAiBLC,IAAAA,+BAA+B,EAC7BpB,mBAAmB,CAACG,IAApB,CAAyBkB,wBAlBtB;AAmBLC,IAAAA,oCAAoC,EAClCtB,mBAAmB,CAACG,IAApB,CAAyBoB,6BApBtB;AAqBLC,IAAAA,oBAAoB,EAAExB,mBAAmB,CAACG,IAApB,CAAyBqB,oBArB1C;AAsBLC,IAAAA,eAAe,EAAEzB,mBAAmB,CAACG,IAApB,CAAyBsB,eAtBrC;AAuBLC,IAAAA,kBAAkB,EAAE1B,mBAAmB,CAACG,IAApB,CAAyBuB,kBAvBxC;IAwBLC,QAAQ,EAAE1B,YAAY,CAAC2B,YAxBlB;AA0BL;AACA,IAAA,IAAI5B,mBAAmB,CAACG,IAApB,CAAyBN,aAAzB,IAA0CK,iBAA1C,GACA;AACEL,MAAAA,aAAa,EAAE,IADjB;AAEEgC,MAAAA,UAAU,EAAE;QACVtB,OAAO,EAAEL,iBAAiB,CAACI,SADjB;AAEVO,QAAAA,SAAS,EAAEX,iBAAiB,CAACC,IAAlB,CAAuB2B,mBAFxB;QAGVC,MAAM,EAAE7B,iBAAiB,CAACC,IAAlB,CAAuB4B,MAAvB,CAA8BC,MAA9B,CACN,CAACC,GAAD,EAAMC,SAAN,EAAiBC,KAAjB,KAA4BD,SAAS,GAAG,CAAC,GAAGD,GAAJ,EAASE,KAAT,CAAH,GAAqBF,GADpD,EAEN,EAFM,CAAA;AAHE,OAAA;AAFd,KADA,GAYA;AAAEpC,MAAAA,aAAa,EAAE,KAAA;KAZrB,CAAA;GA3BF,CAAA;AAyCD;;;;;;;;"}