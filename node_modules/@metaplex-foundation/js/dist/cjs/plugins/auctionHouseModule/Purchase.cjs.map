{"version":3,"file":"Purchase.cjs","sources":["../../../../src/plugins/auctionHouseModule/Purchase.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n} from '@/types';\nimport { PurchaseReceiptAccount } from './accounts';\nimport { assert, Option } from '@/utils';\nimport { AuctionHouse } from './AuctionHouse';\nimport { NftWithToken, SftWithToken } from '../nftModule';\n\nexport type Purchase = Readonly<{\n  model: 'purchase';\n  lazy: false;\n\n  // Models.\n  auctionHouse: AuctionHouse;\n  asset: SftWithToken | NftWithToken;\n\n  // Addresses.\n  buyerAddress: PublicKey;\n  sellerAddress: PublicKey;\n  bookkeeperAddress: Option<PublicKey>;\n  receiptAddress: Option<PublicKey>;\n\n  // Data.\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n  createdAt: DateTime;\n}>;\n\nexport const isPurchase = (value: any): value is Purchase =>\n  typeof value === 'object' && value.model === 'purchase' && !value.lazy;\n\nexport function assertPurchase(value: any): asserts value is Purchase {\n  assert(isPurchase(value), `Expected Purchase type`);\n}\n\nexport const toPurchase = (\n  account: PurchaseReceiptAccount,\n  auctionHouseModel: AuctionHouse,\n  asset: NftWithToken | SftWithToken\n): Purchase => {\n  const lazyPurchase = toLazyPurchase(account, auctionHouseModel);\n\n  return {\n    ...lazyPurchase,\n    model: 'purchase',\n    lazy: false,\n    asset,\n    tokens: amount(lazyPurchase.tokens, asset.mint.currency),\n  };\n};\n\nexport type LazyPurchase = Omit<Purchase, 'lazy' | 'asset' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokens: BigNumber;\n  }>;\n\nexport const isLazyPurchase = (value: any): value is LazyPurchase =>\n  typeof value === 'object' && value.model === 'purchase' && value.lazy;\n\nexport function assertLazyPurchase(value: any): asserts value is LazyPurchase {\n  assert(isLazyPurchase(value), `Expected LazyPurchase type`);\n}\nexport const toLazyPurchase = (\n  account: PurchaseReceiptAccount,\n  auctionHouseModel: AuctionHouse\n): LazyPurchase => {\n  return {\n    model: 'purchase',\n    lazy: true,\n    auctionHouse: auctionHouseModel,\n    buyerAddress: account.data.buyer,\n    sellerAddress: account.data.seller,\n    metadataAddress: account.data.metadata,\n    bookkeeperAddress: account.data.bookkeeper,\n    receiptAddress: account.publicKey,\n    price: auctionHouseModel.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouseModel.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n  };\n};\n"],"names":["isPurchase","value","model","lazy","assertPurchase","assert","toPurchase","account","auctionHouseModel","asset","lazyPurchase","toLazyPurchase","tokens","amount","mint","currency","isLazyPurchase","assertLazyPurchase","auctionHouse","buyerAddress","data","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","receiptAddress","publicKey","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime"],"mappings":";;;;;;;;;MAoCaA,UAAU,GAAIC,KAAD,IACxB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,UAA7C,IAA2D,CAACD,KAAK,CAACE,KAD7D;AAGA,SAASC,cAAT,CAAwBH,KAAxB,EAA+D;AACpEI,EAAAA,iBAAM,CAACL,UAAU,CAACC,KAAD,CAAX,EAAqB,wBAArB,CAAN,CAAA;AACD,CAAA;AAEM,MAAMK,UAAU,GAAG,CACxBC,OADwB,EAExBC,iBAFwB,EAGxBC,KAHwB,KAIX;AACb,EAAA,MAAMC,YAAY,GAAGC,cAAc,CAACJ,OAAD,EAAUC,iBAAV,CAAnC,CAAA;EAEA,OAAO,EACL,GAAGE,YADE;AAELR,IAAAA,KAAK,EAAE,UAFF;AAGLC,IAAAA,IAAI,EAAE,KAHD;IAILM,KAJK;IAKLG,MAAM,EAAEC,aAAM,CAACH,YAAY,CAACE,MAAd,EAAsBH,KAAK,CAACK,IAAN,CAAWC,QAAjC,CAAA;GALhB,CAAA;AAOD,EAdM;MAuBMC,cAAc,GAAIf,KAAD,IAC5B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,UAA7C,IAA2DD,KAAK,CAACE,KAD5D;AAGA,SAASc,kBAAT,CAA4BhB,KAA5B,EAAuE;AAC5EI,EAAAA,iBAAM,CAACW,cAAc,CAACf,KAAD,CAAf,EAAyB,4BAAzB,CAAN,CAAA;AACD,CAAA;MACYU,cAAc,GAAG,CAC5BJ,OAD4B,EAE5BC,iBAF4B,KAGX;EACjB,OAAO;AACLN,IAAAA,KAAK,EAAE,UADF;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLe,IAAAA,YAAY,EAAEV,iBAHT;AAILW,IAAAA,YAAY,EAAEZ,OAAO,CAACa,IAAR,CAAaC,KAJtB;AAKLC,IAAAA,aAAa,EAAEf,OAAO,CAACa,IAAR,CAAaG,MALvB;AAMLC,IAAAA,eAAe,EAAEjB,OAAO,CAACa,IAAR,CAAaK,QANzB;AAOLC,IAAAA,iBAAiB,EAAEnB,OAAO,CAACa,IAAR,CAAaO,UAP3B;IAQLC,cAAc,EAAErB,OAAO,CAACsB,SARnB;IASLC,KAAK,EAAEtB,iBAAiB,CAACuB,QAAlB,GACHC,eAAQ,CAACzB,OAAO,CAACa,IAAR,CAAaU,KAAd,CADL,GAEHjB,aAAM,CAACN,OAAO,CAACa,IAAR,CAAaU,KAAd,EAAqBtB,iBAAiB,CAACyB,YAAlB,CAA+BlB,QAApD,CAXL;IAYLH,MAAM,EAAEsB,qBAAW,CAAC3B,OAAO,CAACa,IAAR,CAAae,SAAd,CAZd;AAaLC,IAAAA,SAAS,EAAEC,mBAAU,CAAC9B,OAAO,CAACa,IAAR,CAAagB,SAAd,CAAA;GAbvB,CAAA;AAeD;;;;;;;;;"}