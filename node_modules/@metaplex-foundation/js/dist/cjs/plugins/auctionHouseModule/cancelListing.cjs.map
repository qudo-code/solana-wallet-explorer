{"version":3,"file":"cancelListing.cjs","sources":["../../../../src/plugins/auctionHouseModule/cancelListing.ts"],"sourcesContent":["import { ConfirmOptions, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  CancelInstructionAccounts,\n  createCancelListingReceiptInstruction,\n  createCancelInstruction,\n  createAuctioneerCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  isSigner,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport { Listing } from './Listing';\nimport { AuctioneerAuthorityRequiredError } from './errors';\nimport { findAuctioneerPda } from './pdas';\nimport { AUCTIONEER_PRICE } from './constants';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelListingOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const cancelListingOperation = useOperation<CancelListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelListingOperation = Operation<\n  typeof Key,\n  CancelListingInput,\n  CancelListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelListingInput = {\n  auctionHouse: AuctionHouse;\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  listing: Listing;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelListingOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelListingOperationHandler: OperationHandler<CancelListingOperation> =\n  {\n    handle: async (operation: CancelListingOperation, metaplex: Metaplex) =>\n      cancelListingBuilder(operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelListingBuilderParams = Omit<\n  CancelListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelListingBuilderContext = Omit<CancelListingOutput, 'response'>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelListingBuilder = (\n  params: CancelListingBuilderParams\n): TransactionBuilder<CancelListingBuilderContext> => {\n  const { auctionHouse, auctioneerAuthority, listing } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Data.\n  const { asset, tradeStateAddress, price, tokens } = listing;\n  const buyerPrice = auctionHouse.hasAuctioneer\n    ? AUCTIONEER_PRICE\n    : price.basisPoints;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: listing.sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Listing Instruction.\n  let cancelListingInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelListingInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Cancel Listing.\n      .add({\n        instruction: cancelListingInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelListing',\n      })\n\n      // Cancel Listing Receipt.\n      .when(Boolean(listing.receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelListingReceiptInstruction({\n            receipt: listing.receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelListingOperation","useOperation","cancelListingOperationHandler","handle","operation","metaplex","cancelListingBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","listing","hasAuctioneer","AuctioneerAuthorityRequiredError","asset","tradeStateAddress","price","tokens","buyerPrice","AUCTIONEER_PRICE","basisPoints","accounts","wallet","sellerAddress","tokenAccount","token","address","tokenMint","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","tradeState","args","tokenSize","cancelListingInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","cancelSigners","filter","isSigner","TransactionBuilder","make","add","instruction","signers","key","instructionKey","when","Boolean","receiptAddress","builder","createCancelListingReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}