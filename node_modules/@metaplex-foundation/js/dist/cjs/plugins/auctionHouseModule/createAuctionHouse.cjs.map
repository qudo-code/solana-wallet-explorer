{"version":3,"file":"createAuctionHouse.cjs","sources":["../../../../src/plugins/auctionHouseModule/createAuctionHouse.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  AuthorityScope,\n  createCreateAuctionHouseInstruction,\n  createDelegateAuctioneerInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  Pda,\n  isSigner,\n  toPublicKey,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseFeePda,\n  findAuctionHousePda,\n  findAuctionHouseTreasuryPda,\n} from './pdas';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { WRAPPED_SOL_MINT } from '../tokenModule';\nimport { AUCTIONEER_ALL_SCOPES } from './constants';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAuctionHouseInput = {\n  // Data.\n  sellerFeeBasisPoints: number;\n  requiresSignOff?: boolean;\n  canChangeSalePrice?: boolean;\n  auctioneerScopes?: AuthorityScope[];\n\n  // Accounts.\n  treasuryMint?: PublicKey;\n  payer?: Signer;\n  authority?: PublicKey | Signer; // Authority is required to sign when delegating to an Auctioneer instance.\n  feeWithdrawalDestination?: PublicKey;\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n  auctioneerAuthority?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAuctionHouseOutput = {\n  response: SendAndConfirmTransactionResponse;\n  auctionHouseAddress: Pda;\n  auctionHouseFeeAccountAddress: Pda;\n  auctionHouseTreasuryAddress: Pda;\n  treasuryWithdrawalDestinationAddress: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    handle: async (\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex\n    ) => {\n      return createAuctionHouseBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity();\n  const payer = params.payer ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // Auctioneer delegate instruction needs to be signed by authority\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError('authority', 'PublicKey', {\n      problemSuffix:\n        'You are trying to delegate to an Auctioneer authority which ' +\n        'requires the Auction House authority to sign a transaction. ' +\n        'But you provided the Auction House authority as a Public Key.',\n    });\n  }\n\n  // PDAs.\n  const auctionHouse = findAuctionHousePda(\n    toPublicKey(authority),\n    treasuryMint\n  );\n  const auctionHouseFeeAccount = findAuctionHouseFeePda(auctionHouse);\n  const auctionHouseTreasury = findAuctionHouseTreasuryPda(auctionHouse);\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : findAssociatedTokenAccountPda(\n        treasuryMint,\n        treasuryWithdrawalDestinationOwner\n      );\n\n  return (\n    TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        auctionHouseAddress: auctionHouse,\n        auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n        auctionHouseTreasuryAddress: auctionHouseTreasury,\n        treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination,\n      })\n\n      // Create and initialize the Auction House account.\n      .add({\n        instruction: createCreateAuctionHouseInstruction(\n          {\n            treasuryMint,\n            payer: payer.publicKey,\n            authority: toPublicKey(authority),\n            feeWithdrawalDestination,\n            treasuryWithdrawalDestination,\n            treasuryWithdrawalDestinationOwner,\n            auctionHouse,\n            auctionHouseFeeAccount,\n            auctionHouseTreasury,\n          },\n          {\n            bump: auctionHouse.bump,\n            feePayerBump: auctionHouseFeeAccount.bump,\n            treasuryBump: auctionHouseTreasury.bump,\n            sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n            requiresSignOff,\n            canChangeSalePrice,\n          }\n        ),\n        signers: [payer],\n        key: params.instructionKey ?? 'createAuctionHouse',\n      })\n\n      // Delegate to the Auctioneer authority when provided.\n      .when(Boolean(params.auctioneerAuthority), (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse,\n              authority: toPublicKey(authority as Signer),\n              auctioneerAuthority,\n              ahAuctioneerPda: findAuctioneerPda(\n                auctionHouse,\n                auctioneerAuthority\n              ),\n            },\n            { scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES }\n          ),\n          signers: [authority as Signer],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n  );\n};\n"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","createAuctionHouseBuilder","input","sendAndConfirm","confirmOptions","params","canChangeSalePrice","requiresSignOff","authority","identity","payer","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","publicKey","feeWithdrawalDestination","auctioneerAuthority","isSigner","ExpectedSignerError","problemSuffix","auctionHouse","findAuctionHousePda","toPublicKey","auctionHouseFeeAccount","findAuctionHouseFeePda","auctionHouseTreasury","findAuctionHouseTreasuryPda","treasuryWithdrawalDestination","equals","findAssociatedTokenAccountPda","TransactionBuilder","make","setFeePayer","setContext","auctionHouseAddress","auctionHouseFeeAccountAddress","auctionHouseTreasuryAddress","treasuryWithdrawalDestinationAddress","add","instruction","createCreateAuctionHouseInstruction","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","signers","key","instructionKey","when","Boolean","builder","createDelegateAuctioneerInstruction","ahAuctioneerPda","findAuctioneerPda","scopes","auctioneerScopes","AUCTIONEER_ALL_SCOPES","delegateAuctioneerInstructionKey"],"mappings":"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"}