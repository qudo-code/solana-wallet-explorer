{"version":3,"file":"createBid.cjs","sources":["../../../../src/plugins/auctionHouseModule/createBid.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  BuyInstructionAccounts,\n  createAuctioneerBuyInstruction,\n  createAuctioneerPublicBuyInstruction,\n  createBuyInstruction,\n  createPrintBidReceiptInstruction,\n  createPublicBuyInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  amount,\n  SolAmount,\n  SplTokenAmount,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { findMetadataPda } from '../nftModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseTradeStatePda,\n  findBidReceiptPda,\n} from './pdas';\nimport { AuctioneerAuthorityRequiredError } from './errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateBidOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createBidOperation = useOperation<CreateBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateBidOperation = Operation<\n  typeof Key,\n  CreateBidInput,\n  CreateBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateBidInput = {\n  auctionHouse: AuctionHouse;\n  buyer?: PublicKey | Signer; // Default: identity\n  authority?: PublicKey | Signer; // Default: auctionHouse.authority\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  mintAccount: PublicKey; // Required for checking Metadata\n  seller?: Option<PublicKey>; // Default: null (i.e. public bid unless token account is provided)\n  tokenAccount?: Option<PublicKey>; // Default: null (i.e. public bid unless seller is provided).\n  price?: SolAmount | SplTokenAmount; // Default: 0 SOLs or tokens.\n  tokens?: SplTokenAmount; // Default: token(1)\n  bookkeeper?: Signer; // Default: identity\n  printReceipt?: boolean; // Default: true\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateBidOutput = {\n  response: SendAndConfirmTransactionResponse;\n  buyerTradeState: Pda;\n  tokenAccount: Option<PublicKey>;\n  metadata: Pda;\n  buyer: PublicKey;\n  receipt: Option<Pda>;\n  bookkeeper: Option<PublicKey>;\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createBidOperationHandler: OperationHandler<CreateBidOperation> = {\n  handle: async (\n    operation: CreateBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const builder = await createBidBuilder(metaplex, operation.input);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateBidBuilderParams = Omit<CreateBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateBidBuilderContext = Omit<CreateBidOutput, 'response'>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createBidBuilder = async (\n  metaplex: Metaplex,\n  params: CreateBidBuilderParams\n): Promise<TransactionBuilder<CreateBidBuilderContext>> => {\n  // Data.\n  const auctionHouse = params.auctionHouse;\n  const tokens = params.tokens ?? token(1);\n  const priceBasisPoint = params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n  const metadata = findMetadataPda(params.mintAccount);\n  const paymentAccount = auctionHouse.isNative\n    ? toPublicKey(buyer)\n    : findAssociatedTokenAccountPda(\n        auctionHouse.treasuryMint.address,\n        toPublicKey(buyer)\n      );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    toPublicKey(buyer)\n  );\n  const tokenAccount =\n    params.tokenAccount ??\n    (params.seller\n      ? findAssociatedTokenAccountPda(params.mintAccount, params.seller)\n      : null);\n  const buyerTokenAccount = findAssociatedTokenAccountPda(\n    params.mintAccount,\n    toPublicKey(buyer)\n  );\n\n  const buyerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(buyer),\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    price.basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n\n  const accounts: Omit<BuyInstructionAccounts, 'tokenAccount'> = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    treasuryMint: auctionHouse.treasuryMint.address,\n    metadata,\n    escrowPaymentAccount: escrowPayment,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    buyerTradeState,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: buyerTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let buyInstruction;\n  if (params.auctioneerAuthority) {\n    const ahAuctioneerPda = findAuctioneerPda(\n      auctionHouse.address,\n      params.auctioneerAuthority.publicKey\n    );\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: params.auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    buyInstruction = tokenAccount\n      ? createAuctioneerBuyInstruction(\n          { ...accountsWithAuctioneer, tokenAccount },\n          args\n        )\n      : createAuctioneerPublicBuyInstruction(\n          {\n            ...accountsWithAuctioneer,\n            tokenAccount: buyerTokenAccount,\n          },\n          args\n        );\n  } else {\n    buyInstruction = tokenAccount\n      ? createBuyInstruction({ ...accounts, tokenAccount }, args)\n      : createPublicBuyInstruction(\n          { ...accounts, tokenAccount: buyerTokenAccount },\n          args\n        );\n  }\n\n  // Signers.\n  const buySigners = [buyer, authority, params.auctioneerAuthority].filter(\n    (input): input is Signer => !!input && isSigner(input)\n  );\n\n  // Receipt.\n  // Since createPrintBidReceiptInstruction can't deserialize createAuctioneerBuyInstruction due to a bug\n  // Don't print Auctioneer Bid receipt for the time being.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) && !params.auctioneerAuthority;\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const receipt = findBidReceiptPda(buyerTradeState);\n\n  const builder = TransactionBuilder.make<CreateBidBuilderContext>().setContext(\n    {\n      buyerTradeState,\n      tokenAccount,\n      metadata,\n      buyer: toPublicKey(buyer),\n      receipt: shouldPrintReceipt ? receipt : null,\n      bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n      price,\n      tokens,\n    }\n  );\n\n  // Create a TA for public bid if it doesn't exist\n  if (!tokenAccount) {\n    const account = await metaplex.rpc().getAccount(buyerTokenAccount);\n    if (!account.exists) {\n      builder.add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createToken({\n            mint: params.mintAccount,\n            owner: toPublicKey(buyer),\n          })\n      );\n    }\n  }\n\n  return (\n    builder\n      // Create bid.\n      .add({\n        instruction: buyInstruction,\n        signers: buySigners,\n        key: 'buy',\n      })\n\n      // Print the Bid Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintBidReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createBidOperation","useOperation","createBidOperationHandler","handle","operation","metaplex","scope","builder","createBidBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","auctionHouse","tokens","token","priceBasisPoint","price","basisPoints","isNative","lamports","amount","treasuryMint","currency","hasAuctioneer","auctioneerAuthority","AuctioneerAuthorityRequiredError","buyer","identity","authority","authorityAddress","metadata","findMetadataPda","mintAccount","paymentAccount","toPublicKey","findAssociatedTokenAccountPda","address","escrowPayment","findAuctionHouseBuyerEscrowPda","tokenAccount","seller","buyerTokenAccount","buyerTradeState","findAuctionHouseTradeStatePda","accounts","wallet","transferAuthority","escrowPaymentAccount","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","escrowPaymentBump","buyerPrice","tokenSize","buyInstruction","ahAuctioneerPda","findAuctioneerPda","publicKey","accountsWithAuctioneer","createAuctioneerBuyInstruction","createAuctioneerPublicBuyInstruction","createBuyInstruction","createPublicBuyInstruction","buySigners","filter","isSigner","shouldPrintReceipt","printReceipt","bookkeeper","receipt","findBidReceiptPda","TransactionBuilder","make","setContext","account","rpc","getAccount","exists","add","builders","createToken","mint","owner","instruction","signers","key","when","createPrintBidReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}