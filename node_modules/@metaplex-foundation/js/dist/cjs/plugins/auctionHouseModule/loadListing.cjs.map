{"version":3,"file":"loadListing.cjs","sources":["../../../../src/plugins/auctionHouseModule/loadListing.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { LazyListing, Listing } from './Listing';\nimport { DisposableScope } from '@/utils';\nimport { assertNftOrSftWithToken } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadListingOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const loadListingOperation = useOperation<LoadListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadListingOperation = Operation<\n  typeof Key,\n  LoadListingInput,\n  Listing\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadListingInput = {\n  lazyListing: LazyListing;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadListingOperationHandler: OperationHandler<LoadListingOperation> =\n  {\n    handle: async (\n      operation: LoadListingOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const {\n        lazyListing,\n        loadJsonMetadata = true,\n        commitment,\n      } = operation.input;\n\n      const asset = await metaplex\n        .nfts()\n        .findByMetadata({\n          metadata: lazyListing.metadataAddress,\n          tokenOwner: lazyListing.sellerAddress,\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyListing,\n        model: 'listing',\n        lazy: false,\n        asset,\n        tokens: amount(lazyListing.tokens, asset.mint.currency),\n      };\n    },\n  };\n"],"names":["Key","loadListingOperation","useOperation","loadListingOperationHandler","handle","operation","metaplex","scope","lazyListing","loadJsonMetadata","commitment","input","asset","nfts","findByMetadata","metadata","metadataAddress","tokenOwner","sellerAddress","run","assertNftOrSftWithToken","model","lazy","tokens","amount","mint","currency"],"mappings":";;;;;;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,oBAAoB,GAAGC,sBAAY,CAAuBF,GAAvB,EAAzC;AAEP;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACO,MAAMG,2BAAmE,GAC9E;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MACJC,WADI;AAEJC,MAAAA,gBAAgB,GAAG,IAFf;AAGJC,MAAAA,UAAAA;KACEL,GAAAA,SAAS,CAACM,KAJd,CAAA;IAMA,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CACzBO,IADiB,EAAA,CAEjBC,cAFiB,CAEF;MACdC,QAAQ,EAAEP,WAAW,CAACQ,eADR;MAEdC,UAAU,EAAET,WAAW,CAACU,aAFV;MAGdR,UAHc;AAIdD,MAAAA,gBAAAA;AAJc,KAFE,CAQjBU,CAAAA,GARiB,CAQbZ,KARa,CAApB,CAAA;IASAa,2BAAuB,CAACR,KAAD,CAAvB,CAAA;IAEA,OAAO,EACL,GAAGJ,WADE;AAELa,MAAAA,KAAK,EAAE,SAFF;AAGLC,MAAAA,IAAI,EAAE,KAHD;MAILV,KAJK;MAKLW,MAAM,EAAEC,aAAM,CAAChB,WAAW,CAACe,MAAb,EAAqBX,KAAK,CAACa,IAAN,CAAWC,QAAhC,CAAA;KALhB,CAAA;AAOD,GAAA;AA9BH;;;;;"}