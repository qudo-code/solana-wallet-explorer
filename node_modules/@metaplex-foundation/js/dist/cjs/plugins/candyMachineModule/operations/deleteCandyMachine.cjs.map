{"version":3,"file":"deleteCandyMachine.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/deleteCandyMachine.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createWithdrawFundsInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport type { ConfirmOptions } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyMachine, CandyMachineConfigs } from '../models/CandyMachine';\nimport { findCandyMachineCollectionPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyMachineOperation =\n  useOperation<DeleteCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyMachineOperation = Operation<\n  typeof Key,\n  DeleteCandyMachineInput,\n  DeleteCandyMachineOutput\n>;\n\nexport type DeleteCandyMachineInputWithoutConfigs = {\n  // Models and accounts.\n  candyMachine: Pick<CandyMachine, 'address' | 'collectionMintAddress'>;\n  authority?: Signer; // Defaults to mx.identity().\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyMachineInput = DeleteCandyMachineInputWithoutConfigs &\n  Partial<CandyMachineConfigs>;\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyMachineOperationHandler: OperationHandler<DeleteCandyMachineOperation> =\n  {\n    async handle(\n      operation: DeleteCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<DeleteCandyMachineOutput> {\n      return deleteCandyMachineBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyMachineBuilderParams = Omit<\n  DeleteCandyMachineInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: DeleteCandyMachineBuilderParams\n): TransactionBuilder => {\n  const authority = params.authority ?? metaplex.identity();\n  const candyMachine = params.candyMachine;\n\n  const deleteInstruction = createWithdrawFundsInstruction({\n    candyMachine: candyMachine.address,\n    authority: authority.publicKey,\n  });\n\n  if (candyMachine.collectionMintAddress) {\n    const collectionPda = findCandyMachineCollectionPda(candyMachine.address);\n    deleteInstruction.keys.push({\n      pubkey: collectionPda,\n      isWritable: true,\n      isSigner: false,\n    });\n  }\n\n  return (\n    TransactionBuilder.make()\n\n      // This is important because, otherwise, the authority will not be identitied\n      // as a mutable account and debitting it will cause an error.\n      .setFeePayer(authority)\n\n      .add({\n        instruction: deleteInstruction,\n        signers: [authority],\n        key: params.instructionKey ?? 'withdrawFunds',\n      })\n  );\n};\n"],"names":["Key","deleteCandyMachineOperation","useOperation","deleteCandyMachineOperationHandler","handle","operation","metaplex","deleteCandyMachineBuilder","input","sendAndConfirm","confirmOptions","params","authority","identity","candyMachine","deleteInstruction","createWithdrawFundsInstruction","address","publicKey","collectionMintAddress","collectionPda","findCandyMachineCollectionPda","keys","push","pubkey","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey"],"mappings":";;;;;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,sBAAY,CAA8BF,GAA9B,EADP;AAGP;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGqC;AACnC,IAAA,OAAOC,yBAAyB,CAC9BD,QAD8B,EAE9BD,SAAS,CAACG,KAFoB,CAAzB,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,yBAAyB,GAAG,CACvCD,QADuC,EAEvCK,MAFuC,KAGhB;AAAA,EAAA,IAAA,iBAAA,EAAA,qBAAA,CAAA;;EACvB,MAAMC,SAAS,wBAAGD,MAAM,CAACC,SAAV,MAAuBN,IAAAA,IAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,iBAAAA,GAAAA,QAAQ,CAACO,QAAT,EAAtC,CAAA;AACA,EAAA,MAAMC,YAAY,GAAGH,MAAM,CAACG,YAA5B,CAAA;EAEA,MAAMC,iBAAiB,GAAGC,8CAA8B,CAAC;IACvDF,YAAY,EAAEA,YAAY,CAACG,OAD4B;IAEvDL,SAAS,EAAEA,SAAS,CAACM,SAAAA;AAFkC,GAAD,CAAxD,CAAA;;EAKA,IAAIJ,YAAY,CAACK,qBAAjB,EAAwC;AACtC,IAAA,MAAMC,aAAa,GAAGC,kCAA6B,CAACP,YAAY,CAACG,OAAd,CAAnD,CAAA;AACAF,IAAAA,iBAAiB,CAACO,IAAlB,CAAuBC,IAAvB,CAA4B;AAC1BC,MAAAA,MAAM,EAAEJ,aADkB;AAE1BK,MAAAA,UAAU,EAAE,IAFc;AAG1BC,MAAAA,QAAQ,EAAE,KAAA;KAHZ,CAAA,CAAA;AAKD,GAAA;;EAED,OACEC,qCAAkB,CAACC,IAAnB,EAEE;AACA;AAHF,GAIGC,WAJH,CAIejB,SAJf,CAAA,CAMGkB,GANH,CAMO;AACHC,IAAAA,WAAW,EAAEhB,iBADV;IAEHiB,OAAO,EAAE,CAACpB,SAAD,CAFN;AAGHqB,IAAAA,GAAG,EAAEtB,CAAAA,qBAAAA,GAAAA,MAAM,CAACuB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAH3B,GANP,CADF,CAAA;AAaD;;;;;;"}