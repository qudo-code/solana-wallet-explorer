{"version":3,"file":"findCandyMachineByAddress.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyMachineByAddress.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  useOperation,\n} from '@/types';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport {\n  parseCandyMachineCollectionAccount,\n  toCandyMachineAccount,\n} from '../accounts';\nimport { CandyMachine, toCandyMachine } from '../models/CandyMachine';\nimport { findCandyMachineCollectionPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineByAddressOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachineByAddressOperation =\n  useOperation<FindCandyMachineByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachineByAddressOperation = Operation<\n  typeof Key,\n  FindCandyMachineByAddressInput,\n  CandyMachine\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachineByAddressInput = {\n  address: PublicKey;\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachineByAddressOperationHandler: OperationHandler<FindCandyMachineByAddressOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachineByAddressOperation,\n      metaplex: Metaplex\n    ) => {\n      const { address, commitment } = operation.input;\n      const collectionPda = findCandyMachineCollectionPda(address);\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts([address, collectionPda], commitment);\n\n      const unparsedAccount = accounts[0];\n      assertAccountExists(unparsedAccount);\n      const account = toCandyMachineAccount(unparsedAccount);\n      const collectionAccount = parseCandyMachineCollectionAccount(accounts[1]);\n\n      return toCandyMachine(account, unparsedAccount, collectionAccount);\n    },\n  };\n"],"names":["Key","findCandyMachineByAddressOperation","useOperation","findCandyMachineByAddressOperationHandler","handle","operation","metaplex","address","commitment","input","collectionPda","findCandyMachineCollectionPda","accounts","rpc","getMultipleAccounts","unparsedAccount","assertAccountExists","account","toCandyMachineAccount","collectionAccount","parseCandyMachineCollectionAccount","toCandyMachine"],"mappings":";;;;;;;;;;AAgBA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,sBAAY,CAAqCF,GAArC,EADP;AAGP;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACO,MAAMG,yCAA+F,GAC1G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGH;IACH,MAAM;MAAEC,OAAF;AAAWC,MAAAA,UAAAA;KAAeH,GAAAA,SAAS,CAACI,KAA1C,CAAA;AACA,IAAA,MAAMC,aAAa,GAAGC,kCAA6B,CAACJ,OAAD,CAAnD,CAAA;AACA,IAAA,MAAMK,UAAQ,GAAG,MAAMN,QAAQ,CAC5BO,GADoB,EAEpBC,CAAAA,mBAFoB,CAEA,CAACP,OAAD,EAAUG,aAAV,CAFA,EAE0BF,UAF1B,CAAvB,CAAA;AAIA,IAAA,MAAMO,eAAe,GAAGH,UAAQ,CAAC,CAAD,CAAhC,CAAA;IACAI,2BAAmB,CAACD,eAAD,CAAnB,CAAA;AACA,IAAA,MAAME,OAAO,GAAGC,8BAAqB,CAACH,eAAD,CAArC,CAAA;IACA,MAAMI,iBAAiB,GAAGC,2CAAkC,CAACR,UAAQ,CAAC,CAAD,CAAT,CAA5D,CAAA;AAEA,IAAA,OAAOS,2BAAc,CAACJ,OAAD,EAAUF,eAAV,EAA2BI,iBAA3B,CAArB,CAAA;AACD,GAAA;AAjBH;;;;;"}