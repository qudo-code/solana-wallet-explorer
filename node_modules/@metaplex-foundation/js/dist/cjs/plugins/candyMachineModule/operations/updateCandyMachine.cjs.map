{"version":3,"file":"updateCandyMachine.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyMachine.ts"],"sourcesContent":["import { NoInstructionsToSendError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { Option, TransactionBuilder } from '@/utils';\nimport {\n  CandyMachineData,\n  createRemoveCollectionInstruction,\n  createSetCollectionInstruction,\n  createUpdateAuthorityInstruction,\n  createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport type { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  TokenMetadataProgram,\n} from '../../nftModule';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  CandyMachine,\n  CandyMachineConfigs,\n  toCandyMachineConfigs,\n  toCandyMachineInstructionData,\n} from '../models/CandyMachine';\nimport { findCandyMachineCollectionPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyMachineOperation =\n  useOperation<UpdateCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyMachineOperation = Operation<\n  typeof Key,\n  UpdateCandyMachineInput,\n  UpdateCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyMachineInput = Partial<CandyMachineConfigs> & {\n  /**\n   * The candy machine to update.\n   */\n  candyMachine: CandyMachine;\n\n  authority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n  newAuthority?: PublicKey;\n  newCollection?: Option<PublicKey>;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyMachineOperationHandler: OperationHandler<UpdateCandyMachineOperation> =\n  {\n    async handle(\n      operation: UpdateCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<UpdateCandyMachineOutput> {\n      const {\n        candyMachine,\n        authority = metaplex.identity(),\n        payer = metaplex.identity(),\n        newAuthority,\n        newCollection,\n        confirmOptions,\n        ...updatableFields\n      } = operation.input;\n\n      const currentConfigs = toCandyMachineConfigs(candyMachine);\n      const instructionDataWithoutChanges = toCandyMachineInstructionData(\n        candyMachine.address,\n        currentConfigs\n      );\n      const instructionData = toCandyMachineInstructionData(\n        candyMachine.address,\n        {\n          ...currentConfigs,\n          ...updatableFields,\n        }\n      );\n      const { data, wallet, tokenMint } = instructionData;\n      const shouldUpdateData = !isEqual(\n        instructionData,\n        instructionDataWithoutChanges\n      );\n\n      const builder = updateCandyMachineBuilder(metaplex, {\n        candyMachine,\n        authority,\n        payer,\n        newData: shouldUpdateData ? { ...data, wallet, tokenMint } : undefined,\n        newCollection,\n        newAuthority,\n      });\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyMachineBuilderParams = {\n  /**\n   * The Candy Machine to update.\n   */\n  candyMachine: Pick<\n    CandyMachine,\n    'address' | 'walletAddress' | 'collectionMintAddress'\n  >;\n\n  /**\n   * The Signer that is authorized to update the candy machine.\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The Signer that should pay for any required account storage.\n   * E.g. for the collection PDA that keeps track of the Candy Machine's collection.\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * The new Candy Machine data.\n   * This includes the wallet and token mint addresses\n   * which can both be updated.\n   * @defaultValue Defaults to not being updated.\n   */\n  newData?: CandyMachineData & {\n    wallet: PublicKey;\n    tokenMint: Option<PublicKey>;\n  };\n\n  /**\n   * The new Candy Machine authority.\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The mint address of the new Candy Machine collection.\n   * When `null` is provided, the collection is removed.\n   * @defaultValue Defaults to not being updated.\n   */\n  newCollection?: Option<PublicKey>;\n\n  // Instruction keys.\n  updateInstructionKey?: string;\n  updateAuthorityInstructionKey?: string;\n  setCollectionInstructionKey?: string;\n  removeCollectionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams\n): TransactionBuilder => {\n  const {\n    candyMachine,\n    authority = metaplex.identity(),\n    payer = metaplex.identity(),\n    newData,\n    newAuthority,\n    newCollection,\n  } = params;\n  const shouldUpdateAuthority =\n    !!newAuthority && !newAuthority.equals(authority.publicKey);\n  const sameCollection =\n    newCollection &&\n    candyMachine.collectionMintAddress &&\n    candyMachine.collectionMintAddress.equals(newCollection);\n  const shouldUpdateCollection = !!newCollection && !sameCollection;\n  const shouldRemoveCollection =\n    !shouldUpdateCollection &&\n    newCollection === null &&\n    candyMachine.collectionMintAddress !== null;\n\n  return (\n    TransactionBuilder.make()\n\n      // Update data.\n      .when(!!newData, (builder) => {\n        const data = newData as CandyMachineData;\n        const wallet = newData?.wallet as PublicKey;\n        const tokenMint = newData?.tokenMint as Option<PublicKey>;\n        const updateInstruction = createUpdateCandyMachineInstruction(\n          {\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            wallet,\n          },\n          { data }\n        );\n\n        if (tokenMint) {\n          updateInstruction.keys.push({\n            pubkey: tokenMint,\n            isWritable: false,\n            isSigner: false,\n          });\n        }\n\n        return builder.add({\n          instruction: updateInstruction,\n          signers: [authority],\n          key: params.updateInstructionKey ?? 'update',\n        });\n      })\n\n      // Set or update collection.\n      .when(shouldUpdateCollection, (builder) => {\n        const collectionMint = newCollection as PublicKey;\n        const metadata = findMetadataPda(collectionMint);\n        const edition = findMasterEditionV2Pda(collectionMint);\n        const collectionPda = findCandyMachineCollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          collectionPda\n        );\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: TokenMetadataProgram.publicKey,\n          }),\n          signers: [payer, authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n\n      // Remove collection.\n      .when(shouldRemoveCollection, (builder) => {\n        const collectionMint = candyMachine.collectionMintAddress as PublicKey;\n        const metadata = findMetadataPda(collectionMint);\n        const collectionPda = findCandyMachineCollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          collectionPda\n        );\n\n        return builder.add({\n          instruction: createRemoveCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            metadata,\n            mint: collectionMint,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: TokenMetadataProgram.publicKey,\n          }),\n          signers: [authority],\n          key: params.removeCollectionInstructionKey ?? 'removeCollection',\n        });\n      })\n\n      // Update authority.\n      .when(shouldUpdateAuthority, (builder) =>\n        builder.add({\n          instruction: createUpdateAuthorityInstruction(\n            {\n              candyMachine: candyMachine.address,\n              authority: authority.publicKey,\n              wallet: newData?.wallet ?? candyMachine.walletAddress,\n            },\n            { newAuthority: newAuthority as PublicKey }\n          ),\n          signers: [authority],\n          key: params.updateAuthorityInstructionKey ?? 'updateAuthority',\n        })\n      )\n  );\n};\n"],"names":["Key","updateCandyMachineOperation","useOperation","updateCandyMachineOperationHandler","handle","operation","metaplex","candyMachine","authority","identity","payer","newAuthority","newCollection","confirmOptions","updatableFields","input","currentConfigs","toCandyMachineConfigs","instructionDataWithoutChanges","toCandyMachineInstructionData","address","instructionData","data","wallet","tokenMint","shouldUpdateData","isEqual","builder","updateCandyMachineBuilder","newData","undefined","isEmpty","NoInstructionsToSendError","sendAndConfirm","params","shouldUpdateAuthority","equals","publicKey","sameCollection","collectionMintAddress","shouldUpdateCollection","shouldRemoveCollection","TransactionBuilder","make","when","updateInstruction","createUpdateCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","add","instruction","signers","key","updateInstructionKey","collectionMint","metadata","findMetadataPda","edition","findMasterEditionV2Pda","collectionPda","findCandyMachineCollectionPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","createSetCollectionInstruction","mint","tokenMetadataProgram","TokenMetadataProgram","setCollectionInstructionKey","createRemoveCollectionInstruction","removeCollectionInstructionKey","createUpdateAuthorityInstruction","walletAddress","updateAuthorityInstructionKey"],"mappings":"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"}