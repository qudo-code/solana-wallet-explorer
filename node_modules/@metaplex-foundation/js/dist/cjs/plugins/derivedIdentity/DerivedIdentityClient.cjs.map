{"version":3,"file":"DerivedIdentityClient.cjs","sources":["../../../../src/plugins/derivedIdentity/DerivedIdentityClient.ts"],"sourcesContent":["import { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n  SolAmount,\n} from '@/types';\nimport { UninitializedDerivedIdentityError } from './errors';\nimport { Task } from '@/utils';\nimport { TransferSolOutput } from '../systemModule';\n\n/**\n * @group Modules\n */\nexport class DerivedIdentityClient implements IdentitySigner, KeypairSigner {\n  protected readonly metaplex: Metaplex;\n  protected originalSigner: Signer | null = null;\n  protected derivedKeypair: Keypair | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  get publicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey(): Uint8Array {\n    this.assertInitialized();\n\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.originalSigner.publicKey;\n  }\n\n  deriveFrom(\n    message: string | Uint8Array,\n    originalSigner?: IdentitySigner\n  ): Task<void> {\n    return new Task(async () => {\n      this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n\n      const signature = await this.originalSigner.signMessage(\n        Buffer.from(message)\n      );\n\n      const seeds = nacl.hash(signature).slice(0, 32);\n\n      this.derivedKeypair = Keypair.fromSeed(seeds);\n    });\n  }\n\n  fund(amount: SolAmount): Task<TransferSolOutput> {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol({\n      from: this.originalSigner,\n      to: this.derivedKeypair.publicKey,\n      amount,\n    });\n  }\n\n  withdraw(amount: SolAmount): Task<TransferSolOutput> {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol({\n      from: this.derivedKeypair,\n      to: this.originalSigner.publicKey,\n      amount,\n    });\n  }\n\n  withdrawAll(): Task<TransferSolOutput> {\n    this.assertInitialized();\n    return new Task(async (scope) => {\n      this.assertInitialized();\n      const balance = await this.metaplex\n        .rpc()\n        .getBalance(this.derivedKeypair.publicKey);\n      return this.withdraw(balance).run(scope);\n    });\n  }\n\n  close(): void {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return nacl.sign.detached(message, this.secretKey);\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this);\n\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return nacl.sign.detached.verify(\n      message,\n      signature,\n      this.publicKey.toBytes()\n    );\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized(): asserts this is {\n    originalSigner: Signer;\n    derivedKeypair: Keypair;\n  } {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n}\n"],"names":["DerivedIdentityClient","constructor","metaplex","_defineProperty","publicKey","assertInitialized","derivedKeypair","secretKey","originalPublicKey","originalSigner","deriveFrom","message","Task","identity","driver","signature","signMessage","Buffer","from","seeds","nacl","hash","slice","Keypair","fromSeed","fund","amount","system","transferSol","to","withdraw","withdrawAll","scope","balance","rpc","getBalance","run","close","sign","detached","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map","verifyMessage","verify","toBytes","equals","that","isSigner","UninitializedDerivedIdentityError"],"mappings":"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"}