{"version":3,"file":"accounts.cjs","sources":["../../../../src/plugins/nftModule/accounts.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  Edition,\n  Key,\n  MasterEditionV1,\n  MasterEditionV2,\n  Metadata,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  Account,\n  AccountParser,\n  getAccountParsingAndAssertingFunction,\n  getAccountParsingFunction,\n} from '@/types';\n\n/** @group Accounts */\nexport type MetadataAccount = Account<Metadata>;\n\n/** @group Account Helpers */\nexport const parseMetadataAccount = getAccountParsingFunction(Metadata);\n\n/** @group Account Helpers */\nexport const toMetadataAccount =\n  getAccountParsingAndAssertingFunction(Metadata);\n\n/** @group Accounts */\nexport type OriginalOrPrintEditionAccountData =\n  | OriginalEditionAccountData\n  | PrintEditionAccountData;\n\n/** @group Accounts */\nexport type OriginalOrPrintEditionAccount =\n  Account<OriginalOrPrintEditionAccountData>;\n\nconst originalOrPrintEditionAccountParser: AccountParser<OriginalOrPrintEditionAccountData> =\n  {\n    name: 'MasterEditionV1 | MasterEditionV2 | Edition',\n    deserialize: (data: Buffer, offset = 0) => {\n      if (data?.[0] === Key.MasterEditionV1) {\n        return MasterEditionV1.deserialize(data, offset);\n      } else if (data?.[0] === Key.MasterEditionV2) {\n        return MasterEditionV2.deserialize(data, offset);\n      } else {\n        return Edition.deserialize(data, offset);\n      }\n    },\n  };\n\n/** @group Account Helpers */\nexport const parseOriginalOrPrintEditionAccount =\n  getAccountParsingFunction<OriginalOrPrintEditionAccountData>(\n    originalOrPrintEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const toOriginalOrPrintEditionAccount =\n  getAccountParsingAndAssertingFunction<OriginalOrPrintEditionAccountData>(\n    originalOrPrintEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const isOriginalEditionAccount = (\n  account: OriginalOrPrintEditionAccount\n): account is OriginalEditionAccount => {\n  return 'maxSupply' in account.data;\n};\n\n/** @group Account Helpers */\nexport const isPrintEditionAccount = (\n  account: OriginalOrPrintEditionAccount\n): account is PrintEditionAccount => {\n  return !isOriginalEditionAccount(account);\n};\n\n/** @group Accounts */\nexport type OriginalEditionAccountData = MasterEditionV1 | MasterEditionV2;\n\n/** @group Accounts */\nexport type OriginalEditionAccount = Account<OriginalEditionAccountData>;\n\nconst originalEditionAccountParser: AccountParser<OriginalEditionAccountData> =\n  {\n    name: 'MasterEditionV1 | MasterEditionV2',\n    deserialize: (data: Buffer, offset = 0) => {\n      if (data?.[0] === Key.MasterEditionV1) {\n        return MasterEditionV1.deserialize(data, offset);\n      } else {\n        return MasterEditionV2.deserialize(data, offset);\n      }\n    },\n  };\n\n/** @group Account Helpers */\nexport const parseOriginalEditionAccount =\n  getAccountParsingFunction<OriginalEditionAccountData>(\n    originalEditionAccountParser\n  );\n\n/** @group Account Helpers */\nexport const toOriginalEditionAccount =\n  getAccountParsingAndAssertingFunction<OriginalEditionAccountData>(\n    originalEditionAccountParser\n  );\n\n/** @group Accounts */\nexport type PrintEditionAccountData = Edition;\n\n/** @group Accounts */\nexport type PrintEditionAccount = Account<PrintEditionAccountData>;\n\n/** @group Account Helpers */\nexport const parsePrintEditionAccount = getAccountParsingFunction(Edition);\n\n/** @group Account Helpers */\nexport const toPrintEditionAccount =\n  getAccountParsingAndAssertingFunction(Edition);\n"],"names":["parseMetadataAccount","getAccountParsingFunction","Metadata","toMetadataAccount","getAccountParsingAndAssertingFunction","originalOrPrintEditionAccountParser","name","deserialize","data","offset","Key","MasterEditionV1","MasterEditionV2","Edition","parseOriginalOrPrintEditionAccount","toOriginalOrPrintEditionAccount","isOriginalEditionAccount","account","isPrintEditionAccount","originalEditionAccountParser","parseOriginalEditionAccount","toOriginalEditionAccount","parsePrintEditionAccount","toPrintEditionAccount"],"mappings":";;;;;;;AAeA;;AAGA;MACaA,oBAAoB,GAAGC,iCAAyB,CAACC,yBAAD,EAAtD;AAEP;;MACaC,iBAAiB,GAC5BC,6CAAqC,CAACF,yBAAD,EADhC;AAGP;;AASA,MAAMG,mCAAqF,GACzF;AACEC,EAAAA,IAAI,EAAE,6CADR;AAEEC,EAAAA,WAAW,EAAE,CAACC,IAAD,EAAeC,MAAM,GAAG,CAAxB,KAA8B;AACzC,IAAA,IAAI,CAAAD,IAAI,KAAJ,IAAA,IAAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,IAAI,CAAG,CAAH,CAAJ,MAAcE,oBAAG,CAACC,eAAtB,EAAuC;AACrC,MAAA,OAAOA,gCAAe,CAACJ,WAAhB,CAA4BC,IAA5B,EAAkCC,MAAlC,CAAP,CAAA;AACD,KAFD,MAEO,IAAI,CAAAD,IAAI,KAAA,IAAJ,IAAAA,IAAI,KAAA,KAAA,CAAJ,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAG,CAAH,CAAJ,MAAcE,oBAAG,CAACE,eAAtB,EAAuC;AAC5C,MAAA,OAAOA,gCAAe,CAACL,WAAhB,CAA4BC,IAA5B,EAAkCC,MAAlC,CAAP,CAAA;AACD,KAFM,MAEA;AACL,MAAA,OAAOI,wBAAO,CAACN,WAAR,CAAoBC,IAApB,EAA0BC,MAA1B,CAAP,CAAA;AACD,KAAA;AACF,GAAA;AAVH,CADF,CAAA;AAcA;;MACaK,kCAAkC,GAC7Cb,iCAAyB,CACvBI,mCADuB,EADpB;AAKP;;MACaU,+BAA+B,GAC1CX,6CAAqC,CACnCC,mCADmC,EADhC;AAKP;;AACaW,MAAAA,wBAAwB,GACnCC,OADsC,IAEA;EACtC,OAAO,WAAA,IAAeA,OAAO,CAACT,IAA9B,CAAA;AACD,EAJM;AAMP;;AACaU,MAAAA,qBAAqB,GAChCD,OADmC,IAEA;AACnC,EAAA,OAAO,CAACD,wBAAwB,CAACC,OAAD,CAAhC,CAAA;AACD,EAJM;AAMP;;AAMA,MAAME,4BAAuE,GAC3E;AACEb,EAAAA,IAAI,EAAE,mCADR;AAEEC,EAAAA,WAAW,EAAE,CAACC,IAAD,EAAeC,MAAM,GAAG,CAAxB,KAA8B;AACzC,IAAA,IAAI,CAAAD,IAAI,KAAJ,IAAA,IAAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,IAAI,CAAG,CAAH,CAAJ,MAAcE,oBAAG,CAACC,eAAtB,EAAuC;AACrC,MAAA,OAAOA,gCAAe,CAACJ,WAAhB,CAA4BC,IAA5B,EAAkCC,MAAlC,CAAP,CAAA;AACD,KAFD,MAEO;AACL,MAAA,OAAOG,gCAAe,CAACL,WAAhB,CAA4BC,IAA5B,EAAkCC,MAAlC,CAAP,CAAA;AACD,KAAA;AACF,GAAA;AARH,CADF,CAAA;AAYA;;MACaW,2BAA2B,GACtCnB,iCAAyB,CACvBkB,4BADuB,EADpB;AAKP;;MACaE,wBAAwB,GACnCjB,6CAAqC,CACnCe,4BADmC,EADhC;AAKP;;AAMA;MACaG,wBAAwB,GAAGrB,iCAAyB,CAACY,wBAAD,EAA1D;AAEP;;MACaU,qBAAqB,GAChCnB,6CAAqC,CAACS,wBAAD;;;;;;;;;;;;;"}