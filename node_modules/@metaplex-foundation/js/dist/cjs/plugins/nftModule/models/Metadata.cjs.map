{"version":3,"file":"Metadata.cjs","sources":["../../../../../src/plugins/nftModule/models/Metadata.ts"],"sourcesContent":["import { BigNumber, Creator, Pda, toBigNumber } from '@/types';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport {\n  TokenStandard,\n  UseMethod,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { MetadataAccount } from '../accounts';\nimport { findMetadataPda } from '../pdas';\nimport { JsonMetadata } from './JsonMetadata';\n\n/** @group Models */\nexport type Metadata<Json extends object = JsonMetadata> = {\n  readonly model: 'metadata';\n\n  /** The address of the Metadata account. */\n  readonly address: Pda;\n\n  /** The address of the Mint account. */\n  readonly mintAddress: PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to make changes to the Metadata account.\n   * */\n  readonly updateAuthorityAddress: PublicKey;\n\n  /** The JSON metadata associated with the metadata acount. */\n  readonly json: Option<Json>;\n\n  /**\n   * Whether or not the JSON metadata was loaded in the first place.\n   * When this is `false`, the `json` property is should be ignored.\n   * */\n  readonly jsonLoaded: boolean;\n\n  /**\n   * The on-chain name of the asset, stored in the Metadata account.\n   * E.g. \"My NFT #123\"\n   * */\n  readonly name: string;\n\n  /**\n   * The on-chain symbol of the asset, stored in the Metadata account.\n   * E.g. \"MYNFT\"\n   * */\n  readonly symbol: string;\n\n  /**\n   * The URI that points to the JSON metadata of the asset.\n   * This URI is used to load the `json` property of this object.\n   * */\n  readonly uri: string;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   * */\n  readonly isMutable: boolean;\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * When set to `false`, all royalties should be paid to the creators.\n   * When set to `true`, royalties should be calculate as usual.\n   */\n  readonly primarySaleHappened: boolean;\n\n  /**\n   * The royalties in percent basis point (i.e. 250 is 2.5%) that\n   * should be paid to the creators on each secondary sale.\n   */\n  readonly sellerFeeBasisPoints: number;\n\n  /** Stores the bump of the edition PDA. */\n  readonly editionNonce: Option<number>;\n\n  /**\n   * The creators of the asset.\n   * Each object within the array contains the address,\n   * the shares in percent (i.e. 5 is 5%) and whether or not the\n   * creator is verified (i.e. they signed the asset).\n   * */\n  readonly creators: Creator[];\n\n  /**\n   * This enum indicates which type of asset we are dealing with.\n   * It can be an NFT, a limited edition of an original NFT,\n   * a fungible asset (i.e. it has zero decimals)\n   * or a fungible token (i.e. it has more than zero decimals).\n   */\n  readonly tokenStandard: Option<TokenStandard>;\n\n  /**\n   * The parent collection the asset belongs to.\n   */\n  readonly collection: Option<{\n    /** The mint address of the collection asset. */\n    address: PublicKey;\n\n    /**\n     * Whether a collection authority signed this asset to\n     * ensure it is part of the collection.\n     * If `verified` is `false`, you should not trust\n     * the asset as being part of the collection.\n     */\n    verified: boolean;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that\n   * the asset is a collection. Everytime an asset is\n   * verified/unverified as part of this collection,\n   * the `size` field inside this object will be updated accordingly.\n   */\n  readonly collectionDetails: Option<{\n    /** The collection details version. For now, there's only one version. */\n    version: 'V1';\n\n    /** The size of the collection, automatically kept up-to-date by the program. */\n    size: BigNumber;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   */\n  readonly uses: Option<{\n    /** An enum selecting a strategy for using the asset. */\n    useMethod: UseMethod;\n\n    /** The amount of remaining uses. */\n    remaining: BigNumber;\n\n    /** The total amount of uses that was initially allowed. */\n    total: BigNumber;\n  }>;\n};\n\n/** @group Model Helpers */\nexport const isMetadata = (value: any): value is Metadata =>\n  typeof value === 'object' && value.model === 'metadata';\n\n/** @group Model Helpers */\nexport function assertMetadata(value: any): asserts value is Metadata {\n  assert(isMetadata(value), `Expected Metadata model`);\n}\n\n/** @group Model Helpers */\nexport const toMetadata = (\n  account: MetadataAccount,\n  json?: Option<JsonMetadata>\n): Metadata => ({\n  model: 'metadata',\n  address: findMetadataPda(account.data.mint),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  json: json ?? null,\n  jsonLoaded: json !== undefined,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection\n    ? {\n        ...account.data.collection,\n        address: account.data.collection.key,\n      }\n    : null,\n  collectionDetails: account.data.collectionDetails\n    ? {\n        version: account.data.collectionDetails.__kind,\n        size: toBigNumber(account.data.collectionDetails.size),\n      }\n    : null,\n  uses: account.data.uses\n    ? {\n        ...account.data.uses,\n        remaining: toBigNumber(account.data.uses.remaining),\n        total: toBigNumber(account.data.uses.total),\n      }\n    : null,\n});\n"],"names":["isMetadata","value","model","assertMetadata","assert","toMetadata","account","json","address","findMetadataPda","data","mint","mintAddress","updateAuthorityAddress","updateAuthority","jsonLoaded","undefined","name","removeEmptyChars","symbol","uri","isMutable","primarySaleHappened","sellerFeeBasisPoints","editionNonce","creators","tokenStandard","collection","key","collectionDetails","version","__kind","size","toBigNumber","uses","remaining","total"],"mappings":";;;;;;;;;AA2IA;AACaA,MAAAA,UAAU,GAAIC,KAAD,IACxB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,WADxC;AAGP;;AACO,SAASC,cAAT,CAAwBF,KAAxB,EAA+D;AACpEG,EAAAA,iBAAM,CAACJ,UAAU,CAACC,KAAD,CAAX,EAAqB,yBAArB,CAAN,CAAA;AACD,CAAA;AAED;;MACaI,UAAU,GAAG,CACxBC,OADwB,EAExBC,IAFwB,KAAA;AAAA,EAAA,IAAA,qBAAA,CAAA;;EAAA,OAGV;AACdL,IAAAA,KAAK,EAAE,UADO;IAEdM,OAAO,EAAEC,oBAAe,CAACH,OAAO,CAACI,IAAR,CAAaC,IAAd,CAFV;AAGdC,IAAAA,WAAW,EAAEN,OAAO,CAACI,IAAR,CAAaC,IAHZ;AAIdE,IAAAA,sBAAsB,EAAEP,OAAO,CAACI,IAAR,CAAaI,eAJvB;AAKdP,IAAAA,IAAI,EAAEA,IAAF,KAAA,IAAA,IAAEA,IAAF,KAAEA,KAAAA,CAAAA,GAAAA,IAAF,GAAU,IALA;IAMdQ,UAAU,EAAER,IAAI,KAAKS,SANP;IAOdC,IAAI,EAAEC,uBAAgB,CAACZ,OAAO,CAACI,IAAR,CAAaA,IAAb,CAAkBO,IAAnB,CAPR;IAQdE,MAAM,EAAED,uBAAgB,CAACZ,OAAO,CAACI,IAAR,CAAaA,IAAb,CAAkBS,MAAnB,CARV;IASdC,GAAG,EAAEF,uBAAgB,CAACZ,OAAO,CAACI,IAAR,CAAaA,IAAb,CAAkBU,GAAnB,CATP;AAUdC,IAAAA,SAAS,EAAEf,OAAO,CAACI,IAAR,CAAaW,SAVV;AAWdC,IAAAA,mBAAmB,EAAEhB,OAAO,CAACI,IAAR,CAAaY,mBAXpB;AAYdC,IAAAA,oBAAoB,EAAEjB,OAAO,CAACI,IAAR,CAAaA,IAAb,CAAkBa,oBAZ1B;AAadC,IAAAA,YAAY,EAAElB,OAAO,CAACI,IAAR,CAAac,YAbb;IAcdC,QAAQ,EAAA,CAAA,qBAAA,GAAEnB,OAAO,CAACI,IAAR,CAAaA,IAAb,CAAkBe,QAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAgC,EAd1B;AAedC,IAAAA,aAAa,EAAEpB,OAAO,CAACI,IAAR,CAAagB,aAfd;AAgBdC,IAAAA,UAAU,EAAErB,OAAO,CAACI,IAAR,CAAaiB,UAAb,GACR,EACE,GAAGrB,OAAO,CAACI,IAAR,CAAaiB,UADlB;AAEEnB,MAAAA,OAAO,EAAEF,OAAO,CAACI,IAAR,CAAaiB,UAAb,CAAwBC,GAAAA;AAFnC,KADQ,GAKR,IArBU;AAsBdC,IAAAA,iBAAiB,EAAEvB,OAAO,CAACI,IAAR,CAAamB,iBAAb,GACf;AACEC,MAAAA,OAAO,EAAExB,OAAO,CAACI,IAAR,CAAamB,iBAAb,CAA+BE,MAD1C;MAEEC,IAAI,EAAEC,qBAAW,CAAC3B,OAAO,CAACI,IAAR,CAAamB,iBAAb,CAA+BG,IAAhC,CAAA;AAFnB,KADe,GAKf,IA3BU;AA4BdE,IAAAA,IAAI,EAAE5B,OAAO,CAACI,IAAR,CAAawB,IAAb,GACF,EACE,GAAG5B,OAAO,CAACI,IAAR,CAAawB,IADlB;MAEEC,SAAS,EAAEF,qBAAW,CAAC3B,OAAO,CAACI,IAAR,CAAawB,IAAb,CAAkBC,SAAnB,CAFxB;MAGEC,KAAK,EAAEH,qBAAW,CAAC3B,OAAO,CAACI,IAAR,CAAawB,IAAb,CAAkBE,KAAnB,CAAA;AAHpB,KADE,GAMF,IAAA;GArCoB,CAAA;AAAA;;;;;;"}