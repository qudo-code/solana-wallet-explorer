{"version":3,"file":"Nft.cjs","sources":["../../../../../src/plugins/nftModule/models/Nft.ts"],"sourcesContent":["import type { Pda } from '@/types';\nimport { assert } from '@/utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\nimport type { NftEdition } from './NftEdition';\nimport { isSftWithToken, SftWithToken, toSft, toSftWithToken } from './Sft';\n\n/** @group Models */\nexport type Nft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> & {\n  readonly model: 'nft';\n  readonly address: PublicKey;\n  readonly metadataAddress: Pda;\n  readonly mint: Mint;\n  readonly edition: NftEdition;\n};\n\n/** @group Model Helpers */\nexport const isNft = (value: any): value is Nft =>\n  typeof value === 'object' && value.model === 'nft';\n\n/** @group Model Helpers */\nexport function assertNft(value: any): asserts value is Nft {\n  assert(isNft(value), `Expected Nft model`);\n}\n\n/** @group Model Helpers */\nexport const toNft = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition\n): Nft => ({\n  ...toSft(metadata, mint),\n  model: 'nft',\n  edition,\n});\n\n/** @group Models */\nexport type NftWithToken = Nft & { token: Token };\n\n/** @group Model Helpers */\nexport const isNftWithToken = (value: any): value is NftWithToken =>\n  isNft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertNftWithToken(value: any): asserts value is NftWithToken {\n  assert(isNftWithToken(value), `Expected Nft model with token`);\n}\n\n/** @group Model Helpers */\nexport function assertNftOrSftWithToken(\n  value: any\n): asserts value is NftWithToken | SftWithToken {\n  assert(\n    isNftWithToken(value) || isSftWithToken(value),\n    `Expected Nft or Sft model with token`\n  );\n}\n\n/** @group Model Helpers */\nexport const toNftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition,\n  token: Token\n): NftWithToken => ({\n  ...toSftWithToken(metadata, mint, token),\n  model: 'nft',\n  edition,\n});\n"],"names":["isNft","value","model","assertNft","assert","toNft","metadata","mint","edition","toSft","isNftWithToken","assertNftWithToken","assertNftOrSftWithToken","isSftWithToken","toNftWithToken","token","toSftWithToken"],"mappings":";;;;;;;AAQA;;AASA;AACaA,MAAAA,KAAK,GAAIC,KAAD,IACnB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,MADxC;AAGP;;AACO,SAASC,SAAT,CAAmBF,KAAnB,EAAqD;AAC1DG,EAAAA,iBAAM,CAACJ,KAAK,CAACC,KAAD,CAAN,EAAgB,oBAAhB,CAAN,CAAA;AACD,CAAA;AAED;;MACaI,KAAK,GAAG,CACnBC,QADmB,EAEnBC,IAFmB,EAGnBC,OAHmB,MAIV,EACT,GAAGC,SAAK,CAACH,QAAD,EAAWC,IAAX,CADC;AAETL,EAAAA,KAAK,EAAE,KAFE;AAGTM,EAAAA,OAAAA;AAHS,CAJU,EAAd;AAUP;;AAGA;AACO,MAAME,cAAc,GAAIT,KAAD,IAC5BD,KAAK,CAACC,KAAD,CAAL,IAAgB,OAAA,IAAWA,MADtB;AAGP;;AACO,SAASU,kBAAT,CAA4BV,KAA5B,EAAuE;AAC5EG,EAAAA,iBAAM,CAACM,cAAc,CAACT,KAAD,CAAf,EAAyB,+BAAzB,CAAN,CAAA;AACD,CAAA;AAED;;AACO,SAASW,uBAAT,CACLX,KADK,EAEyC;AAC9CG,EAAAA,iBAAM,CACJM,cAAc,CAACT,KAAD,CAAd,IAAyBY,kBAAc,CAACZ,KAAD,CADnC,EAEH,CAAA,oCAAA,CAFG,CAAN,CAAA;AAID,CAAA;AAED;;AACO,MAAMa,cAAc,GAAG,CAC5BR,QAD4B,EAE5BC,IAF4B,EAG5BC,OAH4B,EAI5BO,KAJ4B,MAKV,EAClB,GAAGC,kBAAc,CAACV,QAAD,EAAWC,IAAX,EAAiBQ,KAAjB,CADC;AAElBb,EAAAA,KAAK,EAAE,KAFW;AAGlBM,EAAAA,OAAAA;AAHkB,CALU;;;;;;;;;;"}