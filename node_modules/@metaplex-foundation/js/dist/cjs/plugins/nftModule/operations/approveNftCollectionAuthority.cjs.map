{"version":3,"file":"approveNftCollectionAuthority.cjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftCollectionAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findCollectionAuthorityRecordPda, findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityOperation =\n  useOperation<ApproveNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftCollectionAuthorityInput,\n  ApproveNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityInput = {\n  // Accounts.\n  mintAddress: PublicKey;\n  collectionAuthority: PublicKey;\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Programs.\n  systemProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftCollectionAuthorityOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftCollectionAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<ApproveNftCollectionAuthorityOutput> => {\n      return approveNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityBuilderParams = Omit<\n  ApproveNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftCollectionAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n    mintAddress,\n    collectionAuthority\n  );\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the collection authority.\n      .add({\n        instruction: createApproveCollectionAuthorityInstruction({\n          collectionAuthorityRecord,\n          newCollectionAuthority: collectionAuthority,\n          updateAuthority: updateAuthority.publicKey,\n          payer: payer.publicKey,\n          metadata,\n          mint: mintAddress,\n          systemProgram: params.systemProgram ?? SystemProgram.programId,\n        }),\n        signers: [payer, updateAuthority],\n        key: params.instructionKey ?? 'approveCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","approveNftCollectionAuthorityOperation","useOperation","approveNftCollectionAuthorityOperationHandler","handle","operation","metaplex","approveNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","collectionAuthority","updateAuthority","identity","payer","metadata","findMetadataPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","TransactionBuilder","make","setFeePayer","add","instruction","createApproveCollectionAuthorityInstruction","newCollectionAuthority","publicKey","mint","systemProgram","SystemProgram","programId","signers","key","instructionKey"],"mappings":";;;;;;;;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,sBAAY,CAAyCF,GAAzC,EADP;AAGP;AACA;AACA;AACA;;AAiCA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAG2C;AACjD,IAAA,OAAOC,oCAAoC,CACzCD,QADyC,EAEzCD,SAAS,CAACG,KAF+B,CAApC,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,oCAAoC,GAAG,CAClDD,QADkD,EAElDK,MAFkD,KAG3B;AAAA,EAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,mBAFI;AAGJC,IAAAA,eAAe,GAAGR,QAAQ,CAACS,QAAT,EAHd;IAIJC,KAAK,GAAGV,QAAQ,CAACS,QAAT,EAAA;AAJJ,GAAA,GAKFJ,MALJ,CAAA;AAMA,EAAA,MAAMM,QAAQ,GAAGC,oBAAe,CAACN,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMO,yBAAyB,GAAGC,qCAAgC,CAChER,WADgE,EAEhEC,mBAFgE,CAAlE,CAAA;AAKA,EAAA,OACEQ,qCAAkB,CAACC,IAAnB,GACGC,WADH,CACeP,KADf,CAGE;AAHF,GAIGQ,GAJH,CAIO;IACHC,WAAW,EAAEC,4DAA2C,CAAC;MACvDP,yBADuD;AAEvDQ,MAAAA,sBAAsB,EAAEd,mBAF+B;MAGvDC,eAAe,EAAEA,eAAe,CAACc,SAHsB;MAIvDZ,KAAK,EAAEA,KAAK,CAACY,SAJ0C;MAKvDX,QALuD;AAMvDY,MAAAA,IAAI,EAAEjB,WANiD;AAOvDkB,MAAAA,aAAa,2BAAEnB,MAAM,CAACmB,aAAT,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA0BC,qBAAa,CAACC,SAAAA;AAPE,KAAD,CADrD;AAUHC,IAAAA,OAAO,EAAE,CAACjB,KAAD,EAAQF,eAAR,CAVN;AAWHoB,IAAAA,GAAG,EAAEvB,CAAAA,qBAAAA,GAAAA,MAAM,CAACwB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,4BAAA;AAX3B,GAJP,CADF,CAAA;AAmBD;;;;;;"}