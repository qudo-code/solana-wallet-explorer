{"version":3,"file":"createNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/createNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { findAssociatedTokenAccountPda } from '@/plugins/tokenModule';\nimport {\n  BigNumber,\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport {\n  createCreateMasterEditionV3Instruction,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { assertNftWithToken, NftWithToken } from '../models';\nimport { findMasterEditionV2Pda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateNftOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateNftInput = {\n  // Accounts.\n  payer?: Signer; // Defaults to mx.identity().\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  mintAuthority?: Signer; // Defaults to mx.identity(). Only necessary for existing mints.\n\n  // Mint Account.\n  useNewMint?: Signer; // Defaults to new generated Keypair.\n  useExistingMint?: PublicKey;\n\n  // Token Account.\n  tokenOwner?: PublicKey; // Defaults to mx.identity().publicKey.\n  tokenAddress?: PublicKey | Signer;\n\n  // Data.\n  uri: string;\n  name: string;\n  sellerFeeBasisPoints: number;\n  symbol?: string; // Defaults to an empty string.\n  creators?: CreatorInput[]; // Defaults to mx.identity() as a single Creator.\n  isMutable?: boolean; // Defaults to true.\n  maxSupply?: Option<BigNumber>; // Defaults to 0.\n  uses?: Option<Uses>; // Defaults to null.\n  isCollection?: boolean; // Defaults to false.\n  collection?: Option<PublicKey>; // Defaults to null.\n  collectionAuthority?: Option<Signer>; // Defaults to null.\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateNftOutput = {\n  response: SendAndConfirmTransactionResponse;\n  nft: NftWithToken;\n  mintAddress: PublicKey;\n  metadataAddress: PublicKey;\n  masterEditionAddress: PublicKey;\n  tokenAddress: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (\n    operation: CreateNftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const {\n      useNewMint = Keypair.generate(),\n      useExistingMint,\n      tokenOwner = metaplex.identity().publicKey,\n      tokenAddress: tokenSigner,\n      confirmOptions,\n    } = operation.input;\n\n    const mintAddress = useExistingMint ?? useNewMint.publicKey;\n    const tokenAddress = tokenSigner\n      ? toPublicKey(tokenSigner)\n      : findAssociatedTokenAccountPda(mintAddress, tokenOwner);\n    const tokenAccount = await metaplex.rpc().getAccount(tokenAddress);\n    const tokenExists = tokenAccount.exists;\n\n    const builder = await createNftBuilder(metaplex, {\n      ...operation.input,\n      useNewMint,\n      tokenOwner,\n      tokenExists,\n    });\n    scope.throwIfCanceled();\n\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n\n    const nft = await metaplex\n      .nfts()\n      .findByMint({\n        mintAddress: output.mintAddress,\n        tokenAddress: output.tokenAddress,\n      })\n      .run(scope);\n    scope.throwIfCanceled();\n\n    assertNftWithToken(nft);\n    return { ...output, nft };\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateNftBuilderParams = Omit<CreateNftInput, 'confirmOptions'> & {\n  tokenExists?: boolean;\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n  createMasterEditionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateNftBuilderContext = Omit<CreateNftOutput, 'response' | 'nft'>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createNftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateNftBuilderParams\n): Promise<TransactionBuilder<CreateNftBuilderContext>> => {\n  const {\n    useNewMint = Keypair.generate(),\n    payer = metaplex.identity(),\n    updateAuthority = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n    tokenOwner = metaplex.identity().publicKey,\n  } = params;\n\n  const sftBuilder = await metaplex\n    .nfts()\n    .builders()\n    .createSft({\n      ...params,\n      payer,\n      updateAuthority,\n      mintAuthority,\n      freezeAuthority: mintAuthority.publicKey,\n      useNewMint,\n      tokenOwner,\n      tokenAmount: token(1),\n      decimals: 0,\n    });\n\n  const { mintAddress, metadataAddress, tokenAddress } =\n    sftBuilder.getContext();\n  const masterEditionAddress = findMasterEditionV2Pda(mintAddress);\n\n  return (\n    TransactionBuilder.make<CreateNftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintAddress,\n        metadataAddress,\n        masterEditionAddress,\n        tokenAddress: tokenAddress as PublicKey,\n      })\n\n      // Create the mint, the token and the metadata.\n      .add(sftBuilder)\n\n      // Create master edition account (prevents further minting).\n      .add({\n        instruction: createCreateMasterEditionV3Instruction(\n          {\n            edition: masterEditionAddress,\n            mint: mintAddress,\n            updateAuthority: updateAuthority.publicKey,\n            mintAuthority: mintAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata: metadataAddress,\n          },\n          {\n            createMasterEditionArgs: {\n              maxSupply: params.maxSupply === undefined ? 0 : params.maxSupply,\n            },\n          }\n        ),\n        signers: [payer, mintAuthority, updateAuthority],\n        key: params.createMasterEditionInstructionKey ?? 'createMasterEdition',\n      })\n  );\n};\n"],"names":["Key","createNftOperation","useOperation","createNftOperationHandler","handle","operation","metaplex","scope","useNewMint","Keypair","generate","useExistingMint","tokenOwner","identity","publicKey","tokenAddress","tokenSigner","confirmOptions","input","mintAddress","toPublicKey","findAssociatedTokenAccountPda","tokenAccount","rpc","getAccount","tokenExists","exists","builder","createNftBuilder","throwIfCanceled","output","sendAndConfirm","nft","nfts","findByMint","run","assertNftWithToken","params","payer","updateAuthority","mintAuthority","sftBuilder","builders","createSft","freezeAuthority","tokenAmount","token","decimals","metadataAddress","getContext","masterEditionAddress","findMasterEditionV2Pda","TransactionBuilder","make","setFeePayer","setContext","add","instruction","createCreateMasterEditionV3Instruction","edition","mint","metadata","createMasterEditionArgs","maxSupply","undefined","signers","key","createMasterEditionInstructionKey"],"mappings":"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"}