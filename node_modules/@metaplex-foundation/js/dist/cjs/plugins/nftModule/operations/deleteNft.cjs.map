{"version":3,"file":"deleteNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/deleteNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createBurnNftInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../../tokenModule';\nimport { findMasterEditionV2Pda, findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteNftOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const deleteNftOperation = useOperation<DeleteNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteNftOperation = Operation<\n  typeof Key,\n  DeleteNftInput,\n  DeleteNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteNftInput = {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  owner?: Signer; // Defaults to mx.identity().\n  ownerTokenAccount?: PublicKey; // Defaults to associated token account.\n  collection?: PublicKey; // Defaults to undefined. I.e. assuming no collection is assigned to the NFT.\n\n  // Programs.\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteNftOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteNftOperationHandler: OperationHandler<DeleteNftOperation> = {\n  handle: async (\n    operation: DeleteNftOperation,\n    metaplex: Metaplex\n  ): Promise<DeleteNftOutput> => {\n    return deleteNftBuilder(metaplex, operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteNftBuilderParams = Omit<DeleteNftInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteNftBuilder = (\n  metaplex: Metaplex,\n  params: DeleteNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    ownerTokenAccount,\n    collection,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const metadata = findMetadataPda(mintAddress);\n  const edition = findMasterEditionV2Pda(mintAddress);\n  const tokenAddress =\n    ownerTokenAccount ??\n    findAssociatedTokenAccountPda(mintAddress, owner.publicKey);\n\n  return TransactionBuilder.make().add({\n    instruction: createBurnNftInstruction({\n      metadata,\n      owner: owner.publicKey,\n      mint: mintAddress,\n      tokenAccount: tokenAddress,\n      masterEditionAccount: edition,\n      splTokenProgram: tokenProgram,\n      collectionMetadata: collection ? findMetadataPda(collection) : undefined,\n    }),\n    signers: [owner],\n    key: params.instructionKey ?? 'deleteNft',\n  });\n};\n"],"names":["Key","deleteNftOperation","useOperation","deleteNftOperationHandler","handle","operation","metaplex","deleteNftBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","owner","identity","ownerTokenAccount","collection","tokenProgram","TokenProgram","publicKey","metadata","findMetadataPda","edition","findMasterEditionV2Pda","tokenAddress","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createBurnNftInstruction","mint","tokenAccount","masterEditionAccount","splTokenProgram","collectionMetadata","undefined","signers","key","instructionKey"],"mappings":";;;;;;;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,oBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,kBAAkB,GAAGC,sBAAY,CAAqBF,GAArB,EAAvC;AAEP;AACA;AACA;AACA;;AAiCA;AACA;AACA;AACA;AACO,MAAMG,yBAA+D,GAAG;AAC7EC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGuB;AAC7B,IAAA,OAAOC,gBAAgB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAhB,CAA4CC,cAA5C,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;AAT4E;AAa/E;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;MACaH,gBAAgB,GAAG,CAC9BD,QAD8B,EAE9BK,MAF8B,KAGP;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;AAEJC,IAAAA,KAAK,GAAGP,QAAQ,CAACQ,QAAT,EAFJ;IAGJC,iBAHI;IAIJC,UAJI;IAKJC,YAAY,GAAGC,oBAAY,CAACC,SAAAA;AALxB,GAAA,GAMFR,MANJ,CAAA;AAQA,EAAA,MAAMS,QAAQ,GAAGC,oBAAe,CAACT,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMU,OAAO,GAAGC,2BAAsB,CAACX,WAAD,CAAtC,CAAA;AACA,EAAA,MAAMY,YAAY,GAChBT,iBADgB,KAAA,IAAA,IAChBA,iBADgB,KAChBA,KAAAA,CAAAA,GAAAA,iBADgB,GAEhBU,oCAA6B,CAACb,WAAD,EAAcC,KAAK,CAACM,SAApB,CAF/B,CAAA;AAIA,EAAA,OAAOO,qCAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,yCAAwB,CAAC;MACpCV,QADoC;MAEpCP,KAAK,EAAEA,KAAK,CAACM,SAFuB;AAGpCY,MAAAA,IAAI,EAAEnB,WAH8B;AAIpCoB,MAAAA,YAAY,EAAER,YAJsB;AAKpCS,MAAAA,oBAAoB,EAAEX,OALc;AAMpCY,MAAAA,eAAe,EAAEjB,YANmB;AAOpCkB,MAAAA,kBAAkB,EAAEnB,UAAU,GAAGK,oBAAe,CAACL,UAAD,CAAlB,GAAiCoB,SAAAA;AAP3B,KAAD,CADF;IAUnCC,OAAO,EAAE,CAACxB,KAAD,CAV0B;AAWnCyB,IAAAA,GAAG,EAAE3B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC4B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,WAAA;AAXK,GAA9B,CAAP,CAAA;AAaD;;;;;;"}