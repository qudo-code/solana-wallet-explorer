{"version":3,"file":"findNftByMint.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByMint.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport {\n  findAssociatedTokenAccountPda,\n  toMint,\n  toMintAccount,\n  toToken,\n  toTokenAccount,\n} from '../../tokenModule';\nimport {\n  parseOriginalOrPrintEditionAccount,\n  toMetadataAccount,\n} from '../accounts';\nimport {\n  JsonMetadata,\n  Nft,\n  NftWithToken,\n  Sft,\n  SftWithToken,\n  toMetadata,\n  toNft,\n  toNftEdition,\n  toNftWithToken,\n  toSft,\n  toSftWithToken,\n} from '../models';\nimport { findMasterEditionV2Pda, findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMintOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findNftByMintOperation = useOperation<FindNftByMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByMintOperation = Operation<\n  typeof Key,\n  FindNftByMintInput,\n  FindNftByMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByMintInput = {\n  mintAddress: PublicKey;\n  tokenAddress?: PublicKey;\n  tokenOwner?: PublicKey;\n  loadJsonMetadata?: boolean;\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByMintOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByMintOperationHandler: OperationHandler<FindNftByMintOperation> =\n  {\n    handle: async (\n      operation: FindNftByMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftByMintOutput> => {\n      const {\n        mintAddress,\n        tokenAddress,\n        tokenOwner,\n        loadJsonMetadata = true,\n        commitment,\n      } = operation.input;\n\n      const associatedTokenAddress = tokenOwner\n        ? findAssociatedTokenAccountPda(mintAddress, tokenOwner)\n        : undefined;\n      const accountAddresses = [\n        mintAddress,\n        findMetadataPda(mintAddress),\n        findMasterEditionV2Pda(mintAddress),\n        tokenAddress ?? associatedTokenAddress,\n      ].filter((address): address is PublicKey => !!address);\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(accountAddresses, commitment);\n      scope.throwIfCanceled();\n\n      const mint = toMint(toMintAccount(accounts[0]));\n      let metadata = toMetadata(toMetadataAccount(accounts[1]));\n      const editionAccount = parseOriginalOrPrintEditionAccount(accounts[2]);\n      const token = accounts[3] ? toToken(toTokenAccount(accounts[3])) : null;\n\n      if (loadJsonMetadata) {\n        try {\n          const json = await metaplex\n            .storage()\n            .downloadJson<JsonMetadata>(metadata.uri, scope);\n          metadata = { ...metadata, jsonLoaded: true, json };\n        } catch (error) {\n          metadata = { ...metadata, jsonLoaded: true, json: null };\n        }\n      }\n\n      const isNft =\n        editionAccount.exists &&\n        mint.mintAuthorityAddress &&\n        mint.mintAuthorityAddress.equals(editionAccount.publicKey);\n\n      if (isNft) {\n        const edition = toNftEdition(editionAccount);\n        return token\n          ? toNftWithToken(metadata, mint, edition, token)\n          : toNft(metadata, mint, edition);\n      }\n\n      return token\n        ? toSftWithToken(metadata, mint, token)\n        : toSft(metadata, mint);\n    },\n  };\n"],"names":["Key","findNftByMintOperation","useOperation","findNftByMintOperationHandler","handle","operation","metaplex","scope","mintAddress","tokenAddress","tokenOwner","loadJsonMetadata","commitment","input","associatedTokenAddress","findAssociatedTokenAccountPda","undefined","accountAddresses","findMetadataPda","findMasterEditionV2Pda","filter","address","accounts","rpc","getMultipleAccounts","throwIfCanceled","mint","toMint","toMintAccount","metadata","toMetadata","toMetadataAccount","editionAccount","parseOriginalOrPrintEditionAccount","token","toToken","toTokenAccount","json","storage","downloadJson","uri","jsonLoaded","error","isNft","exists","mintAuthorityAddress","equals","publicKey","edition","toNftEdition","toNftWithToken","toNft","toSftWithToken","toSft"],"mappings":"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"}