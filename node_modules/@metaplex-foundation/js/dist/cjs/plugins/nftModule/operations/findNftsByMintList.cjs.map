{"version":3,"file":"findNftsByMintList.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByMintList.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope, GmaBuilder } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport { findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByMintListOperation =\n  useOperation<FindNftsByMintListOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByMintListOperation = Operation<\n  typeof Key,\n  FindNftsByMintListInput,\n  FindNftsByMintListOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByMintListInput = {\n  mints: PublicKey[];\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByMintListOutput = (Metadata | Nft | Sft | null)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByMintListOperationHandler: OperationHandler<FindNftsByMintListOperation> =\n  {\n    handle: async (\n      operation: FindNftsByMintListOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByMintListOutput> => {\n      const { mints, commitment } = operation.input;\n      const metadataPdas = mints.map((mint) => findMetadataPda(mint));\n      const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n        commitment,\n      }).get();\n      scope.throwIfCanceled();\n\n      return metadataInfos.map<Metadata | null>((account) => {\n        if (!account.exists) {\n          return null;\n        }\n\n        try {\n          return toMetadata(toMetadataAccount(account));\n        } catch (error) {\n          return null;\n        }\n      });\n    },\n  };\n"],"names":["Key","findNftsByMintListOperation","useOperation","findNftsByMintListOperationHandler","handle","operation","metaplex","scope","mints","commitment","input","metadataPdas","map","mint","findMetadataPda","metadataInfos","GmaBuilder","make","get","throwIfCanceled","account","exists","toMetadata","toMetadataAccount","error"],"mappings":";;;;;;;;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,sBAAY,CAA8BF,GAA9B,EADP;AAGP;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIgC;IACtC,MAAM;MAAEC,KAAF;AAASC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAxC,CAAA;AACA,IAAA,MAAMC,YAAY,GAAGH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAUC,oBAAe,CAACD,IAAD,CAAnC,CAArB,CAAA;IACA,MAAME,aAAa,GAAG,MAAMC,qBAAU,CAACC,IAAX,CAAgBX,QAAhB,EAA0BK,YAA1B,EAAwC;AAClEF,MAAAA,UAAAA;KAD0B,CAAA,CAEzBS,GAFyB,EAA5B,CAAA;AAGAX,IAAAA,KAAK,CAACY,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOJ,aAAa,CAACH,GAAd,CAAoCQ,OAAD,IAAa;AACrD,MAAA,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;AACnB,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;;MAED,IAAI;AACF,QAAA,OAAOC,mBAAU,CAACC,0BAAiB,CAACH,OAAD,CAAlB,CAAjB,CAAA;OADF,CAEE,OAAOI,KAAP,EAAc;AACd,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;AACF,KAVM,CAAP,CAAA;AAWD,GAAA;AAxBH;;;;;"}