{"version":3,"file":"printNewEdition.cjs","sources":["../../../../../src/plugins/nftModule/operations/printNewEdition.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  Signer,\n  toBigNumber,\n  token,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { createMintNewEditionFromMasterEditionViaTokenInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { toOriginalEditionAccount } from '../accounts';\nimport {\n  assertNftWithToken,\n  NftWithToken,\n  toNftOriginalEdition,\n} from '../models';\nimport {\n  findEditionMarkerPda,\n  findEditionPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type PrintNewEditionInput = {\n  originalMint: PublicKey;\n  originalTokenAccountOwner?: Signer; // Defaults to mx.identity().\n  originalTokenAccount?: PublicKey; // Defaults to associated token address.\n  newMint?: Signer; // Defaults to Keypair.generate().\n  newUpdateAuthority?: PublicKey; // Defaults to mx.identity().\n  newOwner?: PublicKey; // Defaults to mx.identity().\n  newTokenAccount?: Signer; // Defaults to creating an associated token account.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type PrintNewEditionOutput = {\n  response: SendAndConfirmTransactionResponse;\n  nft: NftWithToken;\n  mintSigner: Signer;\n  metadataAddress: PublicKey;\n  editionAddress: PublicKey;\n  tokenAddress: PublicKey;\n  updatedSupply: BigNumber;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (\n      operation: PrintNewEditionOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const originalEditionAccount = await metaplex\n        .rpc()\n        .getAccount(findMasterEditionV2Pda(operation.input.originalMint));\n      scope.throwIfCanceled();\n\n      const originalEdition = toNftOriginalEdition(\n        toOriginalEditionAccount(originalEditionAccount)\n      );\n      const builder = await printNewEditionBuilder(metaplex, {\n        ...operation.input,\n        originalSupply: originalEdition.supply,\n      });\n      scope.throwIfCanceled();\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n      scope.throwIfCanceled();\n\n      const nft = await metaplex\n        .nfts()\n        .findByMint({\n          mintAddress: output.mintSigner.publicKey,\n          tokenAddress: output.tokenAddress,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      assertNftWithToken(nft);\n      return { ...output, nft };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type PrintNewEditionBuilderParams = Omit<\n  PrintNewEditionInput,\n  'confirmOptions'\n> & {\n  originalSupply: BigNumber;\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  printNewEditionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type PrintNewEditionBuilderContext = Omit<\n  PrintNewEditionOutput,\n  'response' | 'nft'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const {\n    originalMint,\n    newMint = Keypair.generate(),\n    newUpdateAuthority = metaplex.identity().publicKey,\n    newOwner = metaplex.identity().publicKey,\n    newTokenAccount,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  // Original NFT.\n  const originalMetadataAddress = findMetadataPda(originalMint);\n  const originalEditionAddress = findMasterEditionV2Pda(originalMint);\n  const edition = toBigNumber(params.originalSupply.addn(1));\n  const originalEditionMarkPda = findEditionMarkerPda(originalMint, edition);\n\n  // New NFT.\n  const newMintAuthority = Keypair.generate(); // Will be overwritten by edition PDA.\n  const newMetadataAddress = findMetadataPda(newMint.publicKey);\n  const newEditionAddress = findEditionPda(newMint.publicKey);\n  const sharedAccounts = {\n    newMetadata: newMetadataAddress,\n    newEdition: newEditionAddress,\n    masterEdition: originalEditionAddress,\n    newMint: newMint.publicKey,\n    editionMarkPda: originalEditionMarkPda,\n    newMintAuthority: newMintAuthority.publicKey,\n    payer: payer.publicKey,\n    newMetadataUpdateAuthority: newUpdateAuthority,\n    metadata: originalMetadataAddress,\n  };\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: newMintAuthority,\n      freezeAuthority: newMintAuthority.publicKey,\n      owner: newOwner,\n      token: newTokenAccount,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n  const originalTokenAccountOwner =\n    params.originalTokenAccountOwner ?? metaplex.identity();\n  const originalTokenAccount =\n    params.originalTokenAccount ??\n    findAssociatedTokenAccountPda(\n      originalMint,\n      originalTokenAccountOwner.publicKey\n    );\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        metadataAddress: newMetadataAddress,\n        editionAddress: newEditionAddress,\n        tokenAddress,\n        updatedSupply: edition,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add({\n        instruction: createMintNewEditionFromMasterEditionViaTokenInstruction(\n          {\n            ...sharedAccounts,\n            tokenAccountOwner: originalTokenAccountOwner.publicKey,\n            tokenAccount: originalTokenAccount,\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n        ),\n        signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],\n        key: printNewEditionInstructionKey,\n      })\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","scope","originalEditionAccount","rpc","getAccount","findMasterEditionV2Pda","input","originalMint","throwIfCanceled","originalEdition","toNftOriginalEdition","toOriginalEditionAccount","builder","printNewEditionBuilder","originalSupply","supply","output","sendAndConfirm","confirmOptions","nft","nfts","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","run","assertNftWithToken","params","newMint","Keypair","generate","newUpdateAuthority","identity","newOwner","newTokenAccount","payer","tokenProgram","associatedTokenProgram","printNewEditionInstructionKey","originalMetadataAddress","findMetadataPda","originalEditionAddress","edition","toBigNumber","addn","originalEditionMarkPda","findEditionMarkerPda","newMintAuthority","newMetadataAddress","newEditionAddress","findEditionPda","sharedAccounts","newMetadata","newEdition","masterEdition","editionMarkPda","newMetadataUpdateAuthority","metadata","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mint","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","originalTokenAccountOwner","originalTokenAccount","findAssociatedTokenAccountPda","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","editionAddress","updatedSupply","add","instruction","createMintNewEditionFromMasterEditionViaTokenInstruction","tokenAccountOwner","tokenAccount","mintNewEditionFromMasterEditionViaTokenArgs","signers","key"],"mappings":"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"}