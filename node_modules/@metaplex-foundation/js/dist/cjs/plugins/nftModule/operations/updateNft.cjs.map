{"version":3,"file":"updateNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/updateNft.ts"],"sourcesContent":["import { NoInstructionsToSendError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Option, TransactionBuilder } from '@/utils';\nimport {\n  createUpdateMetadataAccountV2Instruction,\n  UpdateMetadataAccountArgsV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Sft } from '../models';\nimport { findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateNftInput = {\n  // Accounts and models.\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >;\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  newUpdateAuthority?: PublicKey;\n\n  // Data.\n  name?: string;\n  symbol?: string;\n  uri?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: CreatorInput[];\n  primarySaleHappened?: boolean;\n  isMutable?: boolean;\n  uses?: Option<Uses>;\n  collection?: Option<PublicKey>;\n  collectionAuthority?: Option<Signer>;\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n  oldCollectionIsSized?: boolean; // Defaults to true.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateNftOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  updateMetadataInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams\n): TransactionBuilder => {\n  const { nftOrSft, updateAuthority = metaplex.identity() } = params;\n  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);\n  const updateInstructionData = toInstructionData(nftOrSft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  const isRemovingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !params.collection;\n  const isOverridingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !!params.collection &&\n    !params.collection.equals(nftOrSft.collection.address);\n  const shouldUnverifyCurrentCollection =\n    isRemovingVerifiedCollection || isOverridingVerifiedCollection;\n\n  const creatorsInput: CreatorInput[] = params.creators ?? nftOrSft.creators;\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      const currentCreator = nftOrSft.creators.find(({ address }) =>\n        address.equals(creator.address)\n      );\n      const currentlyVerified = currentCreator?.verified ?? false;\n      return !!creator.authority && !currentlyVerified;\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator({\n        mintAddress: nftOrSft.address,\n        creator: creator.authority,\n      });\n    });\n\n  return (\n    TransactionBuilder.make()\n\n      // Unverify current collection before overriding it.\n      // Otherwise, the previous collection size will not be properly decremented.\n      .when(shouldUnverifyCurrentCollection, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .unverifyCollection({\n              mintAddress: nftOrSft.address,\n              collectionMintAddress: nftOrSft.collection?.address as PublicKey,\n              collectionAuthority: updateAuthority,\n              isSizedCollection: params.oldCollectionIsSized ?? true,\n            })\n        )\n      )\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateMetadataAccountV2Instruction(\n            {\n              metadata: findMetadataPda(nftOrSft.address),\n              updateAuthority: updateAuthority.publicKey,\n            },\n            {\n              updateMetadataAccountArgsV2: updateInstructionData,\n            }\n          ),\n          signers: [updateAuthority],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection({\n              mintAddress: nftOrSft.address,\n              collectionMintAddress: params.collection as PublicKey,\n              collectionAuthority: params.collectionAuthority as Signer,\n              isDelegated: params.collectionAuthorityIsDelegated ?? false,\n              isSizedCollection: params.collectionIsSized ?? true,\n            })\n        )\n      )\n  );\n};\n\nconst toInstructionData = (\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >,\n  input: Partial<UpdateNftInput> = {}\n): UpdateMetadataAccountArgsV2 => {\n  const creators =\n    input.creators === undefined\n      ? nftOrSft.creators\n      : input.creators.map((creator) => {\n          const currentCreator = nftOrSft.creators.find(({ address }) =>\n            address.equals(creator.address)\n          );\n          return {\n            ...creator,\n            verified: currentCreator?.verified ?? false,\n          };\n        });\n\n  const currentCollection = nftOrSft.collection\n    ? { ...nftOrSft.collection, key: nftOrSft.collection.address }\n    : null;\n  const newCollection = input.collection\n    ? { key: input.collection, verified: false }\n    : null;\n\n  return {\n    updateAuthority: input.newUpdateAuthority ?? null,\n    primarySaleHappened: input.primarySaleHappened ?? null,\n    isMutable: input.isMutable ?? null,\n    data: {\n      name: input.name ?? nftOrSft.name,\n      symbol: input.symbol ?? nftOrSft.symbol,\n      uri: input.uri ?? nftOrSft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,\n      creators: creators.length > 0 ? creators : null,\n      uses: input.uses === undefined ? nftOrSft.uses : input.uses,\n      collection:\n        input.collection === undefined ? currentCollection : newCollection,\n    },\n  };\n};\n"],"names":["Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","builder","updateNftBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","nftOrSft","updateAuthority","identity","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","isRemovingVerifiedCollection","collection","verified","isOverridingVerifiedCollection","equals","address","shouldUnverifyCurrentCollection","creatorsInput","creators","verifyAdditionalCreatorInstructions","filter","creator","currentCreator","find","currentlyVerified","authority","map","nfts","builders","verifyCreator","mintAddress","TransactionBuilder","make","when","add","unverifyCollection","collectionMintAddress","collectionAuthority","isSizedCollection","oldCollectionIsSized","instruction","createUpdateMetadataAccountV2Instruction","metadata","findMetadataPda","publicKey","updateMetadataAccountArgsV2","signers","key","updateMetadataInstructionKey","verifyCollection","isDelegated","collectionAuthorityIsDelegated","collectionIsSized","undefined","currentCollection","newCollection","newUpdateAuthority","primarySaleHappened","isMutable","data","name","symbol","uri","sellerFeeBasisPoints","length","uses"],"mappings":"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"}