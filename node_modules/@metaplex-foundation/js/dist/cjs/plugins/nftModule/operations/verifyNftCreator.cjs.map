{"version":3,"file":"verifyNftCreator.cjs","sources":["../../../../../src/plugins/nftModule/operations/verifyNftCreator.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createSignMetadataInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'VerifyNftCreatorOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const verifyNftCreatorOperation =\n  useOperation<VerifyNftCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type VerifyNftCreatorOperation = Operation<\n  typeof Key,\n  VerifyNftCreatorInput,\n  VerifyNftCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type VerifyNftCreatorInput = {\n  // Accounts.\n  mintAddress: PublicKey;\n  creator?: Signer; // Defaults to mx.identity().\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type VerifyNftCreatorOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const verifyNftCreatorOperationHandler: OperationHandler<VerifyNftCreatorOperation> =\n  {\n    handle: async (\n      operation: VerifyNftCreatorOperation,\n      metaplex: Metaplex\n    ): Promise<VerifyNftCreatorOutput> => {\n      return verifyNftCreatorBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type VerifyNftCreatorBuilderParams = Omit<\n  VerifyNftCreatorInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const verifyNftCreatorBuilder = (\n  metaplex: Metaplex,\n  params: VerifyNftCreatorBuilderParams\n): TransactionBuilder => {\n  const { mintAddress, creator = metaplex.identity() } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Verify the creator.\n      .add({\n        instruction: createSignMetadataInstruction({\n          metadata: findMetadataPda(mintAddress),\n          creator: creator.publicKey,\n        }),\n        signers: [creator],\n        key: params.instructionKey ?? 'verifyCreator',\n      })\n  );\n};\n"],"names":["Key","verifyNftCreatorOperation","useOperation","verifyNftCreatorOperationHandler","handle","operation","metaplex","verifyNftCreatorBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","creator","identity","TransactionBuilder","make","add","instruction","createSignMetadataInstruction","metadata","findMetadataPda","publicKey","signers","key","instructionKey"],"mappings":";;;;;;;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,yBAAyB,GACpCC,sBAAY,CAA4BF,GAA5B,EADP;AAGP;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAG8B;AACpC,IAAA,OAAOC,uBAAuB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAvB,CAAmDC,cAAnD,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,uBAAuB,GAAG,CACrCD,QADqC,EAErCK,MAFqC,KAGd;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IAAEC,WAAF;IAAeC,OAAO,GAAGP,QAAQ,CAACQ,QAAT,EAAA;AAAzB,GAAA,GAAiDH,MAAvD,CAAA;EAEA,OACEI,qCAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,8CAA6B,CAAC;AACzCC,MAAAA,QAAQ,EAAEC,oBAAe,CAACT,WAAD,CADgB;MAEzCC,OAAO,EAAEA,OAAO,CAACS,SAAAA;AAFwB,KAAD,CADvC;IAKHC,OAAO,EAAE,CAACV,OAAD,CALN;AAMHW,IAAAA,GAAG,EAAEb,CAAAA,qBAAAA,GAAAA,MAAM,CAACc,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAN3B,GAHP,CADF,CAAA;AAaD;;;;;;"}