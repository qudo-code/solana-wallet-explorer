{"version":3,"file":"Mint.cjs","sources":["../../../../../src/plugins/tokenModule/models/Mint.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { amount, SplTokenCurrency, SplTokenAmount } from '@/types';\nimport { assert, Option } from '@/utils';\nimport { MintAccount } from '../accounts';\nimport { WRAPPED_SOL_MINT } from '../constants';\n\n/** @group Models */\nexport type Mint = {\n  readonly model: 'mint';\n  readonly address: PublicKey;\n  readonly mintAuthorityAddress: Option<PublicKey>;\n  readonly freezeAuthorityAddress: Option<PublicKey>;\n  readonly decimals: number;\n  readonly supply: SplTokenAmount;\n  readonly isWrappedSol: boolean;\n  readonly currency: SplTokenCurrency;\n};\n\n/** @group Model Helpers */\nexport const isMint = (value: any): value is Mint =>\n  typeof value === 'object' && value.model === 'mint';\n\n/** @group Model Helpers */\nexport function assertMint(value: any): asserts value is Mint {\n  assert(isMint(value), `Expected Mint model`);\n}\n\n/** @group Model Helpers */\nexport const toMint = (account: MintAccount): Mint => {\n  const isWrappedSol = account.publicKey.equals(WRAPPED_SOL_MINT);\n  const currency: SplTokenCurrency = {\n    symbol: isWrappedSol ? 'SOL' : 'Token',\n    decimals: account.data.decimals,\n    namespace: 'spl-token',\n  };\n\n  return {\n    model: 'mint',\n    address: account.publicKey,\n    mintAuthorityAddress: account.data.mintAuthorityOption\n      ? account.data.mintAuthority\n      : null,\n    freezeAuthorityAddress: account.data.freezeAuthorityOption\n      ? account.data.freezeAuthority\n      : null,\n    decimals: account.data.decimals,\n    supply: amount(account.data.supply.toString(), currency),\n    isWrappedSol,\n    currency,\n  };\n};\n"],"names":["isMint","value","model","assertMint","assert","toMint","account","isWrappedSol","publicKey","equals","WRAPPED_SOL_MINT","currency","symbol","decimals","data","namespace","address","mintAuthorityAddress","mintAuthorityOption","mintAuthority","freezeAuthorityAddress","freezeAuthorityOption","freezeAuthority","supply","amount","toString"],"mappings":";;;;;;;;AAMA;;AAYA;AACaA,MAAAA,MAAM,GAAIC,KAAD,IACpB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,OADxC;AAGP;;AACO,SAASC,UAAT,CAAoBF,KAApB,EAAuD;AAC5DG,EAAAA,iBAAM,CAACJ,MAAM,CAACC,KAAD,CAAP,EAAiB,qBAAjB,CAAN,CAAA;AACD,CAAA;AAED;;AACaI,MAAAA,MAAM,GAAIC,OAAD,IAAgC;EACpD,MAAMC,YAAY,GAAGD,OAAO,CAACE,SAAR,CAAkBC,MAAlB,CAAyBC,0BAAzB,CAArB,CAAA;AACA,EAAA,MAAMC,QAA0B,GAAG;AACjCC,IAAAA,MAAM,EAAEL,YAAY,GAAG,KAAH,GAAW,OADE;AAEjCM,IAAAA,QAAQ,EAAEP,OAAO,CAACQ,IAAR,CAAaD,QAFU;AAGjCE,IAAAA,SAAS,EAAE,WAAA;GAHb,CAAA;EAMA,OAAO;AACLb,IAAAA,KAAK,EAAE,MADF;IAELc,OAAO,EAAEV,OAAO,CAACE,SAFZ;AAGLS,IAAAA,oBAAoB,EAAEX,OAAO,CAACQ,IAAR,CAAaI,mBAAb,GAClBZ,OAAO,CAACQ,IAAR,CAAaK,aADK,GAElB,IALC;AAMLC,IAAAA,sBAAsB,EAAEd,OAAO,CAACQ,IAAR,CAAaO,qBAAb,GACpBf,OAAO,CAACQ,IAAR,CAAaQ,eADO,GAEpB,IARC;AASLT,IAAAA,QAAQ,EAAEP,OAAO,CAACQ,IAAR,CAAaD,QATlB;AAULU,IAAAA,MAAM,EAAEC,aAAM,CAAClB,OAAO,CAACQ,IAAR,CAAaS,MAAb,CAAoBE,QAApB,EAAD,EAAiCd,QAAjC,CAVT;IAWLJ,YAXK;AAYLI,IAAAA,QAAAA;GAZF,CAAA;AAcD;;;;;;"}