{"version":3,"file":"Token.cjs","sources":["../../../../../src/plugins/tokenModule/models/Token.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { amount, Pda, SplTokenAmount, token } from '@/types';\nimport { assert, Option } from '@/utils';\nimport { TokenAccount } from '../accounts';\nimport { Mint } from './Mint';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { AccountState } from '@solana/spl-token';\n\n/** @group Models */\nexport type Token = {\n  readonly model: 'token';\n  readonly address: PublicKey | Pda;\n  readonly isAssociatedToken: boolean;\n  readonly mintAddress: PublicKey;\n  readonly ownerAddress: PublicKey;\n  readonly amount: SplTokenAmount;\n  readonly closeAuthorityAddress: Option<PublicKey>;\n  readonly delegateAddress: Option<PublicKey>;\n  readonly delegateAmount: SplTokenAmount;\n  readonly state: AccountState;\n};\n\n/** @group Model Helpers */\nexport const isToken = (value: any): value is Token =>\n  typeof value === 'object' && value.model === 'token';\n\n/** @group Model Helpers */\nexport function assertToken(value: any): asserts value is Token {\n  assert(isToken(value), `Expected Token model`);\n}\n\n/** @group Model Helpers */\nexport const toToken = (account: TokenAccount): Token => {\n  const associatedTokenAddress = findAssociatedTokenAccountPda(\n    account.data.mint,\n    account.data.owner\n  );\n  const isAssociatedToken = associatedTokenAddress.equals(account.publicKey);\n\n  return {\n    model: 'token',\n    address: isAssociatedToken ? associatedTokenAddress : account.publicKey,\n    isAssociatedToken,\n    mintAddress: account.data.mint,\n    ownerAddress: account.data.owner,\n    amount: token(account.data.amount.toString()),\n    closeAuthorityAddress: account.data.closeAuthorityOption\n      ? account.data.closeAuthority\n      : null,\n    delegateAddress: account.data.delegateOption ? account.data.delegate : null,\n    delegateAmount: token(account.data.delegatedAmount.toString()),\n    state: account.data.state,\n  };\n};\n\n/** @group Models */\nexport type TokenWithMint = Omit<Token, 'model' | 'mintAddress'> &\n  Readonly<{\n    model: 'tokenWithMint';\n    mint: Mint;\n  }>;\n\n/** @group Model Helpers */\nexport const isTokenWithMint = (value: any): value is TokenWithMint =>\n  typeof value === 'object' && value.model === 'tokenWithMint';\n\n/** @group Model Helpers */\nexport function assertTokenWithMint(\n  value: any\n): asserts value is TokenWithMint {\n  assert(isTokenWithMint(value), `Expected TokenWithMint model`);\n}\n\n/** @group Model Helpers */\nexport const toTokenWithMint = (\n  tokenAccount: TokenAccount,\n  mintModel: Mint\n): TokenWithMint => {\n  const token = toToken(tokenAccount);\n  return {\n    ...token,\n    model: 'tokenWithMint',\n    mint: mintModel,\n    amount: amount(token.amount.basisPoints, mintModel.currency),\n    delegateAmount: amount(\n      token.delegateAmount.basisPoints,\n      mintModel.currency\n    ),\n  };\n};\n"],"names":["isToken","value","model","assertToken","assert","toToken","account","associatedTokenAddress","findAssociatedTokenAccountPda","data","mint","owner","isAssociatedToken","equals","publicKey","address","mintAddress","ownerAddress","amount","token","toString","closeAuthorityAddress","closeAuthorityOption","closeAuthority","delegateAddress","delegateOption","delegate","delegateAmount","delegatedAmount","state","isTokenWithMint","assertTokenWithMint","toTokenWithMint","tokenAccount","mintModel","basisPoints","currency"],"mappings":";;;;;;;;AAsBA;AACaA,MAAAA,OAAO,GAAIC,KAAD,IACrB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,QADxC;AAGP;;AACO,SAASC,WAAT,CAAqBF,KAArB,EAAyD;AAC9DG,EAAAA,iBAAM,CAACJ,OAAO,CAACC,KAAD,CAAR,EAAkB,sBAAlB,CAAN,CAAA;AACD,CAAA;AAED;;AACaI,MAAAA,OAAO,GAAIC,OAAD,IAAkC;AACvD,EAAA,MAAMC,sBAAsB,GAAGC,kCAA6B,CAC1DF,OAAO,CAACG,IAAR,CAAaC,IAD6C,EAE1DJ,OAAO,CAACG,IAAR,CAAaE,KAF6C,CAA5D,CAAA;EAIA,MAAMC,iBAAiB,GAAGL,sBAAsB,CAACM,MAAvB,CAA8BP,OAAO,CAACQ,SAAtC,CAA1B,CAAA;EAEA,OAAO;AACLZ,IAAAA,KAAK,EAAE,OADF;AAELa,IAAAA,OAAO,EAAEH,iBAAiB,GAAGL,sBAAH,GAA4BD,OAAO,CAACQ,SAFzD;IAGLF,iBAHK;AAILI,IAAAA,WAAW,EAAEV,OAAO,CAACG,IAAR,CAAaC,IAJrB;AAKLO,IAAAA,YAAY,EAAEX,OAAO,CAACG,IAAR,CAAaE,KALtB;IAMLO,MAAM,EAAEC,YAAK,CAACb,OAAO,CAACG,IAAR,CAAaS,MAAb,CAAoBE,QAApB,EAAD,CANR;AAOLC,IAAAA,qBAAqB,EAAEf,OAAO,CAACG,IAAR,CAAaa,oBAAb,GACnBhB,OAAO,CAACG,IAAR,CAAac,cADM,GAEnB,IATC;AAULC,IAAAA,eAAe,EAAElB,OAAO,CAACG,IAAR,CAAagB,cAAb,GAA8BnB,OAAO,CAACG,IAAR,CAAaiB,QAA3C,GAAsD,IAVlE;IAWLC,cAAc,EAAER,YAAK,CAACb,OAAO,CAACG,IAAR,CAAamB,eAAb,CAA6BR,QAA7B,EAAD,CAXhB;AAYLS,IAAAA,KAAK,EAAEvB,OAAO,CAACG,IAAR,CAAaoB,KAAAA;GAZtB,CAAA;AAcD,EArBM;AAuBP;;AAOA;AACaC,MAAAA,eAAe,GAAI7B,KAAD,IAC7B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,gBADxC;AAGP;;AACO,SAAS6B,mBAAT,CACL9B,KADK,EAE2B;AAChCG,EAAAA,iBAAM,CAAC0B,eAAe,CAAC7B,KAAD,CAAhB,EAA0B,8BAA1B,CAAN,CAAA;AACD,CAAA;AAED;;MACa+B,eAAe,GAAG,CAC7BC,YAD6B,EAE7BC,SAF6B,KAGX;AAClB,EAAA,MAAMf,KAAK,GAAGd,OAAO,CAAC4B,YAAD,CAArB,CAAA;EACA,OAAO,EACL,GAAGd,KADE;AAELjB,IAAAA,KAAK,EAAE,eAFF;AAGLQ,IAAAA,IAAI,EAAEwB,SAHD;AAILhB,IAAAA,MAAM,EAAEA,aAAM,CAACC,KAAK,CAACD,MAAN,CAAaiB,WAAd,EAA2BD,SAAS,CAACE,QAArC,CAJT;IAKLT,cAAc,EAAET,aAAM,CACpBC,KAAK,CAACQ,cAAN,CAAqBQ,WADD,EAEpBD,SAAS,CAACE,QAFU,CAAA;GALxB,CAAA;AAUD;;;;;;;;;"}