{"version":3,"file":"Account.cjs","sources":["../../../src/types/Account.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { AccountNotFoundError, UnexpectedAccountError } from '@/errors';\n\nexport type Account<T> = {\n  readonly publicKey: PublicKey;\n  readonly executable: boolean;\n  readonly owner: PublicKey;\n  readonly lamports: number;\n  readonly data: T;\n  readonly rentEpoch?: number;\n};\n\nexport type MaybeAccount<T> =\n  | (Account<T> & { readonly exists: true })\n  | { readonly publicKey: PublicKey; readonly exists: false };\n\nexport type UnparsedAccount = Account<Buffer>;\nexport type UnparsedMaybeAccount = MaybeAccount<Buffer>;\n\nexport type AccountParser<T> = {\n  name: string;\n  deserialize: (data: Buffer, offset?: number) => [T, number];\n};\n\nexport type AccountParsingFunction<T> = {\n  (unparsedAccount: UnparsedAccount): Account<T>;\n  (unparsedAccount: UnparsedMaybeAccount): MaybeAccount<T>;\n};\n\nexport type AccountParsingAndAssertingFunction<T> = (\n  unparsedAccount: UnparsedAccount | UnparsedMaybeAccount,\n  solution?: string\n) => Account<T>;\n\nexport function parseAccount<T>(\n  account: UnparsedMaybeAccount,\n  parser: AccountParser<T>\n): MaybeAccount<T>;\nexport function parseAccount<T>(\n  account: UnparsedAccount,\n  parser: AccountParser<T>\n): Account<T>;\nexport function parseAccount<T>(\n  account: UnparsedAccount | UnparsedMaybeAccount,\n  parser: AccountParser<T>\n): Account<T> | MaybeAccount<T> {\n  if ('exists' in account && !account.exists) {\n    return account;\n  }\n  return getAccountParsingFunction(parser)(account);\n}\n\nexport function getAccountParsingFunction<T>(\n  parser: AccountParser<T>\n): AccountParsingFunction<T> {\n  function parse(account: UnparsedAccount): Account<T>;\n  function parse(account: UnparsedMaybeAccount): MaybeAccount<T>;\n  function parse(\n    account: UnparsedAccount | UnparsedMaybeAccount\n  ): Account<T> | MaybeAccount<T> {\n    if ('exists' in account && !account.exists) {\n      return account;\n    }\n\n    try {\n      const data: T = parser.deserialize(account.data)[0];\n      return { ...account, data };\n    } catch (error) {\n      throw new UnexpectedAccountError(account.publicKey, parser.name, {\n        cause: error as Error,\n      });\n    }\n  }\n\n  return parse;\n}\n\nexport function toAccount<T>(\n  account: UnparsedAccount | UnparsedMaybeAccount,\n  parser: AccountParser<T>,\n  solution?: string\n): Account<T> {\n  if ('exists' in account) {\n    assertAccountExists(account, parser.name, solution);\n  }\n  return getAccountParsingFunction(parser)(account);\n}\n\nexport function getAccountParsingAndAssertingFunction<T>(\n  parser: AccountParser<T>\n): AccountParsingAndAssertingFunction<T> {\n  const parse = getAccountParsingFunction(parser);\n\n  return (\n    unparsedAccount: UnparsedAccount | UnparsedMaybeAccount,\n    solution?: string\n  ) => {\n    if ('exists' in unparsedAccount) {\n      assertAccountExists(unparsedAccount, parser.name, solution);\n    }\n\n    return parse(unparsedAccount);\n  };\n}\n\nexport function assertAccountExists<T>(\n  account: MaybeAccount<T>,\n  name?: string,\n  solution?: string\n): asserts account is Account<T> & { exists: true } {\n  if (!account.exists) {\n    throw new AccountNotFoundError(account.publicKey, name, { solution });\n  }\n}\n"],"names":["parseAccount","account","parser","exists","getAccountParsingFunction","parse","data","deserialize","error","UnexpectedAccountError","publicKey","name","cause","toAccount","solution","assertAccountExists","getAccountParsingAndAssertingFunction","unparsedAccount","AccountNotFoundError"],"mappings":";;;;;;AA2CO,SAASA,YAAT,CACLC,OADK,EAELC,MAFK,EAGyB;AAC9B,EAAA,IAAI,YAAYD,OAAZ,IAAuB,CAACA,OAAO,CAACE,MAApC,EAA4C;AAC1C,IAAA,OAAOF,OAAP,CAAA;AACD,GAAA;;AACD,EAAA,OAAOG,yBAAyB,CAACF,MAAD,CAAzB,CAAkCD,OAAlC,CAAP,CAAA;AACD,CAAA;AAEM,SAASG,yBAAT,CACLF,MADK,EAEsB;EAG3B,SAASG,KAAT,CACEJ,OADF,EAEgC;AAC9B,IAAA,IAAI,YAAYA,OAAZ,IAAuB,CAACA,OAAO,CAACE,MAApC,EAA4C;AAC1C,MAAA,OAAOF,OAAP,CAAA;AACD,KAAA;;IAED,IAAI;MACF,MAAMK,IAAO,GAAGJ,MAAM,CAACK,WAAP,CAAmBN,OAAO,CAACK,IAA3B,CAAiC,CAAA,CAAjC,CAAhB,CAAA;MACA,OAAO,EAAE,GAAGL,OAAL;AAAcK,QAAAA,IAAAA;OAArB,CAAA;KAFF,CAGE,OAAOE,KAAP,EAAc;MACd,MAAM,IAAIC,+BAAJ,CAA2BR,OAAO,CAACS,SAAnC,EAA8CR,MAAM,CAACS,IAArD,EAA2D;AAC/DC,QAAAA,KAAK,EAAEJ,KAAAA;AADwD,OAA3D,CAAN,CAAA;AAGD,KAAA;AACF,GAAA;;AAED,EAAA,OAAOH,KAAP,CAAA;AACD,CAAA;AAEM,SAASQ,SAAT,CACLZ,OADK,EAELC,MAFK,EAGLY,QAHK,EAIO;EACZ,IAAI,QAAA,IAAYb,OAAhB,EAAyB;IACvBc,mBAAmB,CAACd,OAAD,EAAUC,MAAM,CAACS,IAAjB,EAAuBG,QAAvB,CAAnB,CAAA;AACD,GAAA;;AACD,EAAA,OAAOV,yBAAyB,CAACF,MAAD,CAAzB,CAAkCD,OAAlC,CAAP,CAAA;AACD,CAAA;AAEM,SAASe,qCAAT,CACLd,MADK,EAEkC;AACvC,EAAA,MAAMG,KAAK,GAAGD,yBAAyB,CAACF,MAAD,CAAvC,CAAA;AAEA,EAAA,OAAO,CACLe,eADK,EAELH,QAFK,KAGF;IACH,IAAI,QAAA,IAAYG,eAAhB,EAAiC;MAC/BF,mBAAmB,CAACE,eAAD,EAAkBf,MAAM,CAACS,IAAzB,EAA+BG,QAA/B,CAAnB,CAAA;AACD,KAAA;;IAED,OAAOT,KAAK,CAACY,eAAD,CAAZ,CAAA;GARF,CAAA;AAUD,CAAA;AAEM,SAASF,mBAAT,CACLd,OADK,EAELU,IAFK,EAGLG,QAHK,EAI6C;AAClD,EAAA,IAAI,CAACb,OAAO,CAACE,MAAb,EAAqB;IACnB,MAAM,IAAIe,6BAAJ,CAAyBjB,OAAO,CAACS,SAAjC,EAA4CC,IAA5C,EAAkD;AAAEG,MAAAA,QAAAA;AAAF,KAAlD,CAAN,CAAA;AACD,GAAA;AACF;;;;;;;;"}