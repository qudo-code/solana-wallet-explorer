{"version":3,"file":"Bid.mjs","sources":["../../../../src/plugins/auctionHouseModule/Bid.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  Pda,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n} from '@/types';\nimport { BidReceiptAccount } from './accounts';\nimport { assert, Option } from '@/utils';\nimport { AuctionHouse } from './AuctionHouse';\nimport { Nft, NftWithToken, Sft, SftWithToken } from '../nftModule';\n\nexport type Bid = Readonly<\n  {\n    model: 'bid';\n    lazy: false;\n\n    // Models.\n    auctionHouse: AuctionHouse;\n\n    // Addresses.\n    tradeStateAddress: Pda;\n    buyerAddress: PublicKey;\n    bookkeeperAddress: Option<PublicKey>;\n    receiptAddress: Option<Pda>;\n    purchaseReceiptAddress: Option<PublicKey>;\n\n    // Data.\n    price: SolAmount | SplTokenAmount;\n    tokens: SplTokenAmount;\n    createdAt: DateTime;\n    canceledAt: Option<DateTime>;\n  } & (\n    | {\n        isPublic: false;\n        asset: SftWithToken | NftWithToken;\n      }\n    | {\n        isPublic: true;\n        asset: Sft | Nft;\n      }\n  )\n>;\n\nexport const isBid = (value: any): value is Bid =>\n  typeof value === 'object' && value.model === 'bid' && !value.lazy;\n\nexport function assertBid(value: any): asserts value is Bid {\n  assert(isBid(value), `Expected Bid type`);\n}\n\nexport const toBid = (\n  account: BidReceiptAccount,\n  auctionHouse: AuctionHouse,\n  asset: Nft | Sft | NftWithToken | SftWithToken\n): Bid => {\n  const lazyBid = toLazyBid(account, auctionHouse);\n\n  return {\n    ...lazyBid,\n    model: 'bid',\n    lazy: false,\n    ...('token' in asset\n      ? {\n          asset,\n          tokens: amount(lazyBid.tokens, asset.mint.currency),\n          isPublic: false,\n        }\n      : {\n          asset,\n          tokens: amount(lazyBid.tokens, asset.mint.currency),\n          isPublic: true,\n        }),\n  };\n};\n\nexport type LazyBid = Omit<Bid, 'lazy' | 'asset' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokenAddress: Option<PublicKey>;\n    tokens: BigNumber;\n  }>;\n\nexport const isLazyBid = (value: any): value is LazyBid =>\n  typeof value === 'object' && value.model === 'bid' && value.lazy;\n\nexport function assertLazyBid(value: any): asserts value is LazyBid {\n  assert(isLazyBid(value), `Expected LazyBid type`);\n}\nexport const toLazyBid = (\n  account: BidReceiptAccount,\n  auctionHouse: AuctionHouse\n): LazyBid => {\n  return {\n    model: 'bid',\n    lazy: true,\n    auctionHouse,\n    tradeStateAddress: new Pda(\n      account.data.tradeState,\n      account.data.tradeStateBump\n    ),\n    bookkeeperAddress: account.data.bookkeeper,\n    buyerAddress: account.data.buyer,\n    metadataAddress: account.data.metadata,\n    tokenAddress: account.data.tokenAccount,\n    receiptAddress: new Pda(account.publicKey, account.data.bump),\n    purchaseReceiptAddress: account.data.purchaseReceipt,\n    isPublic: Boolean(account.data.tokenAccount),\n\n    // Data.\n    price: auctionHouse.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouse.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n    canceledAt: toOptionDateTime(account.data.canceledAt),\n  };\n};\n"],"names":["isBid","value","model","lazy","assertBid","assert","toBid","account","auctionHouse","asset","lazyBid","toLazyBid","tokens","amount","mint","currency","isPublic","isLazyBid","assertLazyBid","tradeStateAddress","Pda","data","tradeState","tradeStateBump","bookkeeperAddress","bookkeeper","buyerAddress","buyer","metadataAddress","metadata","tokenAddress","tokenAccount","receiptAddress","publicKey","bump","purchaseReceiptAddress","purchaseReceipt","Boolean","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime","canceledAt","toOptionDateTime"],"mappings":"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"}