{"version":3,"file":"Listing.mjs","sources":["../../../../src/plugins/auctionHouseModule/Listing.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  Pda,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n} from '@/types';\nimport { ListingReceiptAccount } from './accounts';\nimport { NftWithToken, SftWithToken } from '../nftModule';\nimport { assert, Option } from '@/utils';\nimport { AuctionHouse } from './AuctionHouse';\n\nexport type Listing = Readonly<{\n  model: 'listing';\n  lazy: false;\n\n  // Models.\n  auctionHouse: AuctionHouse;\n  asset: NftWithToken | SftWithToken;\n\n  // Addresses.\n  tradeStateAddress: Pda;\n  sellerAddress: PublicKey;\n  bookkeeperAddress: Option<PublicKey>;\n  receiptAddress: Option<Pda>;\n  purchaseReceiptAddress: Option<PublicKey>;\n\n  // Data.\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n  createdAt: DateTime;\n  canceledAt: Option<DateTime>;\n}>;\n\nexport const isListing = (value: any): value is Listing =>\n  typeof value === 'object' && value.model === 'listing' && !value.lazy;\n\nexport function assertListing(value: any): asserts value is Listing {\n  assert(isListing(value), `Expected Listing type`);\n}\nexport const toListing = (\n  account: ListingReceiptAccount,\n  auctionHouse: AuctionHouse,\n  asset: NftWithToken | SftWithToken\n): Listing => {\n  const lazyListing = toLazyListing(account, auctionHouse);\n  return {\n    ...lazyListing,\n    model: 'listing',\n    lazy: false,\n    asset,\n    tokens: amount(lazyListing.tokens, asset.mint.currency),\n  };\n};\n\nexport type LazyListing = Omit<Listing, 'lazy' | 'asset' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokens: BigNumber;\n  }>;\n\nexport const isLazyListing = (value: any): value is LazyListing =>\n  typeof value === 'object' && value.model === 'listing' && value.lazy;\n\nexport function assertLazyListing(value: any): asserts value is LazyListing {\n  assert(isLazyListing(value), `Expected LazyListing type`);\n}\nexport const toLazyListing = (\n  account: ListingReceiptAccount,\n  auctionHouse: AuctionHouse\n): LazyListing => {\n  return {\n    model: 'listing',\n    lazy: true,\n    auctionHouse: auctionHouse,\n    tradeStateAddress: new Pda(\n      account.data.tradeState,\n      account.data.tradeStateBump\n    ),\n    bookkeeperAddress: account.data.bookkeeper,\n    sellerAddress: account.data.seller,\n    metadataAddress: account.data.metadata,\n    receiptAddress: new Pda(account.publicKey, account.data.bump),\n    purchaseReceiptAddress: account.data.purchaseReceipt,\n\n    // Data.\n    price: auctionHouse.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouse.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n    canceledAt: toOptionDateTime(account.data.canceledAt),\n  };\n};\n"],"names":["isListing","value","model","lazy","assertListing","assert","toListing","account","auctionHouse","asset","lazyListing","toLazyListing","tokens","amount","mint","currency","isLazyListing","assertLazyListing","tradeStateAddress","Pda","data","tradeState","tradeStateBump","bookkeeperAddress","bookkeeper","sellerAddress","seller","metadataAddress","metadata","receiptAddress","publicKey","bump","purchaseReceiptAddress","purchaseReceipt","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime","canceledAt","toOptionDateTime"],"mappings":";;;;;;MAwCaA,SAAS,GAAIC,KAAD,IACvB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,SAA7C,IAA0D,CAACD,KAAK,CAACE,KAD5D;AAGA,SAASC,aAAT,CAAuBH,KAAvB,EAA6D;AAClEI,EAAAA,MAAM,CAACL,SAAS,CAACC,KAAD,CAAV,EAAoB,uBAApB,CAAN,CAAA;AACD,CAAA;AACM,MAAMK,SAAS,GAAG,CACvBC,OADuB,EAEvBC,YAFuB,EAGvBC,KAHuB,KAIX;AACZ,EAAA,MAAMC,WAAW,GAAGC,aAAa,CAACJ,OAAD,EAAUC,YAAV,CAAjC,CAAA;EACA,OAAO,EACL,GAAGE,WADE;AAELR,IAAAA,KAAK,EAAE,SAFF;AAGLC,IAAAA,IAAI,EAAE,KAHD;IAILM,KAJK;IAKLG,MAAM,EAAEC,MAAM,CAACH,WAAW,CAACE,MAAb,EAAqBH,KAAK,CAACK,IAAN,CAAWC,QAAhC,CAAA;GALhB,CAAA;AAOD,EAbM;MAsBMC,aAAa,GAAIf,KAAD,IAC3B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,SAA7C,IAA0DD,KAAK,CAACE,KAD3D;AAGA,SAASc,iBAAT,CAA2BhB,KAA3B,EAAqE;AAC1EI,EAAAA,MAAM,CAACW,aAAa,CAACf,KAAD,CAAd,EAAwB,2BAAxB,CAAN,CAAA;AACD,CAAA;MACYU,aAAa,GAAG,CAC3BJ,OAD2B,EAE3BC,YAF2B,KAGX;EAChB,OAAO;AACLN,IAAAA,KAAK,EAAE,SADF;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLK,IAAAA,YAAY,EAAEA,YAHT;AAILU,IAAAA,iBAAiB,EAAE,IAAIC,GAAJ,CACjBZ,OAAO,CAACa,IAAR,CAAaC,UADI,EAEjBd,OAAO,CAACa,IAAR,CAAaE,cAFI,CAJd;AAQLC,IAAAA,iBAAiB,EAAEhB,OAAO,CAACa,IAAR,CAAaI,UAR3B;AASLC,IAAAA,aAAa,EAAElB,OAAO,CAACa,IAAR,CAAaM,MATvB;AAULC,IAAAA,eAAe,EAAEpB,OAAO,CAACa,IAAR,CAAaQ,QAVzB;AAWLC,IAAAA,cAAc,EAAE,IAAIV,GAAJ,CAAQZ,OAAO,CAACuB,SAAhB,EAA2BvB,OAAO,CAACa,IAAR,CAAaW,IAAxC,CAXX;AAYLC,IAAAA,sBAAsB,EAAEzB,OAAO,CAACa,IAAR,CAAaa,eAZhC;AAcL;IACAC,KAAK,EAAE1B,YAAY,CAAC2B,QAAb,GACHC,QAAQ,CAAC7B,OAAO,CAACa,IAAR,CAAac,KAAd,CADL,GAEHrB,MAAM,CAACN,OAAO,CAACa,IAAR,CAAac,KAAd,EAAqB1B,YAAY,CAAC6B,YAAb,CAA0BtB,QAA/C,CAjBL;IAkBLH,MAAM,EAAE0B,WAAW,CAAC/B,OAAO,CAACa,IAAR,CAAamB,SAAd,CAlBd;IAmBLC,SAAS,EAAEC,UAAU,CAAClC,OAAO,CAACa,IAAR,CAAaoB,SAAd,CAnBhB;AAoBLE,IAAAA,UAAU,EAAEC,gBAAgB,CAACpC,OAAO,CAACa,IAAR,CAAasB,UAAd,CAAA;GApB9B,CAAA;AAsBD;;;;"}