{"version":3,"file":"cancelBid.mjs","sources":["../../../../src/plugins/auctionHouseModule/cancelBid.ts"],"sourcesContent":["import { ConfirmOptions, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  CancelInstructionAccounts,\n  createCancelBidReceiptInstruction,\n  createCancelInstruction,\n  createAuctioneerCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  isSigner,\n  toPublicKey,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport { Bid } from './Bid';\nimport { AuctioneerAuthorityRequiredError } from './errors';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { findAuctioneerPda } from './pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const cancelBidOperation = useOperation<CancelBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelBidOperation = Operation<\n  typeof Key,\n  CancelBidInput,\n  CancelBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelBidInput = {\n  auctionHouse: AuctionHouse;\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  bid: Bid;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelBidOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelBidOperationHandler: OperationHandler<CancelBidOperation> = {\n  handle: async (operation: CancelBidOperation, metaplex: Metaplex) =>\n    cancelBidBuilder(operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    ),\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelBidBuilderParams = Omit<CancelBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelBidBuilderContext = Omit<CancelBidOutput, 'response'>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelBidBuilder = (\n  params: CancelBidBuilderParams\n): TransactionBuilder<CancelBidBuilderContext> => {\n  const { auctionHouse, auctioneerAuthority, bid } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Data.\n  const { asset, tradeStateAddress, price, tokens, isPublic } = bid;\n\n  // Accounts.\n  const tokenAccount = isPublic\n    ? findAssociatedTokenAccountPda(\n        asset.mint.address,\n        toPublicKey(bid.buyerAddress)\n      )\n    : bid.asset.token.address;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: bid.buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Bid Instruction.\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Cancel Bid.\n      .add({\n        instruction: cancelBidInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelBid',\n      })\n\n      // Cancel Bid Receipt.\n      .when(Boolean(bid.receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelBidReceiptInstruction({\n            receipt: bid.receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelBidOperation","useOperation","cancelBidOperationHandler","handle","operation","metaplex","cancelBidBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","bid","hasAuctioneer","AuctioneerAuthorityRequiredError","asset","tradeStateAddress","price","tokens","isPublic","tokenAccount","findAssociatedTokenAccountPda","mint","address","toPublicKey","buyerAddress","token","accounts","wallet","tokenMint","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","tradeState","args","buyerPrice","basisPoints","tokenSize","cancelBidInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","cancelSigners","filter","isSigner","TransactionBuilder","make","add","instruction","signers","key","instructionKey","when","Boolean","receiptAddress","builder","createCancelBidReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}