{"version":3,"file":"loadBid.mjs","sources":["../../../../src/plugins/auctionHouseModule/loadBid.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { assert, DisposableScope } from '@/utils';\nimport { Bid, LazyBid } from './Bid';\nimport { assertNftOrSftWithToken } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadBidOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const loadBidOperation = useOperation<LoadBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadBidOperation = Operation<typeof Key, LoadBidInput, Bid>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadBidInput = {\n  lazyBid: LazyBid;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadBidOperationHandler: OperationHandler<LoadBidOperation> = {\n  handle: async (\n    operation: LoadBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const { lazyBid, loadJsonMetadata = true, commitment } = operation.input;\n\n    const bid: Omit<Bid, 'asset' | 'tokens'> = {\n      ...lazyBid,\n      model: 'bid',\n      lazy: false,\n    };\n\n    if (lazyBid.tokenAddress) {\n      const asset = await metaplex\n        .nfts()\n        .findByToken({\n          token: lazyBid.tokenAddress,\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      assertNftOrSftWithToken(asset);\n      assert(\n        asset.metadataAddress.equals(lazyBid.metadataAddress),\n        `Asset metadata address must be ${lazyBid.metadataAddress}`\n      );\n\n      return {\n        ...bid,\n        isPublic: false,\n        asset,\n        tokens: amount(lazyBid.tokens, asset.mint.currency),\n      };\n    } else {\n      const asset = await metaplex\n        .nfts()\n        .findByMetadata({\n          metadata: lazyBid.metadataAddress,\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      return {\n        ...bid,\n        isPublic: true,\n        asset,\n        tokens: amount(lazyBid.tokens, asset.mint.currency),\n      };\n    }\n  },\n};\n"],"names":["Key","loadBidOperation","useOperation","loadBidOperationHandler","handle","operation","metaplex","scope","lazyBid","loadJsonMetadata","commitment","input","bid","model","lazy","tokenAddress","asset","nfts","findByToken","token","run","throwIfCanceled","assertNftOrSftWithToken","assert","metadataAddress","equals","isPublic","tokens","amount","mint","currency","findByMetadata","metadata"],"mappings":";;;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,kBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,gBAAgB,GAAGC,YAAY,CAAmBF,GAAnB,EAArC;AAEP;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACO,MAAMG,uBAA2D,GAAG;AACzEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,OAAF;AAAWC,MAAAA,gBAAgB,GAAG,IAA9B;AAAoCC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAAnE,CAAA;AAEA,IAAA,MAAMC,GAAkC,GAAG,EACzC,GAAGJ,OADsC;AAEzCK,MAAAA,KAAK,EAAE,KAFkC;AAGzCC,MAAAA,IAAI,EAAE,KAAA;KAHR,CAAA;;IAMA,IAAIN,OAAO,CAACO,YAAZ,EAA0B;MACxB,MAAMC,KAAK,GAAG,MAAMV,QAAQ,CACzBW,IADiB,EAAA,CAEjBC,WAFiB,CAEL;QACXC,KAAK,EAAEX,OAAO,CAACO,YADJ;QAEXL,UAFW;AAGXD,QAAAA,gBAAAA;AAHW,OAFK,CAOjBW,CAAAA,GAPiB,CAObb,KAPa,CAApB,CAAA;AAQAA,MAAAA,KAAK,CAACc,eAAN,EAAA,CAAA;MAEAC,uBAAuB,CAACN,KAAD,CAAvB,CAAA;AACAO,MAAAA,MAAM,CACJP,KAAK,CAACQ,eAAN,CAAsBC,MAAtB,CAA6BjB,OAAO,CAACgB,eAArC,CADI,EAEH,CAAA,+BAAA,EAAiChB,OAAO,CAACgB,eAAgB,EAFtD,CAAN,CAAA;MAKA,OAAO,EACL,GAAGZ,GADE;AAELc,QAAAA,QAAQ,EAAE,KAFL;QAGLV,KAHK;QAILW,MAAM,EAAEC,MAAM,CAACpB,OAAO,CAACmB,MAAT,EAAiBX,KAAK,CAACa,IAAN,CAAWC,QAA5B,CAAA;OAJhB,CAAA;AAMD,KAvBD,MAuBO;MACL,MAAMd,KAAK,GAAG,MAAMV,QAAQ,CACzBW,IADiB,EAAA,CAEjBc,cAFiB,CAEF;QACdC,QAAQ,EAAExB,OAAO,CAACgB,eADJ;QAEdd,UAFc;AAGdD,QAAAA,gBAAAA;AAHc,OAFE,CAOjBW,CAAAA,GAPiB,CAObb,KAPa,CAApB,CAAA;AAQAA,MAAAA,KAAK,CAACc,eAAN,EAAA,CAAA;MAEA,OAAO,EACL,GAAGT,GADE;AAELc,QAAAA,QAAQ,EAAE,IAFL;QAGLV,KAHK;QAILW,MAAM,EAAEC,MAAM,CAACpB,OAAO,CAACmB,MAAT,EAAiBX,KAAK,CAACa,IAAN,CAAWC,QAA5B,CAAA;OAJhB,CAAA;AAMD,KAAA;AACF,GAAA;AAvDwE;;;;"}