{"version":3,"file":"asserts.mjs","sources":["../../../../src/plugins/candyMachineModule/asserts.ts"],"sourcesContent":["import { Creator } from '@metaplex-foundation/mpl-token-metadata';\nimport { assert } from '@/utils';\nimport {\n  MAX_CREATOR_LIMIT,\n  MAX_NAME_LENGTH,\n  MAX_SYMBOL_LENGTH,\n  MAX_URI_LENGTH,\n} from './constants';\nimport { CandyMachine } from './models/CandyMachine';\nimport {\n  CandyMachineAddItemConstraintsViolatedError,\n  CandyMachineCannotAddAmountError,\n  CandyMachineEndedError,\n  CandyMachineIsEmptyError,\n  CandyMachineIsFullError,\n  CandyMachineNotLiveError,\n} from './errors';\nimport {\n  ConfigLine,\n  EndSettingType,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { BigNumber, now, Signer, toBigNumber } from '@/types';\n\nexport const assertName = (name: string) => {\n  assert(\n    name.length <= MAX_NAME_LENGTH,\n    `Candy Machine name too long: ${name} (max ${MAX_NAME_LENGTH})`\n  );\n};\n\nexport const assertSymbol = (symbol: string) => {\n  assert(\n    symbol.length <= MAX_SYMBOL_LENGTH,\n    `Candy Machine symbol too long: ${symbol} (max ${MAX_SYMBOL_LENGTH})`\n  );\n};\n\nexport const assertUri = (uri: string) => {\n  assert(\n    uri.length <= MAX_URI_LENGTH,\n    `Candy Machine URI too long: ${uri} (max ${MAX_URI_LENGTH})`\n  );\n};\n\nexport const assertCreators = (creators: Creator[]) => {\n  assert(\n    creators.length <= MAX_CREATOR_LIMIT,\n    `Candy Machine creators too long: ${creators} (max ${MAX_CREATOR_LIMIT})`\n  );\n};\n\nexport const assertNotFull = (\n  candyMachine: Pick<CandyMachine, 'itemsAvailable' | 'itemsLoaded'>,\n  index: BigNumber\n) => {\n  if (candyMachine.itemsAvailable.lte(candyMachine.itemsLoaded)) {\n    throw new CandyMachineIsFullError(index, candyMachine.itemsAvailable);\n  }\n};\n\nexport const assertNotEmpty = (\n  candyMachine: Pick<CandyMachine, 'itemsRemaining' | 'itemsAvailable'>\n) => {\n  if (candyMachine.itemsRemaining.isZero()) {\n    throw new CandyMachineIsEmptyError(candyMachine.itemsAvailable);\n  }\n};\n\nexport const assertCanAdd = (\n  candyMachine: Pick<CandyMachine, 'itemsAvailable'>,\n  index: BigNumber,\n  amount: number\n) => {\n  if (index.addn(amount).gt(candyMachine.itemsAvailable)) {\n    throw new CandyMachineCannotAddAmountError(\n      index,\n      amount,\n      candyMachine.itemsAvailable\n    );\n  }\n};\n\nexport const assertAllConfigLineConstraints = (configLines: ConfigLine[]) => {\n  for (let i = 0; i < configLines.length; i++) {\n    try {\n      assertName(configLines[i].name);\n      assertUri(configLines[i].uri);\n    } catch (error) {\n      throw new CandyMachineAddItemConstraintsViolatedError(\n        toBigNumber(i),\n        configLines[i],\n        { cause: error as Error }\n      );\n    }\n  }\n};\n\nexport const assertCandyMachineIsLive = (\n  candyMachine: Pick<CandyMachine, 'whitelistMintSettings' | 'goLiveDate'>\n) => {\n  const hasWhitelistPresale =\n    candyMachine.whitelistMintSettings?.presale ?? false;\n\n  if (hasWhitelistPresale) {\n    return;\n  }\n\n  const liveDate = candyMachine.goLiveDate;\n\n  if (!liveDate || liveDate.gte(now())) {\n    throw new CandyMachineNotLiveError(liveDate);\n  }\n};\n\nexport const assertCandyMachineHasNotEnded = (\n  candyMachine: Pick<CandyMachine, 'endSettings' | 'itemsMinted'>\n) => {\n  const endSettings = candyMachine.endSettings;\n\n  if (!endSettings) {\n    return;\n  }\n\n  const hasEndedByAmount =\n    endSettings.endSettingType === EndSettingType.Amount &&\n    candyMachine.itemsMinted.gte(endSettings.number);\n  const hasEndedByDate =\n    endSettings.endSettingType === EndSettingType.Date &&\n    endSettings.date.lt(now());\n\n  if (hasEndedByAmount || hasEndedByDate) {\n    throw new CandyMachineEndedError(endSettings);\n  }\n};\n\nexport const assertCanMintCandyMachine = (\n  candyMachine: Pick<\n    CandyMachine,\n    | 'authorityAddress'\n    | 'itemsRemaining'\n    | 'itemsAvailable'\n    | 'itemsMinted'\n    | 'whitelistMintSettings'\n    | 'goLiveDate'\n    | 'endSettings'\n  >,\n  payer: Signer\n) => {\n  assertNotEmpty(candyMachine);\n\n  if (candyMachine.authorityAddress.equals(payer.publicKey)) {\n    return;\n  }\n\n  assertCandyMachineIsLive(candyMachine);\n  assertCandyMachineHasNotEnded(candyMachine);\n};\n"],"names":["assertName","name","assert","length","MAX_NAME_LENGTH","assertUri","uri","MAX_URI_LENGTH","assertNotFull","candyMachine","index","itemsAvailable","lte","itemsLoaded","CandyMachineIsFullError","assertNotEmpty","itemsRemaining","isZero","CandyMachineIsEmptyError","assertCanAdd","amount","addn","gt","CandyMachineCannotAddAmountError","assertAllConfigLineConstraints","configLines","i","error","CandyMachineAddItemConstraintsViolatedError","toBigNumber","cause","assertCandyMachineIsLive","hasWhitelistPresale","whitelistMintSettings","presale","liveDate","goLiveDate","gte","now","CandyMachineNotLiveError","assertCandyMachineHasNotEnded","endSettings","hasEndedByAmount","endSettingType","EndSettingType","Amount","itemsMinted","number","hasEndedByDate","Date","date","lt","CandyMachineEndedError","assertCanMintCandyMachine","payer","authorityAddress","equals","publicKey"],"mappings":"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"}