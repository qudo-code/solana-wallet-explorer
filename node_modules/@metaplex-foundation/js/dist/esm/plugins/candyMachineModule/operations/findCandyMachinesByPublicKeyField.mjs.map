{"version":3,"file":"findCandyMachinesByPublicKeyField.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyMachinesByPublicKeyField.ts"],"sourcesContent":["import { UnreachableCaseError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope, zipMap } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport {\n  parseCandyMachineAccount,\n  parseCandyMachineCollectionAccount,\n} from '../accounts';\nimport { CandyMachineGpaBuilder } from '../gpaBuilders';\nimport { CandyMachine, toCandyMachine } from '../models/CandyMachine';\nimport { findCandyMachineCollectionPda } from '../pdas';\nimport { CandyMachineProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachinesByPublicKeyOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachinesByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachinesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesByPublicKeyFieldInput,\n  CandyMachine[]\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachinesByPublicKeyFieldInput = {\n  type: 'authority' | 'wallet';\n  publicKey: PublicKey;\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachinesByPublicKeyFieldOperationHandler: OperationHandler<FindCandyMachinesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CandyMachine[]> => {\n      const { type, publicKey, commitment } = operation.input;\n      const accounts = CandyMachineProgram.accounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let candyMachineQuery: CandyMachineGpaBuilder;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const unparsedAccounts = await candyMachineQuery.get();\n      scope.throwIfCanceled();\n\n      const collectionPdas = unparsedAccounts.map((unparsedAccount) =>\n        findCandyMachineCollectionPda(unparsedAccount.publicKey)\n      );\n      const unparsedCollectionAccounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(collectionPdas, commitment);\n      scope.throwIfCanceled();\n\n      return zipMap(\n        unparsedAccounts,\n        unparsedCollectionAccounts,\n        (unparsedAccount, unparsedCollectionAccount) => {\n          const account = parseCandyMachineAccount(unparsedAccount);\n          const collectionAccount = unparsedCollectionAccount\n            ? parseCandyMachineCollectionAccount(unparsedCollectionAccount)\n            : null;\n\n          return toCandyMachine(account, unparsedAccount, collectionAccount);\n        }\n      );\n    },\n  };\n"],"names":["Key","findCandyMachinesByPublicKeyFieldOperation","useOperation","findCandyMachinesByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","type","publicKey","commitment","input","accounts","CandyMachineProgram","mergeConfig","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","unparsedAccounts","get","throwIfCanceled","collectionPdas","map","unparsedAccount","findCandyMachineCollectionPda","unparsedCollectionAccounts","rpc","getMultipleAccounts","zipMap","unparsedCollectionAccount","account","parseCandyMachineAccount","collectionAccount","parseCandyMachineCollectionAccount","toCandyMachine"],"mappings":";;;;;;;;AAeA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,0CAA0C,GACrDC,YAAY,CAA6CF,GAA7C,EADP;AAGP;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACO,MAAMG,iDAA+G,GAC1H;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIsB;IAC5B,MAAM;MAAEC,IAAF;MAAQC,SAAR;AAAmBC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAAlD,CAAA;IACA,MAAMC,QAAQ,GAAGC,mBAAmB,CAACD,QAApB,CAA6BN,QAA7B,CAAuCQ,CAAAA,WAAvC,CAAmD;AAClEJ,MAAAA,UAAAA;AADkE,KAAnD,CAAjB,CAAA;AAIA,IAAA,IAAIK,iBAAJ,CAAA;;AACA,IAAA,QAAQP,IAAR;AACE,MAAA,KAAK,WAAL;AACEO,QAAAA,iBAAiB,GACfH,QAAQ,CAACI,gCAAT,CAA0CP,SAA1C,CADF,CAAA;AAEA,QAAA,MAAA;;AACF,MAAA,KAAK,QAAL;AACEM,QAAAA,iBAAiB,GAAGH,QAAQ,CAACK,6BAAT,CAAuCR,SAAvC,CAApB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIS,oBAAJ,CAAyBV,IAAzB,CAAN,CAAA;AATJ,KAAA;;AAYA,IAAA,MAAMW,gBAAgB,GAAG,MAAMJ,iBAAiB,CAACK,GAAlB,EAA/B,CAAA;AACAb,IAAAA,KAAK,CAACc,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,cAAc,GAAGH,gBAAgB,CAACI,GAAjB,CAAsBC,eAAD,IAC1CC,6BAA6B,CAACD,eAAe,CAACf,SAAjB,CADR,CAAvB,CAAA;AAGA,IAAA,MAAMiB,0BAA0B,GAAG,MAAMpB,QAAQ,CAC9CqB,GADsC,EAEtCC,CAAAA,mBAFsC,CAElBN,cAFkB,EAEFZ,UAFE,CAAzC,CAAA;AAGAH,IAAAA,KAAK,CAACc,eAAN,EAAA,CAAA;IAEA,OAAOQ,MAAM,CACXV,gBADW,EAEXO,0BAFW,EAGX,CAACF,eAAD,EAAkBM,yBAAlB,KAAgD;AAC9C,MAAA,MAAMC,OAAO,GAAGC,wBAAwB,CAACR,eAAD,CAAxC,CAAA;MACA,MAAMS,iBAAiB,GAAGH,yBAAyB,GAC/CI,kCAAkC,CAACJ,yBAAD,CADa,GAE/C,IAFJ,CAAA;AAIA,MAAA,OAAOK,cAAc,CAACJ,OAAD,EAAUP,eAAV,EAA2BS,iBAA3B,CAArB,CAAA;AACD,KAVU,CAAb,CAAA;AAYD,GAAA;AA/CH;;;;"}