{"version":3,"file":"mintCandyMachine.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/mintCandyMachine.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport {\n  createMintNftInstruction,\n  createSetCollectionDuringMintInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  ConfirmOptions,\n  Keypair,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  NftWithToken,\n  TokenMetadataProgram,\n} from '../../nftModule';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { parseCandyMachineCollectionAccount } from '../accounts';\nimport { assertCanMintCandyMachine } from '../asserts';\nimport { CandyMachineBotTaxError } from '../errors';\nimport { CandyMachine } from '../models/CandyMachine';\nimport {\n  findCandyMachineCollectionPda,\n  findCandyMachineCreatorPda,\n} from '../pdas';\nimport { CandyMachineProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintCandyMachineOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const mintCandyMachineOperation =\n  useOperation<MintCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintCandyMachineOperation = Operation<\n  typeof Key,\n  MintCandyMachineInput,\n  MintCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintCandyMachineInput = {\n  // Models and Accounts.\n  candyMachine: Pick<\n    CandyMachine,\n    | 'address'\n    | 'walletAddress'\n    | 'authorityAddress'\n    | 'tokenMintAddress'\n    | 'itemsRemaining'\n    | 'itemsAvailable'\n    | 'itemsMinted'\n    | 'whitelistMintSettings'\n    | 'goLiveDate'\n    | 'endSettings'\n  >;\n  payer?: Signer; // Defaults to mx.identity().\n  newMint?: Signer; // Defaults to Keypair.generate().\n  newOwner?: PublicKey; // Defaults to mx.identity().\n  newToken?: Signer; // Defaults to associated token.\n  payerToken?: PublicKey; // Defaults to associated token.\n  whitelistToken?: PublicKey; // Defaults to associated token.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  tokenMetadataProgram?: PublicKey;\n  candyMachineProgram?: PublicKey;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n  nft: NftWithToken;\n  mintSigner: Signer;\n  tokenAddress: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintCandyMachineOperationHandler: OperationHandler<MintCandyMachineOperation> =\n  {\n    async handle(\n      operation: MintCandyMachineOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<MintCandyMachineOutput> {\n      assertCanMintCandyMachine(\n        operation.input.candyMachine,\n        operation.input.payer ?? metaplex.identity()\n      );\n\n      const builder = await mintCandyMachineBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n      scope.throwIfCanceled();\n\n      let nft: NftWithToken;\n      try {\n        nft = (await metaplex\n          .nfts()\n          .findByMint({\n            mintAddress: output.mintSigner.publicKey,\n            tokenAddress: output.tokenAddress,\n          })\n          .run(scope)) as NftWithToken;\n      } catch (error) {\n        throw new CandyMachineBotTaxError(\n          metaplex.rpc().getSolanaExporerUrl(output.response.signature),\n          error as Error\n        );\n      }\n\n      return { nft, ...output };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintCandyMachineBuilderParams = Omit<\n  MintCandyMachineInput,\n  'confirmOptions'\n> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  mintNftInstructionKey?: string;\n  setCollectionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type MintCandyMachineBuilderContext = Omit<\n  MintCandyMachineOutput,\n  'response' | 'nft'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintCandyMachineBuilder = async (\n  metaplex: Metaplex,\n  params: MintCandyMachineBuilderParams\n): Promise<TransactionBuilder<MintCandyMachineBuilderContext>> => {\n  const {\n    candyMachine,\n    payer = metaplex.identity(),\n    newMint = Keypair.generate(),\n    newOwner = metaplex.identity().publicKey,\n    newToken,\n    tokenProgram,\n    associatedTokenProgram,\n    tokenMetadataProgram = TokenMetadataProgram.publicKey,\n    candyMachineProgram = CandyMachineProgram.publicKey,\n  } = params;\n\n  const newMetadata = findMetadataPda(newMint.publicKey, tokenMetadataProgram);\n  const newEdition = findMasterEditionV2Pda(\n    newMint.publicKey,\n    tokenMetadataProgram\n  );\n  const candyMachineCreator = findCandyMachineCreatorPda(\n    candyMachine.address,\n    candyMachineProgram\n  );\n  const candyMachineCollectionAddress = findCandyMachineCollectionPda(\n    candyMachine.address,\n    candyMachineProgram\n  );\n  const candyMachineCollectionAccount = parseCandyMachineCollectionAccount(\n    await metaplex.rpc().getAccount(candyMachineCollectionAddress)\n  );\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: payer,\n      freezeAuthority: payer.publicKey,\n      owner: newOwner,\n      token: newToken,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  const mintNftInstruction = createMintNftInstruction(\n    {\n      candyMachine: candyMachine.address,\n      candyMachineCreator: candyMachineCreator,\n      payer: payer.publicKey,\n      wallet: candyMachine.walletAddress,\n      metadata: newMetadata,\n      mint: newMint.publicKey,\n      mintAuthority: payer.publicKey,\n      updateAuthority: payer.publicKey,\n      masterEdition: newEdition,\n      tokenMetadataProgram,\n      clock: SYSVAR_CLOCK_PUBKEY,\n      recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n      instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY,\n    },\n    { creatorBump: candyMachineCreator.bump }\n  );\n\n  if (candyMachine.whitelistMintSettings) {\n    const whitelistToken =\n      params.whitelistToken ??\n      findAssociatedTokenAccountPda(\n        candyMachine.whitelistMintSettings.mint,\n        payer.publicKey,\n        associatedTokenProgram\n      );\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: candyMachine.whitelistMintSettings.mint,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  if (candyMachine.tokenMintAddress) {\n    const payerToken =\n      params.payerToken ??\n      findAssociatedTokenAccountPda(\n        candyMachine.tokenMintAddress,\n        payer.publicKey,\n        associatedTokenProgram\n      );\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: payerToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  return (\n    TransactionBuilder.make<MintCandyMachineBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        tokenAddress,\n      })\n\n      // Create token and mint accounts.\n      .add(tokenWithMintBuilder)\n\n      // Create the new NFT.\n      .add({\n        instruction: mintNftInstruction,\n        signers: [payer, newMint],\n        key: params.mintNftInstructionKey ?? 'mintNft',\n      })\n\n      // Set the collection on the NFT.\n      .when(candyMachineCollectionAccount.exists, (builder) => {\n        assertAccountExists(candyMachineCollectionAccount);\n        const collectionMint = candyMachineCollectionAccount.data.mint;\n        const collectionMetadata = findMetadataPda(\n          collectionMint,\n          tokenMetadataProgram\n        );\n        const collectionMasterEdition = findMasterEditionV2Pda(\n          collectionMint,\n          tokenMetadataProgram\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          candyMachineCollectionAccount.publicKey,\n          tokenMetadataProgram\n        );\n\n        return builder.add({\n          instruction: createSetCollectionDuringMintInstruction({\n            candyMachine: candyMachine.address,\n            metadata: newMetadata,\n            payer: payer.publicKey,\n            collectionPda: candyMachineCollectionAccount.publicKey,\n            tokenMetadataProgram,\n            instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            collectionMint: candyMachineCollectionAccount.data.mint,\n            collectionMetadata,\n            collectionMasterEdition,\n            authority: candyMachine.authorityAddress,\n            collectionAuthorityRecord,\n          }),\n          signers: [payer],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","mintCandyMachineOperation","useOperation","mintCandyMachineOperationHandler","handle","operation","metaplex","scope","assertCanMintCandyMachine","input","candyMachine","payer","identity","builder","mintCandyMachineBuilder","throwIfCanceled","output","sendAndConfirm","confirmOptions","nft","nfts","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","run","error","CandyMachineBotTaxError","rpc","getSolanaExporerUrl","response","signature","params","newMint","Keypair","generate","newOwner","newToken","tokenProgram","associatedTokenProgram","tokenMetadataProgram","TokenMetadataProgram","candyMachineProgram","CandyMachineProgram","newMetadata","findMetadataPda","newEdition","findMasterEditionV2Pda","candyMachineCreator","findCandyMachineCreatorPda","address","candyMachineCollectionAddress","findCandyMachineCollectionPda","candyMachineCollectionAccount","parseCandyMachineCollectionAccount","getAccount","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mint","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","mintNftInstruction","createMintNftInstruction","wallet","walletAddress","metadata","updateAuthority","masterEdition","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","creatorBump","bump","whitelistMintSettings","whitelistToken","findAssociatedTokenAccountPda","keys","push","pubkey","isWritable","isSigner","tokenMintAddress","payerToken","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","key","mintNftInstructionKey","when","exists","assertAccountExists","collectionMint","data","collectionMetadata","collectionMasterEdition","collectionAuthorityRecord","findCollectionAuthorityRecordPda","createSetCollectionDuringMintInstruction","collectionPda","instructions","authority","authorityAddress","setCollectionInstructionKey"],"mappings":"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"}