{"version":3,"file":"NftEdition.mjs","sources":["../../../../../src/plugins/nftModule/models/NftEdition.ts"],"sourcesContent":["import { BigNumber, toBigNumber, toOptionBigNumber } from '@/types';\nimport { assert, Option } from '@/utils';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  isOriginalEditionAccount,\n  OriginalEditionAccount,\n  OriginalOrPrintEditionAccount,\n  PrintEditionAccount,\n} from '../accounts';\n\n/** @group Models */\nexport type NftEdition = NftOriginalEdition | NftPrintEdition;\n\n/** @group Model Helpers */\nexport const isNftEdition = (value: any): value is NftEdition =>\n  typeof value === 'object' && value.model === 'nftEdition';\n\n/** @group Model Helpers */\nexport function assertNftEdition(value: any): asserts value is NftEdition {\n  assert(isNftEdition(value), `Expected NftEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftEdition = (\n  account: OriginalOrPrintEditionAccount\n): NftEdition =>\n  isOriginalEditionAccount(account)\n    ? toNftOriginalEdition(account)\n    : toNftPrintEdition(account as PrintEditionAccount);\n\n/** @group Models */\nexport type NftOriginalEdition = {\n  readonly model: 'nftEdition';\n  readonly isOriginal: true;\n  readonly address: PublicKey;\n  readonly supply: BigNumber;\n  readonly maxSupply: Option<BigNumber>;\n};\n\n/** @group Model Helpers */\nexport const isNftOriginalEdition = (value: any): value is NftOriginalEdition =>\n  isNftEdition(value) && value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftOriginalEdition(\n  value: any\n): asserts value is NftOriginalEdition {\n  assert(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftOriginalEdition = (\n  account: OriginalEditionAccount\n): NftOriginalEdition => ({\n  model: 'nftEdition',\n  isOriginal: true,\n  address: account.publicKey,\n  supply: toBigNumber(account.data.supply),\n  maxSupply: toOptionBigNumber(account.data.maxSupply),\n});\n\n/** @group Models */\nexport type NftPrintEdition = {\n  readonly model: 'nftEdition';\n  readonly isOriginal: false;\n  readonly address: PublicKey;\n  readonly parent: PublicKey;\n  readonly number: BigNumber;\n};\n\n/** @group Model Helpers */\nexport const isNftPrintEdition = (value: any): value is NftPrintEdition =>\n  isNftEdition(value) && !value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftPrintEdition(\n  value: any\n): asserts value is NftPrintEdition {\n  assert(isNftPrintEdition(value), `Expected NftPrintEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftPrintEdition = (\n  account: PrintEditionAccount\n): NftPrintEdition => ({\n  model: 'nftEdition',\n  isOriginal: false,\n  address: account.publicKey,\n  parent: account.data.parent,\n  number: toBigNumber(account.data.edition),\n});\n"],"names":["isNftEdition","value","model","assertNftEdition","assert","toNftEdition","account","isOriginalEditionAccount","toNftOriginalEdition","toNftPrintEdition","isNftOriginalEdition","isOriginal","assertNftOriginalEdition","address","publicKey","supply","toBigNumber","data","maxSupply","toOptionBigNumber","isNftPrintEdition","assertNftPrintEdition","parent","number","edition"],"mappings":";;;;AAUA;;AAGA;AACaA,MAAAA,YAAY,GAAIC,KAAD,IAC1B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,aADxC;AAGP;;AACO,SAASC,gBAAT,CAA0BF,KAA1B,EAAmE;AACxEG,EAAAA,MAAM,CAACJ,YAAY,CAACC,KAAD,CAAb,EAAuB,2BAAvB,CAAN,CAAA;AACD,CAAA;AAED;;MACaI,YAAY,GACvBC,OAD0B,IAG1BC,wBAAwB,CAACD,OAAD,CAAxB,GACIE,oBAAoB,CAACF,OAAD,CADxB,GAEIG,iBAAiB,CAACH,OAAD,EALhB;AAOP;;AASA;AACaI,MAAAA,oBAAoB,GAAIT,KAAD,IAClCD,YAAY,CAACC,KAAD,CAAZ,IAAuBA,KAAK,CAACU,WADxB;AAGP;;AACO,SAASC,wBAAT,CACLX,KADK,EAEgC;AACrCG,EAAAA,MAAM,CAACM,oBAAoB,CAACT,KAAD,CAArB,EAA+B,mCAA/B,CAAN,CAAA;AACD,CAAA;AAED;;AACaO,MAAAA,oBAAoB,GAC/BF,OADkC,KAEV;AACxBJ,EAAAA,KAAK,EAAE,YADiB;AAExBS,EAAAA,UAAU,EAAE,IAFY;EAGxBE,OAAO,EAAEP,OAAO,CAACQ,SAHO;EAIxBC,MAAM,EAAEC,WAAW,CAACV,OAAO,CAACW,IAAR,CAAaF,MAAd,CAJK;AAKxBG,EAAAA,SAAS,EAAEC,iBAAiB,CAACb,OAAO,CAACW,IAAR,CAAaC,SAAd,CAAA;AALJ,CAFU,EAA7B;AAUP;;AASA;AACaE,MAAAA,iBAAiB,GAAInB,KAAD,IAC/BD,YAAY,CAACC,KAAD,CAAZ,IAAuB,CAACA,KAAK,CAACU,WADzB;AAGP;;AACO,SAASU,qBAAT,CACLpB,KADK,EAE6B;AAClCG,EAAAA,MAAM,CAACgB,iBAAiB,CAACnB,KAAD,CAAlB,EAA4B,gCAA5B,CAAN,CAAA;AACD,CAAA;AAED;;AACaQ,MAAAA,iBAAiB,GAC5BH,OAD+B,KAEV;AACrBJ,EAAAA,KAAK,EAAE,YADc;AAErBS,EAAAA,UAAU,EAAE,KAFS;EAGrBE,OAAO,EAAEP,OAAO,CAACQ,SAHI;AAIrBQ,EAAAA,MAAM,EAAEhB,OAAO,CAACW,IAAR,CAAaK,MAJA;AAKrBC,EAAAA,MAAM,EAAEP,WAAW,CAACV,OAAO,CAACW,IAAR,CAAaO,OAAd,CAAA;AALE,CAFU;;;;"}