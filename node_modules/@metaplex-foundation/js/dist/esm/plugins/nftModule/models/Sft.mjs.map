{"version":3,"file":"Sft.mjs","sources":["../../../../../src/plugins/nftModule/models/Sft.ts"],"sourcesContent":["import { amount, Pda } from '@/types';\nimport { assert } from '@/utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\n\n/** @group Models */\nexport type Sft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> &\n  Readonly<{\n    model: 'sft';\n    address: PublicKey;\n    metadataAddress: Pda;\n    mint: Mint;\n  }>;\n\n/** @group Model Helpers */\nexport const isSft = (value: any): value is Sft =>\n  typeof value === 'object' && value.model === 'sft';\n\n/** @group Model Helpers */\nexport function assertSft(value: any): asserts value is Sft {\n  assert(isSft(value), `Expected Sft model`);\n}\n\n/** @group Model Helpers */\nexport const toSft = (metadata: Metadata, mint: Mint): Sft => {\n  const { address, mintAddress, ...shared } = metadata;\n  assert(\n    mintAddress.equals(mint.address),\n    'The provided mint does not match the mint address in the metadata'\n  );\n\n  const currency = {\n    ...mint.currency,\n    symbol: metadata.symbol || 'Token',\n  };\n\n  return {\n    ...shared,\n    model: 'sft',\n    address: mintAddress,\n    metadataAddress: address,\n    mint: {\n      ...mint,\n      currency,\n      supply: amount(mint.supply.basisPoints, currency),\n    },\n  };\n};\n\n/** @group Models */\nexport type SftWithToken = Sft & { token: Token };\n\n/** @group Model Helpers */\nexport const isSftWithToken = (value: any): value is SftWithToken =>\n  isSft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertSftWithToken(value: any): asserts value is SftWithToken {\n  assert(isSftWithToken(value), `Expected Sft model with token`);\n}\n\n/** @group Model Helpers */\nexport const toSftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  token: Token\n): SftWithToken => {\n  const sft = toSft(metadata, mint);\n  const currency = sft.mint.currency;\n  return {\n    ...sft,\n    token: {\n      ...token,\n      amount: amount(token.amount.basisPoints, currency),\n      delegateAmount: amount(token.delegateAmount.basisPoints, currency),\n    },\n  };\n};\n"],"names":["isSft","value","model","assertSft","assert","toSft","metadata","mint","address","mintAddress","shared","equals","currency","symbol","metadataAddress","supply","amount","basisPoints","isSftWithToken","assertSftWithToken","toSftWithToken","token","sft","delegateAmount"],"mappings":";;;AAeA;AACaA,MAAAA,KAAK,GAAIC,KAAD,IACnB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,MADxC;AAGP;;AACO,SAASC,SAAT,CAAmBF,KAAnB,EAAqD;AAC1DG,EAAAA,MAAM,CAACJ,KAAK,CAACC,KAAD,CAAN,EAAgB,oBAAhB,CAAN,CAAA;AACD,CAAA;AAED;;MACaI,KAAK,GAAG,CAACC,QAAD,EAAqBC,IAArB,KAAyC;EAC5D,MAAM;IAAEC,OAAF;IAAWC,WAAX;IAAwB,GAAGC,MAAAA;AAA3B,GAAA,GAAsCJ,QAA5C,CAAA;EACAF,MAAM,CACJK,WAAW,CAACE,MAAZ,CAAmBJ,IAAI,CAACC,OAAxB,CADI,EAEJ,mEAFI,CAAN,CAAA;AAKA,EAAA,MAAMI,QAAQ,GAAG,EACf,GAAGL,IAAI,CAACK,QADO;AAEfC,IAAAA,MAAM,EAAEP,QAAQ,CAACO,MAAT,IAAmB,OAAA;GAF7B,CAAA;EAKA,OAAO,EACL,GAAGH,MADE;AAELR,IAAAA,KAAK,EAAE,KAFF;AAGLM,IAAAA,OAAO,EAAEC,WAHJ;AAILK,IAAAA,eAAe,EAAEN,OAJZ;IAKLD,IAAI,EAAE,EACJ,GAAGA,IADC;MAEJK,QAFI;MAGJG,MAAM,EAAEC,MAAM,CAACT,IAAI,CAACQ,MAAL,CAAYE,WAAb,EAA0BL,QAA1B,CAAA;AAHV,KAAA;GALR,CAAA;AAWD,EAvBM;AAyBP;;AAGA;AACO,MAAMM,cAAc,GAAIjB,KAAD,IAC5BD,KAAK,CAACC,KAAD,CAAL,IAAgB,OAAA,IAAWA,MADtB;AAGP;;AACO,SAASkB,kBAAT,CAA4BlB,KAA5B,EAAuE;AAC5EG,EAAAA,MAAM,CAACc,cAAc,CAACjB,KAAD,CAAf,EAAyB,+BAAzB,CAAN,CAAA;AACD,CAAA;AAED;;AACO,MAAMmB,cAAc,GAAG,CAC5Bd,QAD4B,EAE5BC,IAF4B,EAG5Bc,KAH4B,KAIX;AACjB,EAAA,MAAMC,GAAG,GAAGjB,KAAK,CAACC,QAAD,EAAWC,IAAX,CAAjB,CAAA;AACA,EAAA,MAAMK,QAAQ,GAAGU,GAAG,CAACf,IAAJ,CAASK,QAA1B,CAAA;EACA,OAAO,EACL,GAAGU,GADE;IAELD,KAAK,EAAE,EACL,GAAGA,KADE;MAELL,MAAM,EAAEA,MAAM,CAACK,KAAK,CAACL,MAAN,CAAaC,WAAd,EAA2BL,QAA3B,CAFT;MAGLW,cAAc,EAAEP,MAAM,CAACK,KAAK,CAACE,cAAN,CAAqBN,WAAtB,EAAmCL,QAAnC,CAAA;AAHjB,KAAA;GAFT,CAAA;AAQD;;;;"}