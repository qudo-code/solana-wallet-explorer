{"version":3,"file":"createSft.mjs","sources":["../../../../../src/plugins/nftModule/operations/createSft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Creator,\n  CreatorInput,\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport {\n  createCreateMetadataAccountV3Instruction,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { assertSft, Sft, SftWithToken } from '../models';\nimport { findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateSftOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createSftOperation = useOperation<CreateSftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateSftOperation = Operation<\n  typeof Key,\n  CreateSftInput,\n  CreateSftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateSftInput = {\n  // Accounts.\n  payer?: Signer; // Defaults to mx.identity().\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  mintAuthority?: Signer; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n\n  // Mint Account.\n  useNewMint?: Signer; // Defaults to new generated Keypair.\n  useExistingMint?: PublicKey;\n\n  // Optional Token Account. Defaults to no token account.\n  tokenAddress?: PublicKey | Signer;\n  tokenOwner?: PublicKey;\n  tokenAmount?: SplTokenAmount;\n\n  // Data.\n  decimals?: number; // Defaults to 0.\n  uri: string;\n  name: string;\n  sellerFeeBasisPoints: number;\n  symbol?: string; // Defaults to an empty string.\n  creators?: CreatorInput[]; // Defaults to mx.identity() as a single Creator.\n  isMutable?: boolean; // Defaults to true.\n  maxSupply?: Option<BigNumber>; // Defaults to 0.\n  uses?: Option<Uses>; // Defaults to null.\n  isCollection?: boolean; // Defaults to false.\n  collection?: Option<PublicKey>; // Defaults to null.\n  collectionAuthority?: Option<Signer>; // Defaults to null.\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateSftOutput = {\n  response: SendAndConfirmTransactionResponse;\n  sft: Sft | SftWithToken;\n  mintAddress: PublicKey;\n  metadataAddress: PublicKey;\n  tokenAddress: PublicKey | null;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createSftOperationHandler: OperationHandler<CreateSftOperation> = {\n  handle: async (\n    operation: CreateSftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const {\n      useNewMint = Keypair.generate(),\n      useExistingMint,\n      tokenOwner,\n      tokenAddress: tokenSigner,\n      confirmOptions,\n    } = operation.input;\n\n    const mintAddress = useExistingMint ?? useNewMint.publicKey;\n    const associatedTokenAddress = tokenOwner\n      ? findAssociatedTokenAccountPda(mintAddress, tokenOwner)\n      : null;\n    const tokenAddress = tokenSigner\n      ? toPublicKey(tokenSigner)\n      : associatedTokenAddress;\n\n    let tokenExists: boolean;\n    if (!!useExistingMint && !!tokenAddress) {\n      const tokenAccount = await metaplex.rpc().getAccount(tokenAddress);\n      tokenExists = tokenAccount.exists;\n    } else {\n      tokenExists = false;\n    }\n\n    const builder = await createSftBuilder(metaplex, {\n      ...operation.input,\n      useNewMint,\n      tokenExists,\n    });\n    scope.throwIfCanceled();\n\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n\n    const sft = await metaplex\n      .nfts()\n      .findByMint({\n        mintAddress: output.mintAddress,\n        tokenAddress: output.tokenAddress ?? undefined,\n      })\n      .run(scope);\n    scope.throwIfCanceled();\n\n    assertSft(sft);\n    return { ...output, sft };\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateSftBuilderParams = Omit<CreateSftInput, 'confirmOptions'> & {\n  tokenExists?: boolean;\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateSftBuilderContext = Omit<CreateSftOutput, 'response' | 'sft'>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createSftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateSftBuilderParams\n): Promise<TransactionBuilder<CreateSftBuilderContext>> => {\n  const {\n    payer = metaplex.identity(),\n    useNewMint = Keypair.generate(),\n    updateAuthority = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n  } = params;\n\n  const mintAndTokenBuilder = await createMintAndTokenForSftBuilder(\n    metaplex,\n    params,\n    useNewMint\n  );\n  const { mintAddress, tokenAddress } = mintAndTokenBuilder.getContext();\n\n  const metadataPda = findMetadataPda(mintAddress);\n  const creatorsInput: CreatorInput[] = params.creators ?? [\n    {\n      address: updateAuthority.publicKey,\n      authority: updateAuthority,\n      share: 100,\n    },\n  ];\n  const creators: Option<Creator[]> =\n    creatorsInput.length > 0\n      ? creatorsInput.map((creator) => ({\n          ...creator,\n          verified: creator.address.equals(updateAuthority.publicKey),\n        }))\n      : null;\n\n  const createMetadataInstruction = createCreateMetadataAccountV3Instruction(\n    {\n      metadata: metadataPda,\n      mint: mintAddress,\n      mintAuthority: mintAuthority.publicKey,\n      payer: payer.publicKey,\n      updateAuthority: updateAuthority.publicKey,\n    },\n    {\n      createMetadataAccountArgsV3: {\n        data: {\n          name: params.name,\n          symbol: params.symbol ?? '',\n          uri: params.uri,\n          sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n          creators,\n          collection: params.collection\n            ? { key: params.collection, verified: false }\n            : null,\n          uses: params.uses ?? null,\n        },\n        isMutable: params.isMutable ?? true,\n        collectionDetails: params.isCollection\n          ? { __kind: 'V1', size: 0 } // Program will hardcode size to zero anyway.\n          : null,\n      },\n    }\n  );\n\n  // When the payer is different than the update authority, the latter will\n  // not be marked as a signer and therefore signing as a creator will fail.\n  createMetadataInstruction.keys[4].isSigner = true;\n\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      return (\n        !!creator.authority &&\n        !creator.address.equals(updateAuthority.publicKey)\n      );\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator({\n        mintAddress,\n        creator: creator.authority,\n      });\n    });\n\n  return (\n    TransactionBuilder.make<CreateSftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintAddress,\n        metadataAddress: metadataPda,\n        tokenAddress,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(mintAndTokenBuilder)\n\n      // Create metadata account.\n      .add({\n        instruction: createMetadataInstruction,\n        signers: [payer, mintAuthority, updateAuthority],\n        key: params.createMetadataInstructionKey ?? 'createMetadata',\n      })\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection({\n              payer,\n              mintAddress,\n              collectionMintAddress: params.collection as PublicKey,\n              collectionAuthority: params.collectionAuthority as Signer,\n              isDelegated: params.collectionAuthorityIsDelegated ?? false,\n              isSizedCollection: params.collectionIsSized ?? true,\n            })\n        )\n      )\n  );\n};\n\nconst createMintAndTokenForSftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateSftBuilderParams,\n  useNewMint: Signer\n): Promise<\n  TransactionBuilder<{ mintAddress: PublicKey; tokenAddress: PublicKey | null }>\n> => {\n  const {\n    payer = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    tokenExists = false,\n  } = params;\n\n  const mintAddress = params.useExistingMint ?? useNewMint.publicKey;\n  const associatedTokenAddress = params.tokenOwner\n    ? findAssociatedTokenAccountPda(mintAddress, params.tokenOwner)\n    : null;\n  const tokenAddress = params.tokenAddress\n    ? toPublicKey(params.tokenAddress)\n    : associatedTokenAddress;\n\n  const builder = TransactionBuilder.make<{\n    mintAddress: PublicKey;\n    tokenAddress: PublicKey | null;\n  }>().setContext({\n    mintAddress,\n    tokenAddress,\n  });\n\n  // Create the mint account if it doesn't exist.\n  if (!params.useExistingMint) {\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .createMint({\n          decimals: params.decimals ?? 0,\n          mint: useNewMint,\n          payer,\n          mintAuthority: mintAuthority.publicKey,\n          freezeAuthority,\n          tokenProgram: params.tokenProgram,\n          createAccountInstructionKey: params.createMintAccountInstructionKey,\n          initializeMintInstructionKey: params.initializeMintInstructionKey,\n        })\n    );\n  }\n\n  // Create the token account if it doesn't exist.\n  const isNewToken = !!params.tokenAddress && isSigner(params.tokenAddress);\n  const isNewAssociatedToken = !!params.tokenOwner;\n  if (!tokenExists && (isNewToken || isNewAssociatedToken)) {\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .createToken({\n          mint: mintAddress,\n          owner: params.tokenOwner,\n          token: params.tokenAddress as Signer | undefined,\n          payer,\n          tokenProgram: params.tokenProgram,\n          associatedTokenProgram: params.associatedTokenProgram,\n          createAssociatedTokenAccountInstructionKey:\n            params.createAssociatedTokenAccountInstructionKey,\n          createAccountInstructionKey: params.createTokenAccountInstructionKey,\n          initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        })\n    );\n  }\n\n  // Mint provided amount to the token account.\n  if (tokenAddress && params.tokenAmount) {\n    builder.add(\n      await metaplex.tokens().builders().mint({\n        mintAddress,\n        toToken: tokenAddress,\n        toTokenExists: true,\n        amount: params.tokenAmount,\n        mintAuthority,\n        tokenProgram: params.tokenProgram,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      })\n    );\n  }\n\n  return builder;\n};\n"],"names":["Key","createSftOperation","useOperation","createSftOperationHandler","handle","operation","metaplex","scope","useNewMint","Keypair","generate","useExistingMint","tokenOwner","tokenAddress","tokenSigner","confirmOptions","input","mintAddress","publicKey","associatedTokenAddress","findAssociatedTokenAccountPda","toPublicKey","tokenExists","tokenAccount","rpc","getAccount","exists","builder","createSftBuilder","throwIfCanceled","output","sendAndConfirm","sft","nfts","findByMint","undefined","run","assertSft","params","payer","identity","updateAuthority","mintAuthority","mintAndTokenBuilder","createMintAndTokenForSftBuilder","getContext","metadataPda","findMetadataPda","creatorsInput","creators","address","authority","share","length","map","creator","verified","equals","createMetadataInstruction","createCreateMetadataAccountV3Instruction","metadata","mint","createMetadataAccountArgsV3","data","name","symbol","uri","sellerFeeBasisPoints","collection","key","uses","isMutable","collectionDetails","isCollection","__kind","size","keys","isSigner","verifyAdditionalCreatorInstructions","filter","builders","verifyCreator","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","add","instruction","signers","createMetadataInstructionKey","when","collectionAuthority","verifyCollection","collectionMintAddress","isDelegated","collectionAuthorityIsDelegated","isSizedCollection","collectionIsSized","freezeAuthority","tokens","createMint","decimals","tokenProgram","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","isNewToken","isNewAssociatedToken","createToken","owner","token","associatedTokenProgram","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","tokenAmount","toToken","toTokenExists","amount","mintTokensInstructionKey"],"mappings":"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"}