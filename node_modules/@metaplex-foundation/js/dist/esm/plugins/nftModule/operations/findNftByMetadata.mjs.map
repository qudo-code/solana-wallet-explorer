{"version":3,"file":"findNftByMetadata.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByMetadata.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { Nft, NftWithToken, Sft, SftWithToken } from '../models';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMetadataOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findNftByMetadataOperation =\n  useOperation<FindNftByMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByMetadataOperation = Operation<\n  typeof Key,\n  FindNftByMetadataInput,\n  FindNftByMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByMetadataInput = {\n  metadata: PublicKey;\n  tokenAddress?: PublicKey;\n  tokenOwner?: PublicKey;\n  loadJsonMetadata?: boolean;\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByMetadataOperationHandler: OperationHandler<FindNftByMetadataOperation> =\n  {\n    handle: async (\n      operation: FindNftByMetadataOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftByMetadataOutput> => {\n      const metadata = toMetadataAccount(\n        await metaplex.rpc().getAccount(operation.input.metadata)\n      );\n      scope.throwIfCanceled();\n\n      return metaplex\n        .nfts()\n        .findByMint({\n          ...operation.input,\n          mintAddress: metadata.data.mint,\n        })\n        .run(scope);\n    },\n  };\n"],"names":["Key","findNftByMetadataOperation","useOperation","findNftByMetadataOperationHandler","handle","operation","metaplex","scope","metadata","toMetadataAccount","rpc","getAccount","input","throwIfCanceled","nfts","findByMint","mintAddress","data","mint","run"],"mappings":";;;AAOA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,4BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,YAAY,CAA6BF,GAA7B,EADP;AAGP;AACA;AACA;AACA;;AAyBA;AACA;AACA;AACA;AACO,MAAMG,iCAA+E,GAC1F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI+B;AACrC,IAAA,MAAMC,QAAQ,GAAGC,iBAAiB,CAChC,MAAMH,QAAQ,CAACI,GAAT,EAAeC,CAAAA,UAAf,CAA0BN,SAAS,CAACO,KAAV,CAAgBJ,QAA1C,CAD0B,CAAlC,CAAA;AAGAD,IAAAA,KAAK,CAACM,eAAN,EAAA,CAAA;IAEA,OAAOP,QAAQ,CACZQ,IADI,EAEJC,CAAAA,UAFI,CAEO,EACV,GAAGV,SAAS,CAACO,KADH;AAEVI,MAAAA,WAAW,EAAER,QAAQ,CAACS,IAAT,CAAcC,IAAAA;AAFjB,KAFP,CAMJC,CAAAA,GANI,CAMAZ,KANA,CAAP,CAAA;AAOD,GAAA;AAlBH;;;;"}