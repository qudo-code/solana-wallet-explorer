{"version":3,"file":"findNftsByCreator.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByCreator.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metadata, Nft, Sft } from '../models';\nimport { TokenMetadataProgram } from '../program';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByCreatorOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByCreatorOperation =\n  useOperation<FindNftsByCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByCreatorOperation = Operation<\n  typeof Key,\n  FindNftsByCreatorInput,\n  FindNftsByCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByCreatorInput = {\n  creator: PublicKey;\n  position?: number;\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByCreatorOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByCreatorOperationHandler: OperationHandler<FindNftsByCreatorOperation> =\n  {\n    handle: async (\n      operation: FindNftsByCreatorOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByCreatorOutput> => {\n      const { creator, position = 1, commitment } = operation.input;\n\n      const mints = await TokenMetadataProgram.metadataV1Accounts(metaplex)\n        .selectMint()\n        .whereCreator(position, creator)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex\n        .operations()\n        .execute(findNftsByMintListOperation({ mints, commitment }), scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByCreatorOperation","useOperation","findNftsByCreatorOperationHandler","handle","operation","metaplex","scope","creator","position","commitment","input","mints","TokenMetadataProgram","metadataV1Accounts","selectMint","whereCreator","getDataAsPublicKeys","throwIfCanceled","nfts","operations","execute","findNftsByMintListOperation","filter","nft"],"mappings":";;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,4BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,YAAY,CAA6BF,GAA7B,EADP;AAGP;AACA;AACA;AACA;;AAuBA;AACA;AACA;AACA;AACO,MAAMG,iCAA+E,GAC1F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI+B;IACrC,MAAM;MAAEC,OAAF;AAAWC,MAAAA,QAAQ,GAAG,CAAtB;AAAyBC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAAxD,CAAA;AAEA,IAAA,MAAMC,KAAK,GAAG,MAAMC,oBAAoB,CAACC,kBAArB,CAAwCR,QAAxC,CAAA,CACjBS,UADiB,EAAA,CAEjBC,YAFiB,CAEJP,QAFI,EAEMD,OAFN,CAAA,CAGjBS,mBAHiB,EAApB,CAAA;AAIAV,IAAAA,KAAK,CAACW,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CACxBc,UADgB,EAEhBC,CAAAA,OAFgB,CAERC,2BAA2B,CAAC;MAAEV,KAAF;AAASF,MAAAA,UAAAA;KAAV,CAFnB,EAE4CH,KAF5C,CAAnB,CAAA;AAGAA,IAAAA,KAAK,CAACW,eAAN,EAAA,CAAA;IAEA,OAAOC,IAAI,CAACI,MAAL,CAAaC,GAAD,IAAsCA,GAAG,KAAK,IAA1D,CAAP,CAAA;AACD,GAAA;AApBH;;;;"}