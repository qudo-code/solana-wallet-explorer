{"version":3,"file":"revokeNftCollectionAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftCollectionAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createRevokeCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findCollectionAuthorityRecordPda, findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftCollectionAuthorityOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityOperation =\n  useOperation<RevokeNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftCollectionAuthorityInput,\n  RevokeNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityInput = {\n  // Accounts.\n  mintAddress: PublicKey;\n  collectionAuthority: PublicKey;\n  revokeAuthority?: Signer; // Can be the update authority of the delegated collection authority. Defaults to mx.identity().\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftCollectionAuthorityOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftCollectionAuthorityOperationHandler: OperationHandler<RevokeNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftCollectionAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<RevokeNftCollectionAuthorityOutput> => {\n      return revokeNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityBuilderParams = Omit<\n  RevokeNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftCollectionAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionAuthority,\n    revokeAuthority = metaplex.identity(),\n  } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n    mintAddress,\n    collectionAuthority\n  );\n\n  const instruction = createRevokeCollectionAuthorityInstruction({\n    collectionAuthorityRecord,\n    delegateAuthority: collectionAuthority,\n    revokeAuthority: revokeAuthority.publicKey,\n    metadata,\n    mint: mintAddress,\n  });\n\n  // Temporary fix. The Shank macro wrongfully ask for the delegateAuthority to be a signer.\n  // https://github.com/metaplex-foundation/metaplex-program-library/pull/639\n  instruction.keys[1].isSigner = false;\n\n  return (\n    TransactionBuilder.make()\n\n      // Revoke the collection authority.\n      .add({\n        instruction,\n        signers: [revokeAuthority],\n        key: params.instructionKey ?? 'revokeCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftCollectionAuthorityOperation","useOperation","revokeNftCollectionAuthorityOperationHandler","handle","operation","metaplex","revokeNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","collectionAuthority","revokeAuthority","identity","metadata","findMetadataPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","instruction","createRevokeCollectionAuthorityInstruction","delegateAuthority","publicKey","mint","keys","isSigner","TransactionBuilder","make","add","signers","key","instructionKey"],"mappings":";;;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,YAAY,CAAwCF,GAAxC,EADP;AAGP;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAG0C;AAChD,IAAA,OAAOC,mCAAmC,CACxCD,QADwC,EAExCD,SAAS,CAACG,KAF8B,CAAnC,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,mCAAmC,GAAG,CACjDD,QADiD,EAEjDK,MAFiD,KAG1B;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,mBAFI;IAGJC,eAAe,GAAGR,QAAQ,CAACS,QAAT,EAAA;AAHd,GAAA,GAIFJ,MAJJ,CAAA;AAKA,EAAA,MAAMK,QAAQ,GAAGC,eAAe,CAACL,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMM,yBAAyB,GAAGC,gCAAgC,CAChEP,WADgE,EAEhEC,mBAFgE,CAAlE,CAAA;EAKA,MAAMO,WAAW,GAAGC,0CAA0C,CAAC;IAC7DH,yBAD6D;AAE7DI,IAAAA,iBAAiB,EAAET,mBAF0C;IAG7DC,eAAe,EAAEA,eAAe,CAACS,SAH4B;IAI7DP,QAJ6D;AAK7DQ,IAAAA,IAAI,EAAEZ,WAAAA;GALsD,CAA9D,CAZuB;AAqBvB;;AACAQ,EAAAA,WAAW,CAACK,IAAZ,CAAiB,CAAjB,CAAoBC,CAAAA,QAApB,GAA+B,KAA/B,CAAA;EAEA,OACEC,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHT,WADG;IAEHU,OAAO,EAAE,CAAChB,eAAD,CAFN;AAGHiB,IAAAA,GAAG,EAAEpB,CAAAA,qBAAAA,GAAAA,MAAM,CAACqB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,2BAAA;AAH3B,GAHP,CADF,CAAA;AAUD;;;;"}