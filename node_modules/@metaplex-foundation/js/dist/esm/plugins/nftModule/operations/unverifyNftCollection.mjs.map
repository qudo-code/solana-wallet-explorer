{"version":3,"file":"unverifyNftCollection.mjs","sources":["../../../../../src/plugins/nftModule/operations/unverifyNftCollection.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createUnverifyCollectionInstruction,\n  createUnverifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCollectionOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const unverifyNftCollectionOperation =\n  useOperation<UnverifyNftCollectionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnverifyNftCollectionOperation = Operation<\n  typeof Key,\n  UnverifyNftCollectionInput,\n  UnverifyNftCollectionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnverifyNftCollectionInput = {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  collectionMintAddress: PublicKey;\n  collectionAuthority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Data.\n  isSizedCollection?: boolean; // Defaults to true.\n  isDelegated?: boolean; // Defaults to false.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnverifyNftCollectionOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unverifyNftCollectionOperationHandler: OperationHandler<UnverifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCollectionOperation,\n      metaplex: Metaplex\n    ): Promise<UnverifyNftCollectionOutput> => {\n      return unverifyNftCollectionBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnverifyNftCollectionBuilderParams = Omit<\n  UnverifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unverifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCollectionBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n\n  const accounts = {\n    metadata: findMetadataPda(mintAddress),\n    collectionAuthority: collectionAuthority.publicKey,\n    payer: payer.publicKey,\n    collectionMint: collectionMintAddress,\n    collection: findMetadataPda(collectionMintAddress),\n    collectionMasterEditionAccount: findMasterEditionV2Pda(\n      collectionMintAddress\n    ),\n    collectionAuthorityRecord: isDelegated\n      ? findCollectionAuthorityRecordPda(\n          collectionMintAddress,\n          collectionAuthority.publicKey\n        )\n      : undefined,\n  };\n\n  const instruction = isSizedCollection\n    ? createUnverifySizedCollectionItemInstruction(accounts)\n    : createUnverifyCollectionInstruction(accounts);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Unverify the collection.\n      .add({\n        instruction: instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'unverifyCollection',\n      })\n  );\n};\n"],"names":["Key","unverifyNftCollectionOperation","useOperation","unverifyNftCollectionOperationHandler","handle","operation","metaplex","unverifyNftCollectionBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","collectionMintAddress","isSizedCollection","isDelegated","collectionAuthority","identity","payer","accounts","metadata","findMetadataPda","publicKey","collectionMint","collection","collectionMasterEditionAccount","findMasterEditionV2Pda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","undefined","instruction","createUnverifySizedCollectionItemInstruction","createUnverifyCollectionInstruction","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":";;;;;AAgBA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,8BAA8B,GACzCC,YAAY,CAAiCF,GAAjC,EADP;AAGP;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;AACO,MAAMG,qCAAuF,GAClG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGmC;AACzC,IAAA,OAAOC,4BAA4B,CACjCD,QADiC,EAEjCD,SAAS,CAACG,KAFuB,CAA5B,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,4BAA4B,GAAG,CAC1CD,QAD0C,EAE1CK,MAF0C,KAGnB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,qBAFI;AAGJC,IAAAA,iBAAiB,GAAG,IAHhB;AAIJC,IAAAA,WAAW,GAAG,KAJV;AAKJC,IAAAA,mBAAmB,GAAGV,QAAQ,CAACW,QAAT,EALlB;IAMJC,KAAK,GAAGZ,QAAQ,CAACW,QAAT,EAAA;AANJ,GAAA,GAOFN,MAPJ,CAAA;AASA,EAAA,MAAMQ,QAAQ,GAAG;AACfC,IAAAA,QAAQ,EAAEC,eAAe,CAACT,WAAD,CADV;IAEfI,mBAAmB,EAAEA,mBAAmB,CAACM,SAF1B;IAGfJ,KAAK,EAAEA,KAAK,CAACI,SAHE;AAIfC,IAAAA,cAAc,EAAEV,qBAJD;AAKfW,IAAAA,UAAU,EAAEH,eAAe,CAACR,qBAAD,CALZ;AAMfY,IAAAA,8BAA8B,EAAEC,sBAAsB,CACpDb,qBADoD,CANvC;IASfc,yBAAyB,EAAEZ,WAAW,GAClCa,gCAAgC,CAC9Bf,qBAD8B,EAE9BG,mBAAmB,CAACM,SAFU,CADE,GAKlCO,SAAAA;GAdN,CAAA;AAiBA,EAAA,MAAMC,WAAW,GAAGhB,iBAAiB,GACjCiB,4CAA4C,CAACZ,QAAD,CADX,GAEjCa,mCAAmC,CAACb,QAAD,CAFvC,CAAA;AAIA,EAAA,OACEc,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACejB,KADf,CAGE;AAHF,GAIGkB,GAJH,CAIO;AACHN,IAAAA,WAAW,EAAEA,WADV;AAEHO,IAAAA,OAAO,EAAE,CAACnB,KAAD,EAAQF,mBAAR,CAFN;AAGHsB,IAAAA,GAAG,EAAE3B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC4B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,oBAAA;AAH3B,GAJP,CADF,CAAA;AAWD;;;;"}