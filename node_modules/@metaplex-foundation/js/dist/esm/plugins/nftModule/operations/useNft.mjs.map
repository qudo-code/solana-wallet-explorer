{"version":3,"file":"useNft.mjs","sources":["../../../../../src/plugins/nftModule/operations/useNft.ts"],"sourcesContent":["import { ExpectedSignerError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createUtilizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport {\n  findMetadataPda,\n  findProgramAsBurnerPda,\n  findUseAuthorityRecordPda,\n} from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UseNftOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const useNftOperation = useOperation<UseNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UseNftOperation = Operation<typeof Key, UseNftInput, UseNftOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UseNftInput = {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  numberOfUses?: number; // Defaults to 1.\n  owner?: PublicKey | Signer; // Defaults to mx.identity().\n  ownerTokenAccount?: PublicKey; // Defaults to associated token account.\n  useAuthority?: Signer; // Defaults to not being used.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UseNftOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const useNftOperationHandler: OperationHandler<UseNftOperation> = {\n  handle: async (\n    operation: UseNftOperation,\n    metaplex: Metaplex\n  ): Promise<UseNftOutput> => {\n    return useNftBuilder(metaplex, operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UseNftBuilderParams = Omit<UseNftInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const useNftBuilder = (\n  metaplex: Metaplex,\n  params: UseNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    numberOfUses = 1,\n    owner = metaplex.identity(),\n    useAuthority,\n  } = params;\n\n  if (!isSigner(owner) && !useAuthority) {\n    throw new ExpectedSignerError('owner', 'PublicKey', {\n      problemSuffix:\n        'In order to use an NFT you must either provide the owner as a Signer ' +\n        'or a delegated use authority as a Signer.',\n    });\n  }\n\n  const metadata = findMetadataPda(mintAddress);\n  const tokenAccount =\n    params.ownerTokenAccount ??\n    findAssociatedTokenAccountPda(mintAddress, toPublicKey(owner));\n  const useAuthorityRecord = useAuthority\n    ? findUseAuthorityRecordPda(mintAddress, useAuthority.publicKey)\n    : undefined;\n  const programAsBurner = findProgramAsBurnerPda();\n\n  return (\n    TransactionBuilder.make()\n\n      // Update the metadata account.\n      .add({\n        instruction: createUtilizeInstruction(\n          {\n            metadata,\n            tokenAccount,\n            useAuthority: useAuthority\n              ? useAuthority.publicKey\n              : toPublicKey(owner),\n            mint: mintAddress,\n            owner: toPublicKey(owner),\n            useAuthorityRecord,\n            burner: useAuthorityRecord ? programAsBurner : undefined,\n          },\n          { utilizeArgs: { numberOfUses } }\n        ),\n        signers: [owner, useAuthority].filter(isSigner),\n        key: params.instructionKey ?? 'utilizeNft',\n      })\n  );\n};\n"],"names":["Key","useNftOperation","useOperation","useNftOperationHandler","handle","operation","metaplex","useNftBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","numberOfUses","owner","identity","useAuthority","isSigner","ExpectedSignerError","problemSuffix","metadata","findMetadataPda","tokenAccount","ownerTokenAccount","findAssociatedTokenAccountPda","toPublicKey","useAuthorityRecord","findUseAuthorityRecordPda","publicKey","undefined","programAsBurner","findProgramAsBurnerPda","TransactionBuilder","make","add","instruction","createUtilizeInstruction","mint","burner","utilizeArgs","signers","filter","key","instructionKey"],"mappings":";;;;;;;;;AAsBA;AACA;;AAEA,MAAMA,GAAG,GAAG,iBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,eAAe,GAAGC,YAAY,CAAkBF,GAAlB,EAApC;AAEP;AACA;AACA;AACA;;AA2BA;AACA;AACA;AACA;AACO,MAAMG,sBAAyD,GAAG;AACvEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGoB;AAC1B,IAAA,OAAOC,aAAa,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAb,CAAyCC,cAAzC,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;AATsE;AAazE;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;MACaH,aAAa,GAAG,CAC3BD,QAD2B,EAE3BK,MAF2B,KAGJ;AAAA,EAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;AAEJC,IAAAA,YAAY,GAAG,CAFX;AAGJC,IAAAA,KAAK,GAAGR,QAAQ,CAACS,QAAT,EAHJ;AAIJC,IAAAA,YAAAA;AAJI,GAAA,GAKFL,MALJ,CAAA;;EAOA,IAAI,CAACM,QAAQ,CAACH,KAAD,CAAT,IAAoB,CAACE,YAAzB,EAAuC;AACrC,IAAA,MAAM,IAAIE,mBAAJ,CAAwB,OAAxB,EAAiC,WAAjC,EAA8C;AAClDC,MAAAA,aAAa,EACX,uEACA,GAAA,2CAAA;AAHgD,KAA9C,CAAN,CAAA;AAKD,GAAA;;AAED,EAAA,MAAMC,QAAQ,GAAGC,eAAe,CAACT,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMU,YAAY,GAAA,CAAA,qBAAA,GAChBX,MAAM,CAACY,iBADS,MAEhBC,IAAAA,IAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,qBAAAA,GAAAA,6BAA6B,CAACZ,WAAD,EAAca,WAAW,CAACX,KAAD,CAAzB,CAF/B,CAAA;AAGA,EAAA,MAAMY,kBAAkB,GAAGV,YAAY,GACnCW,yBAAyB,CAACf,WAAD,EAAcI,YAAY,CAACY,SAA3B,CADU,GAEnCC,SAFJ,CAAA;EAGA,MAAMC,eAAe,GAAGC,sBAAsB,EAA9C,CAAA;EAEA,OACEC,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,wBAAwB,CACnC;MACEhB,QADF;MAEEE,YAFF;MAGEN,YAAY,EAAEA,YAAY,GACtBA,YAAY,CAACY,SADS,GAEtBH,WAAW,CAACX,KAAD,CALjB;AAMEuB,MAAAA,IAAI,EAAEzB,WANR;AAOEE,MAAAA,KAAK,EAAEW,WAAW,CAACX,KAAD,CAPpB;MAQEY,kBARF;AASEY,MAAAA,MAAM,EAAEZ,kBAAkB,GAAGI,eAAH,GAAqBD,SAAAA;AATjD,KADmC,EAYnC;AAAEU,MAAAA,WAAW,EAAE;AAAE1B,QAAAA,YAAAA;AAAF,OAAA;AAAf,KAZmC,CADlC;IAeH2B,OAAO,EAAE,CAAC1B,KAAD,EAAQE,YAAR,CAAsByB,CAAAA,MAAtB,CAA6BxB,QAA7B,CAfN;AAgBHyB,IAAAA,GAAG,EAAE/B,CAAAA,qBAAAA,GAAAA,MAAM,CAACgC,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,YAAA;AAhB3B,GAHP,CADF,CAAA;AAuBD;;;;"}