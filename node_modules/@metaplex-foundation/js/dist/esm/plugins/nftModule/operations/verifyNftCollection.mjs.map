{"version":3,"file":"verifyNftCollection.mjs","sources":["../../../../../src/plugins/nftModule/operations/verifyNftCollection.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createVerifyCollectionInstruction,\n  createVerifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'VerifyNftCollectionOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const verifyNftCollectionOperation =\n  useOperation<VerifyNftCollectionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type VerifyNftCollectionOperation = Operation<\n  typeof Key,\n  VerifyNftCollectionInput,\n  VerifyNftCollectionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type VerifyNftCollectionInput = {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  collectionMintAddress: PublicKey;\n  collectionAuthority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Data.\n  isSizedCollection?: boolean; // Defaults to true.\n  isDelegated?: boolean; // Defaults to false.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type VerifyNftCollectionOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const verifyNftCollectionOperationHandler: OperationHandler<VerifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: VerifyNftCollectionOperation,\n      metaplex: Metaplex\n    ): Promise<VerifyNftCollectionOutput> => {\n      return verifyNftCollectionBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type VerifyNftCollectionBuilderParams = Omit<\n  VerifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const verifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: VerifyNftCollectionBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n\n  const accounts = {\n    metadata: findMetadataPda(mintAddress),\n    collectionAuthority: collectionAuthority.publicKey,\n    payer: payer.publicKey,\n    collectionMint: collectionMintAddress,\n    collection: findMetadataPda(collectionMintAddress),\n    collectionMasterEditionAccount: findMasterEditionV2Pda(\n      collectionMintAddress\n    ),\n  };\n\n  const instruction = isSizedCollection\n    ? createVerifySizedCollectionItemInstruction(accounts)\n    : createVerifyCollectionInstruction(accounts);\n\n  if (isDelegated) {\n    instruction.keys.push({\n      pubkey: findCollectionAuthorityRecordPda(\n        collectionMintAddress,\n        collectionAuthority.publicKey\n      ),\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Verify the collection.\n      .add({\n        instruction: instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'verifyCollection',\n      })\n  );\n};\n"],"names":["Key","verifyNftCollectionOperation","useOperation","verifyNftCollectionOperationHandler","handle","operation","metaplex","verifyNftCollectionBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","collectionMintAddress","isSizedCollection","isDelegated","collectionAuthority","identity","payer","accounts","metadata","findMetadataPda","publicKey","collectionMint","collection","collectionMasterEditionAccount","findMasterEditionV2Pda","instruction","createVerifySizedCollectionItemInstruction","createVerifyCollectionInstruction","keys","push","pubkey","findCollectionAuthorityRecordPda","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":";;;;;AAgBA;AACA;;AAEA,MAAMA,GAAG,GAAG,8BAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,4BAA4B,GACvCC,YAAY,CAA+BF,GAA/B,EADP;AAGP;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;AACO,MAAMG,mCAAmF,GAC9F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGiC;AACvC,IAAA,OAAOC,0BAA0B,CAC/BD,QAD+B,EAE/BD,SAAS,CAACG,KAFqB,CAA1B,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,0BAA0B,GAAG,CACxCD,QADwC,EAExCK,MAFwC,KAGjB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,qBAFI;AAGJC,IAAAA,iBAAiB,GAAG,IAHhB;AAIJC,IAAAA,WAAW,GAAG,KAJV;AAKJC,IAAAA,mBAAmB,GAAGV,QAAQ,CAACW,QAAT,EALlB;IAMJC,KAAK,GAAGZ,QAAQ,CAACW,QAAT,EAAA;AANJ,GAAA,GAOFN,MAPJ,CAAA;AASA,EAAA,MAAMQ,QAAQ,GAAG;AACfC,IAAAA,QAAQ,EAAEC,eAAe,CAACT,WAAD,CADV;IAEfI,mBAAmB,EAAEA,mBAAmB,CAACM,SAF1B;IAGfJ,KAAK,EAAEA,KAAK,CAACI,SAHE;AAIfC,IAAAA,cAAc,EAAEV,qBAJD;AAKfW,IAAAA,UAAU,EAAEH,eAAe,CAACR,qBAAD,CALZ;IAMfY,8BAA8B,EAAEC,sBAAsB,CACpDb,qBADoD,CAAA;GANxD,CAAA;AAWA,EAAA,MAAMc,WAAW,GAAGb,iBAAiB,GACjCc,0CAA0C,CAACT,QAAD,CADT,GAEjCU,iCAAiC,CAACV,QAAD,CAFrC,CAAA;;AAIA,EAAA,IAAIJ,WAAJ,EAAiB;AACfY,IAAAA,WAAW,CAACG,IAAZ,CAAiBC,IAAjB,CAAsB;MACpBC,MAAM,EAAEC,gCAAgC,CACtCpB,qBADsC,EAEtCG,mBAAmB,CAACM,SAFkB,CADpB;AAKpBY,MAAAA,UAAU,EAAE,KALQ;AAMpBC,MAAAA,QAAQ,EAAE,KAAA;KANZ,CAAA,CAAA;AAQD,GAAA;;AAED,EAAA,OACEC,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACepB,KADf,CAGE;AAHF,GAIGqB,GAJH,CAIO;AACHZ,IAAAA,WAAW,EAAEA,WADV;AAEHa,IAAAA,OAAO,EAAE,CAACtB,KAAD,EAAQF,mBAAR,CAFN;AAGHyB,IAAAA,GAAG,EAAE9B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC+B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,kBAAA;AAH3B,GAJP,CADF,CAAA;AAWD;;;;"}