{"version":3,"file":"approveTokenDelegateAuthority.mjs","sources":["../../../../../src/plugins/tokenModule/operations/approveTokenDelegateAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createApproveInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { TokenProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveTokenDelegateAuthorityOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityOperation =\n  useOperation<ApproveTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  ApproveTokenDelegateAuthorityInput,\n  ApproveTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n * */\nexport type ApproveTokenDelegateAuthorityInput = {\n  mintAddress: PublicKey;\n  delegateAuthority: PublicKey;\n  amount?: SplTokenAmount;\n  owner?: Signer; // Defaults to mx.identity().\n  tokenAddress?: PublicKey; // Defaults to associated account.\n  multiSigners?: KeypairSigner[]; // Defaults to [].\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveTokenDelegateAuthorityOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveTokenDelegateAuthorityOperationHandler: OperationHandler<ApproveTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveTokenDelegateAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<ApproveTokenDelegateAuthorityOutput> => {\n      return approveTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveTokenDelegateAuthorityBuilderParams = Omit<\n  ApproveTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveTokenDelegateAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    delegateAuthority,\n    amount = token(1),\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenAddressOrAta =\n    tokenAddress ?? findAssociatedTokenAccountPda(mintAddress, ownerPublicKey);\n\n  return TransactionBuilder.make().add({\n    instruction: createApproveInstruction(\n      tokenAddressOrAta,\n      delegateAuthority,\n      ownerPublicKey,\n      amount.basisPoints.toNumber(),\n      multiSigners,\n      tokenProgram\n    ),\n    signers,\n    key: params.instructionKey ?? 'approveDelegateAuthority',\n  });\n};\n"],"names":["Key","approveTokenDelegateAuthorityOperation","useOperation","approveTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","approveTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","delegateAuthority","amount","token","owner","identity","tokenAddress","multiSigners","tokenProgram","TokenProgram","publicKey","ownerPublicKey","signers","isSigner","tokenAddressOrAta","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createApproveInstruction","basisPoints","toNumber","key","instructionKey"],"mappings":";;;;;;;;AAmBA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,YAAY,CAAyCF,GAAzC,EADP;AAGP;AACA;AACA;AACA;;AA8BA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAG2C;AACjD,IAAA,OAAOC,oCAAoC,CACzCD,QADyC,EAEzCD,SAAS,CAACG,KAF+B,CAApC,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,oCAAoC,GAAG,CAClDD,QADkD,EAElDK,MAFkD,KAG3B;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,iBAFI;AAGJC,IAAAA,MAAM,GAAGC,KAAK,CAAC,CAAD,CAHV;AAIJC,IAAAA,KAAK,GAAGV,QAAQ,CAACW,QAAT,EAJJ;IAKJC,YALI;AAMJC,IAAAA,YAAY,GAAG,EANX;IAOJC,YAAY,GAAGC,YAAY,CAACC,SAAAA;AAPxB,GAAA,GAQFX,MARJ,CAAA;EAUA,MAAM,CAACY,cAAD,EAAiBC,OAAjB,CAAA,GAA4BC,QAAQ,CAACT,KAAD,CAAR,GAC9B,CAACA,KAAK,CAACM,SAAP,EAAkB,CAACN,KAAD,CAAlB,CAD8B,GAE9B,CAACA,KAAD,EAAQG,YAAR,CAFJ,CAAA;AAIA,EAAA,MAAMO,iBAAiB,GACrBR,YADqB,KAAA,IAAA,IACrBA,YADqB,KAAA,KAAA,CAAA,GACrBA,YADqB,GACLS,6BAA6B,CAACf,WAAD,EAAcW,cAAd,CAD/C,CAAA;AAGA,EAAA,OAAOK,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;AACnCC,IAAAA,WAAW,EAAEC,wBAAwB,CACnCN,iBADmC,EAEnCb,iBAFmC,EAGnCU,cAHmC,EAInCT,MAAM,CAACmB,WAAP,CAAmBC,QAAnB,EAJmC,EAKnCf,YALmC,EAMnCC,YANmC,CADF;IASnCI,OATmC;AAUnCW,IAAAA,GAAG,EAAExB,CAAAA,qBAAAA,GAAAA,MAAM,CAACyB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,0BAAA;AAVK,GAA9B,CAAP,CAAA;AAYD;;;;"}