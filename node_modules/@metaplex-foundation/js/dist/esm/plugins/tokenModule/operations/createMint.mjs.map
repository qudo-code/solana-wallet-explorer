{"version":3,"file":"createMint.mjs","sources":["../../../../../src/plugins/tokenModule/operations/createMint.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport { createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Mint } from '../models/Mint';\nimport { TokenProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateMintOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createMintOperation = useOperation<CreateMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateMintOperation = Operation<\n  typeof Key,\n  CreateMintInput,\n  CreateMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  mint?: Signer; // Defaults to new generated Keypair.\n  payer?: Signer; // Defaults to mx.identity().\n  mintAuthority?: PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mintAuthority.\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * Create a new Mint account from the provided input\n * and returns the newly created `Mint` model.\n *\n * @group Operations\n * @category Outputs\n */\nexport type CreateMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  mint: Mint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createMintOperationHandler: OperationHandler<CreateMintOperation> =\n  {\n    async handle(\n      operation: CreateMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateMintOutput> {\n      const builder = await createMintBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n      scope.throwIfCanceled();\n\n      const mint = await metaplex\n        .tokens()\n        .findMintByAddress({ address: output.mintSigner.publicKey })\n        .run(scope);\n\n      return { ...output, mint };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateMintBuilderParams = Omit<\n  CreateMintInput,\n  'confirmOptions'\n> & {\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateMintBuilderContext = Omit<\n  CreateMintOutput,\n  'response' | 'mint'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateMintBuilderParams\n): Promise<TransactionBuilder<CreateMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    payer = metaplex.identity(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = mintAuthority,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  return (\n    TransactionBuilder.make<CreateMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint })\n\n      // Create an empty account for the mint.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: mint,\n            space: MINT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the mint.\n      .add({\n        instruction: createInitializeMintInstruction(\n          mint.publicKey,\n          decimals,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram\n        ),\n        signers: [mint],\n        key: params.initializeMintInstructionKey ?? 'initializeMint',\n      })\n  );\n};\n"],"names":["Key","createMintOperation","useOperation","createMintOperationHandler","handle","operation","metaplex","scope","builder","createMintBuilder","input","throwIfCanceled","output","sendAndConfirm","confirmOptions","mint","tokens","findMintByAddress","address","mintSigner","publicKey","run","params","decimals","Keypair","generate","payer","identity","mintAuthority","freezeAuthority","tokenProgram","TokenProgram","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","MINT_SIZE","program","instructionKey","createAccountInstructionKey","instruction","createInitializeMintInstruction","signers","key","initializeMintInstructionKey"],"mappings":";;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,EAAxC;AAEP;AACA;AACA;AACA;;AAkCA;AACA;AACA;AACA;AACO,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI6B;IAC3B,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,CAAvC,CAAA;AACAH,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,MAAM,GAAG,MAAMJ,OAAO,CAACK,cAAR,CACnBP,QADmB,EAEnBD,SAAS,CAACK,KAAV,CAAgBI,cAFG,CAArB,CAAA;AAIAP,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;IAEA,MAAMI,IAAI,GAAG,MAAMT,QAAQ,CACxBU,MADgB,EAAA,CAEhBC,iBAFgB,CAEE;AAAEC,MAAAA,OAAO,EAAEN,MAAM,CAACO,UAAP,CAAkBC,SAAAA;AAA7B,KAFF,CAGhBC,CAAAA,GAHgB,CAGZd,KAHY,CAAnB,CAAA;IAKA,OAAO,EAAE,GAAGK,MAAL;AAAaG,MAAAA,IAAAA;KAApB,CAAA;AACD,GAAA;;AArBH;AAyBF;AACA;;AAEA;AACA;AACA;AACA;;AAkBA;AACA;AACA;AACA;MACaN,iBAAiB,GAAG,OAC/BH,QAD+B,EAE/BgB,MAF+B,KAG2B;AAAA,EAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EAC1D,MAAM;AACJC,IAAAA,QAAQ,GAAG,CADP;AAEJR,IAAAA,IAAI,GAAGS,OAAO,CAACC,QAAR,EAFH;AAGJC,IAAAA,KAAK,GAAGpB,QAAQ,CAACqB,QAAT,EAHJ;AAIJC,IAAAA,aAAa,GAAGtB,QAAQ,CAACqB,QAAT,GAAoBP,SAJhC;AAKJS,IAAAA,eAAe,GAAGD,aALd;IAMJE,YAAY,GAAGC,YAAY,CAACX,SAAAA;AANxB,GAAA,GAOFE,MAPJ,CAAA;EASA,OACEU,kBAAkB,CAACC,IAAnB,EAAA,CACGC,WADH,CACeR,KADf,CAEGS,CAAAA,UAFH,CAEc;AAAEhB,IAAAA,UAAU,EAAEJ,IAAAA;AAAd,GAFd,CAIE;GACCqB,GALH,CAMI,MAAM9B,QAAQ,CACX+B,MADG,EAEHC,CAAAA,QAFG,EAGHC,CAAAA,aAHG,CAGW;IACbb,KADa;AAEbc,IAAAA,UAAU,EAAEzB,IAFC;AAGb0B,IAAAA,KAAK,EAAEC,SAHM;AAIbC,IAAAA,OAAO,EAAEb,YAJI;AAKbc,IAAAA,cAAc,EACZtB,CAAAA,qBAAAA,GAAAA,MAAM,CAACuB,2BADK,MAC0B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAN3B,GAHX,CANV,CAmBE;AAnBF,GAoBGT,GApBH,CAoBO;AACHU,IAAAA,WAAW,EAAEC,+BAA+B,CAC1ChC,IAAI,CAACK,SADqC,EAE1CG,QAF0C,EAG1CK,aAH0C,EAI1CC,eAJ0C,EAK1CC,YAL0C,CADzC;IAQHkB,OAAO,EAAE,CAACjC,IAAD,CARN;AASHkC,IAAAA,GAAG,EAAE3B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC4B,4BAAT,MAAyC,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,gBAAA;AATzC,GApBP,CADF,CAAA;AAiCD;;;;"}