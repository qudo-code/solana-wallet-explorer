{"version":3,"file":"createTokenWithMint.mjs","sources":["../../../../../src/plugins/tokenModule/operations/createTokenWithMint.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { MintAuthorityMustBeSignerToMintInitialSupplyError } from '../errors';\nimport { TokenWithMint } from '../models/Token';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenWithMintOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const createTokenWithMintOperation =\n  useOperation<CreateTokenWithMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateTokenWithMintOperation = Operation<\n  typeof Key,\n  CreateTokenWithMintInput,\n  CreateTokenWithMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateTokenWithMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  initialSupply?: SplTokenAmount; // Defaults to 0 tokens.\n  mint?: Signer; // Defaults to new generated Keypair.\n  mintAuthority?: Signer | PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n  owner?: PublicKey; // Defaults to mx.identity().\n  token?: Signer; // Defaults to creating an associated token address instead.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateTokenWithMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  token: TokenWithMint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createTokenWithMintOperationHandler: OperationHandler<CreateTokenWithMintOperation> =\n  {\n    async handle(\n      operation: CreateTokenWithMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenWithMintOutput> {\n      const builder = await createTokenWithMintBuilder(\n        metaplex,\n        operation.input\n      );\n      scope.throwIfCanceled();\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n      scope.throwIfCanceled();\n\n      const token = await metaplex\n        .tokens()\n        .findTokenWithMintByMint({\n          mint: output.mintSigner.publicKey,\n          address: output.tokenAddress,\n          addressType: 'token',\n        })\n        .run(scope);\n\n      return { ...output, token };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenWithMintBuilderParams = Omit<\n  CreateTokenWithMintInput,\n  'confirmOptions'\n> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateTokenWithMintBuilderContext = {\n  mintSigner: Signer;\n  tokenAddress: PublicKey;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createTokenWithMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenWithMintBuilderParams\n): Promise<TransactionBuilder<CreateTokenWithMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    initialSupply,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n  } = params;\n\n  const createMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createMint({\n      decimals,\n      mint,\n      payer,\n      mintAuthority: toPublicKey(mintAuthority),\n      freezeAuthority,\n      tokenProgram,\n      createAccountInstructionKey:\n        params.createMintAccountInstructionKey ?? 'createMintAccount',\n      initializeMintInstructionKey:\n        params.initializeMintInstructionKey ?? 'initializeMint',\n    });\n\n  const createTokenBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createToken({\n      mint: mint.publicKey,\n      owner,\n      token,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey ??\n        'createAssociatedTokenAccount',\n      createAccountInstructionKey:\n        params.createTokenAccountInstructionKey ?? 'createTokenAccount',\n      initializeTokenInstructionKey:\n        params.initializeTokenInstructionKey ?? 'initializeToken',\n    });\n\n  const { tokenAddress } = createTokenBuilder.getContext();\n\n  const builder = TransactionBuilder.make<CreateTokenWithMintBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ mintSigner: mint, tokenAddress })\n\n    // Create the Mint account.\n    .add(createMintBuilder)\n\n    // Create the Token account.\n    .add(createTokenBuilder);\n\n  // Potentially mint the initial supply to the token account.\n  if (!!initialSupply) {\n    if (!isSigner(mintAuthority)) {\n      throw new MintAuthorityMustBeSignerToMintInitialSupplyError();\n    }\n\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .mint({\n          mintAddress: mint.publicKey,\n          toToken: tokenAddress,\n          amount: initialSupply,\n          mintAuthority,\n          tokenProgram,\n          mintTokensInstructionKey:\n            params.mintTokensInstructionKey ?? 'mintTokens',\n        })\n    );\n  }\n\n  return builder;\n};\n"],"names":["Key","createTokenWithMintOperation","useOperation","createTokenWithMintOperationHandler","handle","operation","metaplex","scope","builder","createTokenWithMintBuilder","input","throwIfCanceled","output","sendAndConfirm","confirmOptions","token","tokens","findTokenWithMintByMint","mint","mintSigner","publicKey","address","tokenAddress","addressType","run","params","decimals","initialSupply","Keypair","generate","mintAuthority","identity","freezeAuthority","owner","payer","tokenProgram","associatedTokenProgram","createMintBuilder","builders","createMint","toPublicKey","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","createTokenBuilder","createToken","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","getContext","TransactionBuilder","make","setFeePayer","setContext","add","isSigner","MintAuthorityMustBeSignerToMintInitialSupplyError","mintAddress","toToken","amount","mintTokensInstructionKey"],"mappings":"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"}