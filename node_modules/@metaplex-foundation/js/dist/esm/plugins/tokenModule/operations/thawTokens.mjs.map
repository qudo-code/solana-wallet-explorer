{"version":3,"file":"thawTokens.mjs","sources":["../../../../../src/plugins/tokenModule/operations/thawTokens.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createThawAccountInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { TokenProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawTokensOperation' as const;\n\n/**\n * @group Operations\n * @category Constructors\n */\nexport const thawTokensOperation = useOperation<ThawTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawTokensOperation = Operation<\n  typeof Key,\n  ThawTokensInput,\n  ThawTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawTokensInput = {\n  mintAddress: PublicKey;\n  freezeAuthority: PublicKey | Signer;\n  tokenOwner?: PublicKey; // Defaults to mx.identity().\n  tokenAddress?: PublicKey; // Defaults to associated account.\n  multiSigners?: KeypairSigner[]; // Defaults to [].\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawTokensOperationHandler: OperationHandler<ThawTokensOperation> =\n  {\n    async handle(\n      operation: ThawTokensOperation,\n      metaplex: Metaplex\n    ): Promise<ThawTokensOutput> {\n      return thawTokensBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawTokensBuilderParams = Omit<\n  ThawTokensInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawTokensBuilder = (\n  metaplex: Metaplex,\n  params: ThawTokensBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority)\n    ? [freezeAuthority.publicKey, [freezeAuthority]]\n    : [freezeAuthority, multiSigners];\n\n  const tokenAddressOrAta =\n    tokenAddress ?? findAssociatedTokenAccountPda(mintAddress, tokenOwner);\n\n  return TransactionBuilder.make().add({\n    instruction: createThawAccountInstruction(\n      tokenAddressOrAta,\n      mintAddress,\n      authorityPublicKey,\n      multiSigners,\n      tokenProgram\n    ),\n    signers,\n    key: params.instructionKey ?? 'thawTokens',\n  });\n};\n"],"names":["Key","thawTokensOperation","useOperation","thawTokensOperationHandler","handle","operation","metaplex","thawTokensBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","tokenOwner","identity","publicKey","tokenAddress","multiSigners","freezeAuthority","tokenProgram","TokenProgram","authorityPublicKey","signers","isSigner","tokenAddressOrAta","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createThawAccountInstruction","key","instructionKey"],"mappings":";;;;;;;AAiBA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ,CAAA;AAEA;AACA;AACA;AACA;;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,EAAxC;AAEP;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACO,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAG6B;AAC3B,IAAA,OAAOC,iBAAiB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAjB,CAA6CC,cAA7C,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;MACaH,iBAAiB,GAAG,CAC/BD,QAD+B,EAE/BK,MAF+B,KAGR;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;AAEJC,IAAAA,UAAU,GAAGP,QAAQ,CAACQ,QAAT,GAAoBC,SAF7B;IAGJC,YAHI;AAIJC,IAAAA,YAAY,GAAG,EAJX;IAKJC,eALI;IAMJC,YAAY,GAAGC,YAAY,CAACL,SAAAA;AANxB,GAAA,GAOFJ,MAPJ,CAAA;EASA,MAAM,CAACU,kBAAD,EAAqBC,OAArB,CAAA,GAAgCC,QAAQ,CAACL,eAAD,CAAR,GAClC,CAACA,eAAe,CAACH,SAAjB,EAA4B,CAACG,eAAD,CAA5B,CADkC,GAElC,CAACA,eAAD,EAAkBD,YAAlB,CAFJ,CAAA;AAIA,EAAA,MAAMO,iBAAiB,GACrBR,YADqB,KAAA,IAAA,IACrBA,YADqB,KAAA,KAAA,CAAA,GACrBA,YADqB,GACLS,6BAA6B,CAACb,WAAD,EAAcC,UAAd,CAD/C,CAAA;AAGA,EAAA,OAAOa,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;AACnCC,IAAAA,WAAW,EAAEC,4BAA4B,CACvCN,iBADuC,EAEvCZ,WAFuC,EAGvCS,kBAHuC,EAIvCJ,YAJuC,EAKvCE,YALuC,CADN;IAQnCG,OARmC;AASnCS,IAAAA,GAAG,EAAEpB,CAAAA,qBAAAA,GAAAA,MAAM,CAACqB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,YAAA;AATK,GAA9B,CAAP,CAAA;AAWD;;;;"}