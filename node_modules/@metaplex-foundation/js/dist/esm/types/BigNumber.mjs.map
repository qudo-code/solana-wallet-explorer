{"version":3,"file":"BigNumber.mjs","sources":["../../../src/types/BigNumber.ts"],"sourcesContent":["import type { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { assert, Opaque, Option } from '@/utils';\n\nexport type BigNumber = Opaque<BN, 'BigNumber'>;\nexport type BigNumberValues =\n  | number\n  | string\n  | number[]\n  | Uint8Array\n  | Buffer\n  | BN;\n\nexport const toBigNumber = (\n  value: BigNumberValues,\n  endian?: BN.Endianness\n): BigNumber => {\n  return new BN(value, endian) as BigNumber;\n};\n\nexport const toOptionBigNumber = (\n  value: Option<BigNumberValues>\n): Option<BigNumber> => {\n  return value === null ? null : toBigNumber(value);\n};\n\nexport const isBigNumber = (value: any): value is BigNumber => {\n  return value?.__opaque__ === 'BigNumber';\n};\n\nexport function assertBigNumber(value: any): asserts value is BigNumber {\n  assert(isBigNumber(value), 'Expected BigNumber type');\n}\n"],"names":["toBigNumber","value","endian","BN","toOptionBigNumber","isBigNumber","__opaque__","assertBigNumber","assert"],"mappings":";;;MAaaA,WAAW,GAAG,CACzBC,KADyB,EAEzBC,MAFyB,KAGX;AACd,EAAA,OAAO,IAAIC,EAAJ,CAAOF,KAAP,EAAcC,MAAd,CAAP,CAAA;AACD,EALM;AAOME,MAAAA,iBAAiB,GAC5BH,KAD+B,IAET;EACtB,OAAOA,KAAK,KAAK,IAAV,GAAiB,IAAjB,GAAwBD,WAAW,CAACC,KAAD,CAA1C,CAAA;AACD,EAJM;AAMMI,MAAAA,WAAW,GAAIJ,KAAD,IAAoC;EAC7D,OAAO,CAAAA,KAAK,KAAA,IAAL,IAAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,KAAK,CAAEK,UAAP,MAAsB,WAA7B,CAAA;AACD,EAFM;AAIA,SAASC,eAAT,CAAyBN,KAAzB,EAAiE;AACtEO,EAAAA,MAAM,CAACH,WAAW,CAACJ,KAAD,CAAZ,EAAqB,yBAArB,CAAN,CAAA;AACD;;;;"}