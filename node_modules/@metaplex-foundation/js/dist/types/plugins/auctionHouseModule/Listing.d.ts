import { PublicKey } from '@solana/web3.js';
import { BigNumber, DateTime, Pda, SolAmount, SplTokenAmount } from '../../types';
import { ListingReceiptAccount } from './accounts';
import { NftWithToken, SftWithToken } from '../nftModule';
import { Option } from '../../utils';
import { AuctionHouse } from './AuctionHouse';
export declare type Listing = Readonly<{
    model: 'listing';
    lazy: false;
    auctionHouse: AuctionHouse;
    asset: NftWithToken | SftWithToken;
    tradeStateAddress: Pda;
    sellerAddress: PublicKey;
    bookkeeperAddress: Option<PublicKey>;
    receiptAddress: Option<Pda>;
    purchaseReceiptAddress: Option<PublicKey>;
    price: SolAmount | SplTokenAmount;
    tokens: SplTokenAmount;
    createdAt: DateTime;
    canceledAt: Option<DateTime>;
}>;
export declare const isListing: (value: any) => value is Readonly<{
    model: 'listing';
    lazy: false;
    auctionHouse: AuctionHouse;
    asset: NftWithToken | SftWithToken;
    tradeStateAddress: Pda;
    sellerAddress: PublicKey;
    bookkeeperAddress: Option<PublicKey>;
    receiptAddress: Option<Pda>;
    purchaseReceiptAddress: Option<PublicKey>;
    price: SolAmount | SplTokenAmount;
    tokens: SplTokenAmount;
    createdAt: DateTime;
    canceledAt: Option<DateTime>;
}>;
export declare function assertListing(value: any): asserts value is Listing;
export declare const toListing: (account: ListingReceiptAccount, auctionHouse: AuctionHouse, asset: NftWithToken | SftWithToken) => Listing;
export declare type LazyListing = Omit<Listing, 'lazy' | 'asset' | 'tokens'> & Readonly<{
    lazy: true;
    metadataAddress: PublicKey;
    tokens: BigNumber;
}>;
export declare const isLazyListing: (value: any) => value is LazyListing;
export declare function assertLazyListing(value: any): asserts value is LazyListing;
export declare const toLazyListing: (account: ListingReceiptAccount, auctionHouse: AuctionHouse) => LazyListing;
