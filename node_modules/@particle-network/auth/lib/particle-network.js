"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParticleNetwork = void 0;
const auth_1 = require("./auth");
const types_1 = require("./types");
class ParticleNetwork {
    constructor(config) {
        if (!config) {
            //for solana wallet adapter
            config = {
                projectId: "34c6b829-5b89-44e8-90a9-6d982787b9c9",
                clientKey: "c6Z44Ml4TQeNhctvwYgdSv6DBzfjf6t6CB0JDscR",
                appId: "c1ad1496-5707-4db6-8a2b-3e9f7273d846",
                chainName: "solana",
                chainId: 101, //mainnet
            };
        }
        if ((!config.chainName || typeof config.chainName === "string") &&
            (!config.chainId || typeof config.chainId === "number") &&
            typeof config.projectId === "string" &&
            typeof config.clientKey === "string" &&
            typeof config.appId === "string") {
            if (config.chainName) {
                if (!Object.keys(types_1.supportChains).includes(config.chainName) ||
                    (config.chainId && !types_1.supportChains[config.chainName].includes(config.chainId))) {
                    throw types_1.AuthError.unsupportedChain();
                }
                if (!config.chainId) {
                    config.chainId = types_1.supportChains[config.chainName][0];
                }
            }
            else {
                config.chainName = "ethereum";
                config.chainId = 1;
            }
            this.config = config;
            this.auth = new auth_1.Auth(this.config);
        }
        else {
            throw types_1.AuthError.paramsError();
        }
    }
    setAuthTheme(config) {
        this.auth.setAuthTheme(config);
    }
    setChainInfo(chain) {
        return this.auth.setChainInfo(chain);
    }
}
exports.ParticleNetwork = ParticleNetwork;
//# sourceMappingURL=particle-network.js.map