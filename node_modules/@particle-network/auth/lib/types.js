"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportChains = exports.AuthTypes = exports.AuthError = void 0;
class AuthError {
    constructor(code, message) {
        this.code = code;
        this.message = message;
        this.code = code;
        this.message = message;
    }
    static userCancelOperation() {
        return new AuthError(4011, "The user cancel the operation");
    }
    static unauthorized() {
        return new AuthError(4100, "The requested method and/or account has not been authorized by the user");
    }
    static unsupportedMethod() {
        return new AuthError(4200, "The Provider does not support the requested method");
    }
    static unsupportedChain() {
        return new AuthError(4201, "The Provider does not support the chain");
    }
    static paramsError() {
        return new AuthError(8002, "Param error, see doc for more info");
    }
    static notLogin() {
        return new AuthError(8005, "User not login");
    }
    static walletNotCreated() {
        return new AuthError(8006, "Wallet not created");
    }
}
exports.AuthError = AuthError;
exports.AuthTypes = [
    "email",
    "phone",
    "facebook",
    "google",
    "apple",
    "discord",
    "github",
    "twitch",
    "microsoft",
    "linkedin",
];
exports.supportChains = {
    ethereum: [1, 3, 4, 5, 42],
    bsc: [56, 97],
    polygon: [137, 80001],
    avalanche: [43114, 43113],
    fantom: [250, 4002],
    arbitrum: [42161, 421611],
    moonbeam: [1284, 1287],
    moonriver: [1285, 1287],
    harmony: [1666600000, 1666700000],
    optimism: [10, 69],
    heco: [128, 256],
    aurora: [1313161554, 1313161555],
    kcc: [321, 322],
    solana: [101, 102, 103],
};
//# sourceMappingURL=types.js.map