/// <reference types="node" />
import { EventEmitter } from "events";
import { Config, UserInfo, AuthType, Wallet, ChainInfo, UIMode } from "./types";
declare type PrefixedHexString = string;
declare type Base58String = string;
export declare class Auth {
    private config;
    private userStore;
    events: EventEmitter;
    private secretKey;
    private _authResult;
    private uiMode;
    private displayCloseButton;
    constructor(config: Config);
    login(config?: {
        preferredAuthType?: AuthType;
        emailOrPhoneAccount?: string;
        supportAuthTypes?: string;
        loginFormMode?: boolean;
    }): Promise<UserInfo>;
    logout(): Promise<void>;
    sign(method: string, message: Base58String | PrefixedHexString): Promise<string>;
    signAllTransactions(messages: Base58String[]): Promise<string[]>;
    sendTransaction(message: Base58String | PrefixedHexString): Promise<string>;
    setChainInfo(chain: ChainInfo): Promise<Wallet[]>;
    chainId(): number;
    basicCredentials(): string;
    isLogin(): boolean;
    userInfo(): UserInfo | null;
    walletExist(): boolean;
    wallet(chainType?: string): Wallet | null;
    setAuthTheme(config: {
        uiMode?: UIMode;
        displayCloseButton?: boolean;
    }): void;
    on(event: string, listener: (...args: any[]) => void): void;
    once(event: string, listener: (...args: any[]) => void): void;
    off(event: string, listener: (...args: any[]) => void): void;
    removeListener(event: string, listener: (...args: any[]) => void): void;
    private walletChainName;
    private setAuthResult;
    private setUserInfo;
    private getIframe;
    private buildUrl;
    private getThemeType;
    private decrypt;
}
export {};
