export declare class AuthError {
    code: number;
    message: string;
    constructor(code: number, message: string);
    static userCancelOperation(): AuthError;
    static unauthorized(): AuthError;
    static unsupportedMethod(): AuthError;
    static unsupportedChain(): AuthError;
    static paramsError(): AuthError;
    static notLogin(): AuthError;
    static walletNotCreated(): AuthError;
}
export interface RequestArguments {
    method: string;
    params?: unknown;
}
export interface JsonRpcRequest extends RequestArguments {
    id: number | string;
    jsonrpc: string;
}
export interface JsonRpcError {
    code: number;
    message: string;
}
export interface JsonRpcResponse {
    id: number | string;
    jsonrpc: string;
    result?: any;
    error?: JsonRpcError;
}
export interface ParticleRpcRequest extends JsonRpcRequest {
    chainId: number;
}
export declare const AuthTypes: readonly ["email", "phone", "facebook", "google", "apple", "discord", "github", "twitch", "microsoft", "linkedin"];
declare type AuthTypeTuple = typeof AuthTypes;
export declare type AuthType = AuthTypeTuple[number] | "all";
export interface UserInfo {
    uuid: string;
    token: string;
    wallets: Wallet[];
}
export interface Wallet {
    uuid: string;
    chain_name: string;
    public_address: string;
}
export declare const supportChains: {
    ethereum: number[];
    bsc: number[];
    polygon: number[];
    avalanche: number[];
    fantom: number[];
    arbitrum: number[];
    moonbeam: number[];
    moonriver: number[];
    harmony: number[];
    optimism: number[];
    heco: number[];
    aurora: number[];
    kcc: number[];
    solana: number[];
};
export declare type ChainName = keyof typeof supportChains;
export interface Config {
    projectId: string;
    clientKey: string;
    appId: string;
    chainName?: ChainName;
    chainId?: number;
    authUrl?: string;
}
export interface ChainInfo {
    name: ChainName;
    id: number;
}
export declare type UIMode = "dark" | "light" | "auto";
export {};
