{"version":3,"file":"metadataHelpers-node.js","mappings":";;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,iCAA4B;;;;ACAkC;AACnC;AACW;;AAE5C,2CAA2C,gCAAgC,oCAAoC,oDAAoD,6DAA6D,iEAAiE,sCAAsC;;AAEvU,iCAAiC,gBAAgB,sBAAsB,OAAO,uDAAuD,6DAA6D,wBAAe,6BAA6B,oKAAoK,mFAAmF,KAAK;AAC1e,YAAY,qCAAkB;AAC9B,aAAa,6CAAW;AACxB;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA,GAAG;AACH,yBAAyB,KAAK;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA,2DAA2D;AAC3D;;AAEA,kBAAkB,+BAAK;AACvB;AACA,GAAG,GAAG;AACN;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,+DAA+D;AAC/D,IAAI;AACJ;AACA;;AAEA,wDAAwD,KAAK;AAC7D;AACA;AACA;;AAEA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","sources":["webpack://@toruslabs/metadata-helpers/external commonjs \"node-fetch\"","webpack://@toruslabs/metadata-helpers/webpack/bootstrap","webpack://@toruslabs/metadata-helpers/webpack/runtime/compat get default export","webpack://@toruslabs/metadata-helpers/webpack/runtime/define property getters","webpack://@toruslabs/metadata-helpers/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/metadata-helpers/webpack/runtime/make namespace object","webpack://@toruslabs/metadata-helpers/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/metadata-helpers/external commonjs \"lodash.merge\"","webpack://@toruslabs/metadata-helpers/external commonjs \"loglevel\"","webpack://@toruslabs/metadata-helpers/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js","webpack://@toruslabs/metadata-helpers/external commonjs \"json-stable-stringify\"","webpack://@toruslabs/metadata-helpers/external commonjs \"elliptic\"","webpack://@toruslabs/metadata-helpers/external commonjs \"keccak\"","webpack://@toruslabs/metadata-helpers/./src/utils.ts","webpack://@toruslabs/metadata-helpers/./src/MetadataStorageLayer.ts","webpack://@toruslabs/metadata-helpers/external commonjs \"@toruslabs/eccrypto\"","webpack://@toruslabs/metadata-helpers/./src/webAuthnShareResolver.ts","webpack://@toruslabs/metadata-helpers/./src/index.ts"],"sourcesContent":["module.exports = require(\"node-fetch\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import { ec as EC } from \"elliptic\";\nimport createKeccakHash from \"keccak\";\n\nexport function keccak256(a: string | Buffer): Buffer {\n  return createKeccakHash(\"keccak256\").update(a).digest();\n}\n\nexport const ec = new EC(\"secp256k1\");\n","import { post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport stringify from \"json-stable-stringify\";\n\nimport { ec, keccak256 } from \"./utils\";\n\nexport type PubKeyParams = {\n  pub_key_X: string;\n  pub_key_Y: string;\n};\n\nexport type MetadataParams = PubKeyParams & {\n  set_data: {\n    data: string;\n    timestamp: string;\n  };\n  signature: string;\n};\n\nclass MetadataStorageLayer {\n  public metadataHost: string;\n\n  public serverTimeOffset: number; // ms\n\n  constructor(metadataHost = \"https://metadata.tor.us\", serverTimeOffset = 0) {\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  generateMetadataParams(message: string, privateKeyHex: string): MetadataParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(\n        sig.r.toString(16, 64) + sig.s.toString(16, 64) + sig.recoveryParam?.toString(16).padStart(2, \"0\").slice(-2) ?? \"00\",\n        \"hex\"\n      ).toString(\"base64\"),\n    };\n  }\n\n  generatePubKeyParams(privateKeyHex: string): PubKeyParams {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...data, namespace } : data;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n\n  async getMetadata(pubKey: PubKeyParams, namespace: string | null, options?: RequestInit): Promise<string> {\n    const params = namespace !== null ? { ...pubKey, namespace } : pubKey;\n    const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/get`, params, options, { useAPIKey: true });\n    return metadataResponse.message;\n  }\n}\n\nexport default MetadataStorageLayer;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","import { decrypt, Ecies, encrypt, getPublic } from \"@toruslabs/eccrypto\";\n\nimport MetadataStorageLayer, { PubKeyParams } from \"./MetadataStorageLayer\";\nimport { ec } from \"./utils\";\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\n\nexport type EciesHex = {\n  iv: string;\n  ephemPublicKey: string;\n  ciphertext: string;\n  mac: string;\n};\n\nexport function encParamsHexToBuf(encParamsHex: EciesHex): Ecies {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\"),\n  };\n}\n\nexport function encParamsBufToHex(encParams: Ecies): EciesHex {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n  };\n}\n\nexport async function encryptData(privKeyHex: string, d: unknown): Promise<string> {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\n\nexport async function decryptData<T>(privKeyHex: string, d: string): Promise<T> {\n  const encParamsHex: EciesHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data: T = JSON.parse(serializedDec);\n  return data;\n}\n\nexport async function getAndDecryptData<T>(m: MetadataStorageLayer, privKeyHex: string, namespace: string): Promise<Record<string, T> | null> {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({ pub_key_X: pubKey.getX().toString(16), pub_key_Y: pubKey.getY().toString(16) }, namespace);\n  if (!serializedData) {\n    return null;\n  }\n  const data = await decryptData<T>(privKeyHex, serializedData);\n  return data as Record<string, T>;\n}\n\nexport async function encryptAndSetData(m: MetadataStorageLayer, privKeyHex: string, d: Record<string, unknown>, namespace: string): Promise<void> {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\n\nexport async function setTorusShare(\n  m: MetadataStorageLayer,\n  webAuthnPubKey: PubKeyParams,\n  webAuthnRefHex: string,\n  subspace: string,\n  subspaceData: unknown\n): Promise<void> {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y,\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\n\nexport async function setDeviceShare(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string, subspaceData: unknown): Promise<void> {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d: Record<string, unknown> = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\n\nexport async function getTorusShare<T>(m: MetadataStorageLayer, webAuthnKeyHex: string, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<EciesHex>(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\n\nexport async function getDeviceShare<T>(m: MetadataStorageLayer, webAuthnRefHex: string, subspace: string): Promise<T | null> {\n  const data = await getAndDecryptData<T>(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n","export * from \"./MetadataStorageLayer\";\nexport { default } from \"./MetadataStorageLayer\";\nexport * from \"./utils\";\nexport * from \"./webAuthnShareResolver\";\n"],"names":["ec","EC","createKeccakHash","keccak256","a","update","digest","post","setAPIKey","setEmbedHost","stringify","MetadataStorageLayer","constructor","metadataHost","serverTimeOffset","apiKey","embedHost","generateMetadataParams","message","privateKeyHex","key","keyFromPrivate","setData","data","timestamp","Math","floor","Date","now","toString","sig","sign","pub_key_X","getPublic","getX","pub_key_Y","getY","set_data","signature","Buffer","from","r","s","recoveryParam","padStart","slice","generatePubKeyParams","setMetadata","namespace","options","params","metadataResponse","useAPIKey","getMetadata","pubKey","decrypt","encrypt","WEBAUTHN_TORUS_SHARE","WEBAUTHN_DEVICE_SHARE","encParamsHexToBuf","encParamsHex","iv","ephemPublicKey","ciphertext","mac","encParamsBufToHex","encParams","encryptData","privKeyHex","d","serializedDec","JSON","serializedBuf","sData","decryptData","parse","keyPair","getPrivate","getAndDecryptData","m","serializedData","encryptAndSetData","metadataParams","setTorusShare","webAuthnPubKey","webAuthnRefHex","subspace","subspaceData","refKeyPair","privKey","keyFromPublic","x","y","serializedSubspaceData","serializedSubspaceDataBuf","encSubspaceData","encSubspaceDataHex","setDeviceShare","getTorusShare","webAuthnKeyHex","getDeviceShare","default"],"sourceRoot":""}