"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyValueStorage = void 0;
const tslib_1 = require("tslib");
const better_sqlite3_1 = tslib_1.__importDefault(require("better-sqlite3"));
const safe_json_utils_1 = require("safe-json-utils");
const shared_1 = require("../shared");
const sqlite_1 = require("./sqlite");
const DB_NAME = "walletconnect_kvs.db";
const TABLE_NAME = "keyvaluestorage";
class KeyValueStorage {
    constructor(opts) {
        this.database = new better_sqlite3_1.default((opts === null || opts === void 0 ? void 0 : opts.database) || DB_NAME);
        this.statements = new sqlite_1.Statements((opts === null || opts === void 0 ? void 0 : opts.table) || TABLE_NAME);
        this.database.prepare(this.statements.createTable()).run();
    }
    getKeys() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const keys = this.database
                .prepare(this.statements.selectKeys())
                .all()
                .map(x => Object.values(x))
                .flat();
            return keys;
        });
    }
    getEntries() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const entries = this.database
                .prepare(this.statements.selectEntries())
                .all()
                .map(x => shared_1.parseEntry(Object.values(x)));
            return entries;
        });
    }
    getItem(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const item = this.database
                .prepare(this.statements.selectValueWhereKey())
                .get(key);
            if (typeof item === "undefined" || typeof item.value === "undefined") {
                return undefined;
            }
            return safe_json_utils_1.safeJsonParse(item.value);
        });
    }
    setItem(key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.database
                .prepare(this.statements.replaceInto())
                .run({ key, value: safe_json_utils_1.safeJsonStringify(value) });
        });
    }
    removeItem(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.database.prepare(this.statements.deleteFromWhereKey()).run(key);
        });
    }
}
exports.KeyValueStorage = KeyValueStorage;
exports.default = KeyValueStorage;
//# sourceMappingURL=index.js.map