{"version":3,"file":"index.cjs.js","sources":["../src/caip.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...ns.chains);\n  });\n  return chains;\n}\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\n\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- time ------------------------------------------------- //\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return fromMiliseconds(Date.now()) >= toMiliseconds(expiry);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>() {\n  const timeout = toMiliseconds(FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(promiseReject, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"irn\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const result = {\n    protocol,\n    topic: requiredValues[0],\n    version: parseInt(requiredValues[1], 10),\n    symKey: queryParams.symKey as string,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { SessionTypes } from \"@walletconnect/types\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        chains.push(...getAccountsChains(extension.accounts));\n      });\n    }\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) methods.push(...extension.methods);\n      });\n    }\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n    if (namespace.extension) {\n      namespace.extension.forEach((extension) => {\n        const extensionChains = getAccountsChains(extension.accounts);\n        if (extensionChains.includes(chainId)) events.push(...extension.events);\n      });\n    }\n  });\n\n  return events;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events, extension } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n\n    if (\n      !hasOverlap(requiredNamespace.chains, chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n\n    if (compatible && extension) {\n      extension.forEach((extensionNamespace) => {\n        const { accounts, methods, events } = extensionNamespace;\n        const chains = getAccountsChains(accounts);\n        const overlap = requiredNamespace.extension?.find(\n          (ext) =>\n            hasOverlap(ext.chains, chains) &&\n            hasOverlap(ext.methods, methods) &&\n            hasOverlap(ext.events, events),\n        );\n        if (!overlap) compatible = false;\n      });\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidExtension(namespace: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isUndefined(namespace?.extension)) {\n    if (!isValidArray(namespace.extension) || !namespace.extension.length) {\n      error = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `${method} extension should be an array of namespaces, or omitted`,\n      );\n    }\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(key, namespace?.chains, `${method} requiredNamespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validChainsError) {\n      error = validChainsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validChainsError = isValidChains(key, extension.chains, `${method} extension`);\n        if (validChainsError) {\n          error = validChainsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validAccountsError = isValidAccounts(extension.accounts, `${method} extension`);\n        if (validAccountsError) {\n          error = validAccountsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    const validExtensionError = isValidExtension(namespace, method);\n    if (validActionsError) {\n      error = validActionsError;\n    } else if (validExtensionError) {\n      error = validExtensionError;\n    } else if (namespace.extension) {\n      namespace.extension.forEach((extension: any) => {\n        if (error) return;\n        const validActionsError = isValidActions(extension, `${method}, extension`);\n        if (validActionsError) {\n          error = validActionsError;\n        }\n      });\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, requiredNamespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n) {\n  let error: ErrorObject = null;\n  const requiredNamespaceKeys = Object.keys(requiredNamespaces);\n  const namespaceKeys = Object.keys(namespaces);\n\n  if (!hasOverlap(requiredNamespaceKeys, namespaceKeys)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy requiredNamespaces`,\n    );\n  } else {\n    requiredNamespaceKeys.forEach((key) => {\n      if (error) return;\n\n      const requiredNamespaceChains = requiredNamespaces[key].chains;\n      const namespaceChains = getAccountsChains(namespaces[key].accounts);\n\n      if (!hasOverlap(requiredNamespaceChains, namespaceChains)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces accounts don't satisfy requiredNamespaces chains for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].methods, namespaces[key].methods)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces methods don't satisfy requiredNamespaces methods for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].events, namespaces[key].events)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces events don't satisfy requiredNamespaces events for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && !namespaces[key].extension) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n        );\n      } else if (requiredNamespaces[key].extension && namespaces[key].extension) {\n        requiredNamespaces[key].extension?.forEach(({ methods, events, chains }) => {\n          if (error) return;\n          const isOverlap = namespaces[key].extension?.find((namespace) => {\n            const accChains = getAccountsChains(namespace.accounts);\n            return (\n              hasOverlap(chains, accChains) &&\n              hasOverlap(events, namespace.events) &&\n              hasOverlap(methods, namespace.methods)\n            );\n          });\n\n          if (!isOverlap) {\n            error = getInternalError(\n              \"NON_CONFORMING_NAMESPACES\",\n              `${context} namespaces extension doesn't satisfy requiredNamespaces extension for ${key}`,\n            );\n          }\n        });\n      }\n    });\n  }\n\n  return error;\n}\n"],"names":["CAIP_DELIMITER","chain","namespace","reference","params","account","address","array","parser","unique","str","value","accounts","namespaces","keys","key","ns","chains","requiredNamespaces","ZERO_INDEX","TYPE_LENGTH","IV_LENGTH","KEY_LENGTH","keyPair","x25519","toString","random","randomBytes","privateKeyA","publicKeyB","sharedKey","fromString","symKey","HKDF","SHA256","result","hash","message","type","byte","senderPublicKey","iv","sealed","ChaCha20Poly1305","box","concat","encoded","bytes","slice1","slice2","slice3","opts","deserialized","getDocument","getNavigator","queryString","newQueryParams","queryParams","qs","__spreadValues","getWindowMetadata","protocol","version","_a","env","metadata","getLocation","info","detect","os","sdkVersion","id","relayUrl","auth","projectId","splitUrl","ua","url","domain","obj","context","depth","a","b","x","arr","map","cb","res","word","c","w","ttl","now","fromMiliseconds","toMiliseconds","expiry","timeout","FIVE_MINUTES","cacheResolve","cacheReject","cacheTimeout","promiseResolve","promiseReject","topic","target","parsed","event","jsonrpc","RELAY_JSONRPC","delimiter","relay","prefix","name","pathStart","pathEnd","requiredValues","k","chainId","extension","methods","events","SDK_ERRORS","INTERNAL_ERRORS","code","itemCondition","input","optional","session","sessionKeys","paramsKeys","compatible","hasOverlap","getAccountsChains","requiredNamespace","extensionNamespace","ext","split","e","method","error","getInternalError","valid","item","getSdkError","validChainsError","validExtensionError","validAccountsError","validActionsError","request","response","getNamespacesChains","getNamespacesMethodsForChainId","eventName","getNamespacesEventsForChainId","requiredNamespaceKeys","namespaceKeys","requiredNamespaceChains","namespaceChains","accChains"],"mappings":"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"}