import Database from "better-sqlite3";
import { safeJsonParse, safeJsonStringify } from "safe-json-utils";
import { parseEntry, } from "../shared";
import { Statements } from "./sqlite";
const DB_NAME = "walletconnect_kvs.db";
const TABLE_NAME = "keyvaluestorage";
export class KeyValueStorage {
    constructor(opts) {
        this.database = new Database((opts === null || opts === void 0 ? void 0 : opts.database) || DB_NAME);
        this.statements = new Statements((opts === null || opts === void 0 ? void 0 : opts.table) || TABLE_NAME);
        this.database.prepare(this.statements.createTable()).run();
    }
    async getKeys() {
        const keys = this.database
            .prepare(this.statements.selectKeys())
            .all()
            .map(x => Object.values(x))
            .flat();
        return keys;
    }
    async getEntries() {
        const entries = this.database
            .prepare(this.statements.selectEntries())
            .all()
            .map(x => parseEntry(Object.values(x)));
        return entries;
    }
    async getItem(key) {
        const item = this.database
            .prepare(this.statements.selectValueWhereKey())
            .get(key);
        if (typeof item === "undefined" || typeof item.value === "undefined") {
            return undefined;
        }
        return safeJsonParse(item.value);
    }
    async setItem(key, value) {
        this.database
            .prepare(this.statements.replaceInto())
            .run({ key, value: safeJsonStringify(value) });
    }
    async removeItem(key) {
        this.database.prepare(this.statements.deleteFromWhereKey()).run(key);
    }
}
export default KeyValueStorage;
//# sourceMappingURL=index.js.map